// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Verify master template is correct renders master template correctly 1`] = `
{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "AdminSignUp": {
      "Fn::Equals": [
        {
          "Ref": "AdminUserSignUp",
        },
        "TRUE",
      ],
    },
    "BedrockEnable": {
      "Fn::Or": [
        {
          "Fn::Equals": [
            {
              "Ref": "LLMApi",
            },
            "BEDROCK",
          ],
        },
        {
          "Fn::Equals": [
            {
              "Ref": "EmbeddingsApi",
            },
            "BEDROCK",
          ],
        },
        {
          "Condition": "BedrockKnowledgeBaseEnable",
        },
      ],
    },
    "BedrockKnowledgeBaseEnable": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "BedrockKnowledgeBaseId",
            },
            "",
          ],
        },
      ],
    },
    "BuildExamples": {
      "Fn::Equals": [
        {
          "Ref": "BuildExamples",
        },
        "TRUE",
      ],
    },
    "CreateConcurrency": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "FulfillmentConcurrency",
            },
            "0",
          ],
        },
      ],
    },
    "CreateDomain": {
      "Fn::Equals": [
        {
          "Ref": "OpenSearchName",
        },
        "EMPTY",
      ],
    },
    "DeprecatedSSMSettings": {
      "Fn::Equals": [
        "true",
        "false",
      ],
    },
    "Domain": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "ApprovedDomain",
            },
            "NONE",
          ],
        },
      ],
    },
    "DontCreateDomain": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "OpenSearchName",
            },
            "EMPTY",
          ],
        },
      ],
    },
    "EmbeddingsBedrock": {
      "Fn::Equals": [
        {
          "Ref": "EmbeddingsApi",
        },
        "BEDROCK",
      ],
    },
    "EmbeddingsEnable": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "EmbeddingsApi",
            },
            "DISABLED",
          ],
        },
      ],
    },
    "EmbeddingsLambda": {
      "Fn::Equals": [
        {
          "Ref": "EmbeddingsApi",
        },
        "LAMBDA",
      ],
    },
    "EmbeddingsLambdaArn": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "EmbeddingsLambdaArn",
            },
            "",
          ],
        },
      ],
    },
    "FGACEnabled": {
      "Fn::Equals": [
        {
          "Ref": "OpenSearchFineGrainAccessControl",
        },
        "TRUE",
      ],
    },
    "KendraPluginsEnabled": {
      "Fn::Or": [
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "KendraWebPageIndexId",
                },
                "",
              ],
            },
          ],
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "KendraFaqIndexId",
                },
                "",
              ],
            },
          ],
        },
        {
          "Fn::Not": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AltSearchKendraIndexes",
                },
                "",
              ],
            },
          ],
        },
      ],
    },
    "LLMBedrock": {
      "Fn::Equals": [
        {
          "Ref": "LLMApi",
        },
        "BEDROCK",
      ],
    },
    "LLMEnable": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "LLMApi",
            },
            "DISABLED",
          ],
        },
      ],
    },
    "LLMLambda": {
      "Fn::Equals": [
        {
          "Ref": "LLMApi",
        },
        "LAMBDA",
      ],
    },
    "LLMLambdaArn": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "LLMLambdaArn",
            },
            "",
          ],
        },
      ],
    },
    "LogRetentionPeriodIsNotZero": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "LogRetentionPeriod",
            },
            0,
          ],
        },
      ],
    },
    "Public": {
      "Fn::Equals": [
        {
          "Ref": "PublicOrPrivate",
        },
        "PUBLIC",
      ],
    },
    "SingleNode": {
      "Fn::Equals": [
        {
          "Ref": "OpenSearchNodeCount",
        },
        "1",
      ],
    },
    "SolutionHelperSendAnonymizedDataToAWS": {
      "Fn::Equals": [
        {
          "Fn::FindInMap": [
            "SolutionHelperAnonymizedData",
            "SendAnonymizedData",
            "Data",
          ],
        },
        "Yes",
      ],
    },
    "StreamingEnabled": {
      "Fn::Equals": [
        {
          "Ref": "EnableStreaming",
        },
        "TRUE",
      ],
    },
    "VPCEnabled": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            "",
            {
              "Fn::Join": [
                "",
                {
                  "Ref": "VPCSecurityGroupIdList",
                },
              ],
            },
          ],
        },
      ],
    },
    "XRAYEnabled": {
      "Fn::Equals": [
        {
          "Ref": "XraySetting",
        },
        "TRUE",
      ],
    },
  },
  "Description": "(SO0189-ext) QnABot with admin and client websites - Version vx.x.x",
  "Mappings": {
    "BedrockDefaults": {
      "ai21.jamba-instruct-v1": {
        "GenerateQuerySystemPrompt": "You are an AI assistant designed to disambiguate user queries.",
        "MaxTokens": 256000,
        "ModelID": "ai21.jamba-instruct-v1:0",
        "ModelParams": "{\\"temperature\\":0, \\"maxTokens\\":300, \\"topP\\":1}",
        "NoHitsRegex": "(Sorry, I don't know|unable to assist you|i don't have enough context|i don't have enough information|i don't have any information|do not contain any information|do not contain information|i could not find an exact answer|no information in the search results|search results do not mention|search results do not provide specific|don't see any information in the provided search results|search results do not contain|no information in the provided search results|not find any information|search results did not contain|unable to respond|There is no mention of|documents do not mention anything|There is no information provided|reference passages do not mention|reference doesn't specify|could not find an answer to this question|the model cannot answer this question|none of the search results contain)",
        "QAPromptTemplate": "The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know. Documents: {context} Instruction: Based on the above documents, provide a detailed answer for {query} Answer \\"Sorry, I don't know\\" if not present in the document. Solution:",
        "QASystemPrompt": "You are a seasoned and helpful question answering AI assistant.",
        "QueryPromptTemplate": "<br><br>Human: Here is a chat history in <chatHistory> tags:<br><chatHistory><br>{history}<br></chatHistory><br>Human: And here is a follow up question or statement from the human in <followUpMessage> tags:<br><followUpMessage><br>{input}<br></followUpMessage><br>Human: Rephrase the follow up question or statement as a standalone question or statement that makes sense without reading the chat history.<br><br>Assistant: Here is the rephrased follow up question or statement:",
      },
      "amazon.nova-lite-v1": {
        "GenerateQuerySystemPrompt": "You are an AI assistant designed to disambiguate user queries.",
        "KnowledgeBasePromptTemplate": "You are a question answering bot who gives helpful, detailed, and polite answers to the user's questions. In this session, the model has access to search results and a users question, your job is to answer the user's question using only information from the search results. Model Instructions: - You should provide concise answer to simple questions when the answer is directly contained in search results, but when comes to yes/no question, provide some details. - In case the question requires multi-hop reasoning, you should find relevant information from search results and summarize the answer based on relevant information with logical reasoning. - If the search results do not contain information that can answer the question, then respond saying \\"Sorry, I don't know that.\\". - $output_format_instructions$ - DO NOT USE INFORMATION THAT IS NOT IN SEARCH RESULTS! User: $query$ Bot: Resource: Search Results: $search_results$ Bot:",
        "MaxTokens": 300000,
        "ModelID": "amazon.nova-lite-v1:0",
        "ModelParams": "{\\"temperature\\":0, \\"maxTokens\\":300, \\"topP\\":1}",
        "NoHitsRegex": "(Sorry, I don't know|unable to assist you|i don't have enough context|i don't have enough information|i don't have any information|do not contain any information|do not contain information|i could not find an exact answer|no information in the search results|search results do not mention|search results do not provide specific|don't see any information in the provided search results|search results do not contain|no information in the provided search results|not find any information|search results did not contain|unable to respond|There is no mention of|documents do not mention anything|There is no information provided|reference passages do not mention|reference doesn't specify|could not find an answer to this question|the model cannot answer this question|none of the search results contain)",
        "QAPromptTemplate": "<br><br>Human: Here are reference passages in <references> tags:<br><references><br>{context}<br></references><br>If the references contain the information needed to respond, then write a confident response in under 50 words, quoting the relevant references. <br>Otherwise, if you can make an informed guess based on the reference passages, then write a less confident response in under 50 words, stating your assumptions.<br>Finally, if the references do not have any relevant information, then respond saying \\"Sorry, I don't know\\".<br><question><br>{query}<br></question><br><br>Assistant: According to the reference passages, in under 50 words:",
        "QASystemPrompt": "You are a seasoned and helpful question answering AI assistant.",
        "QueryPromptTemplate": "Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.<br>Chat History: <br>{history}<br>Follow up question: {input}<br>Standalone question:",
      },
      "amazon.nova-micro-v1": {
        "GenerateQuerySystemPrompt": "You are an AI assistant designed to disambiguate user queries.",
        "KnowledgeBasePromptTemplate": "You are a question answering bot who gives helpful, detailed, and polite answers to the user's questions. In this session, the model has access to search results and a users question, your job is to answer the user's question using only information from the search results. Model Instructions: - You should provide concise answer to simple questions when the answer is directly contained in search results, but when comes to yes/no question, provide some details. - In case the question requires multi-hop reasoning, you should find relevant information from search results and summarize the answer based on relevant information with logical reasoning. - If the search results do not contain information that can answer the question, then respond saying \\"Sorry, I don't know that.\\". - $output_format_instructions$ - DO NOT USE INFORMATION THAT IS NOT IN SEARCH RESULTS! User: $query$ Bot: Resource: Search Results: $search_results$ Bot:",
        "MaxTokens": 128000,
        "ModelID": "amazon.nova-micro-v1:0",
        "ModelParams": "{\\"temperature\\":0, \\"maxTokens\\":300, \\"topP\\":1}",
        "NoHitsRegex": "(Sorry, I don't know|unable to assist you|i don't have enough context|i don't have enough information|i don't have any information|do not contain any information|do not contain information|i could not find an exact answer|no information in the search results|search results do not mention|search results do not provide specific|don't see any information in the provided search results|search results do not contain|no information in the provided search results|not find any information|search results did not contain|unable to respond|There is no mention of|documents do not mention anything|There is no information provided|reference passages do not mention|reference doesn't specify|could not find an answer to this question|the model cannot answer this question|none of the search results contain)",
        "QAPromptTemplate": "<br><br>Human: Here are reference passages in <references> tags:<br><references><br>{context}<br></references><br>If the references contain the information needed to respond, then write a confident response in under 50 words, quoting the relevant references. <br>Otherwise, if you can make an informed guess based on the reference passages, then write a less confident response in under 50 words, stating your assumptions.<br>Finally, if the references do not have any relevant information, then respond saying \\"Sorry, I don't know\\".<br><question><br>{query}<br></question><br><br>Assistant: According to the reference passages, in under 50 words:",
        "QASystemPrompt": "You are a seasoned and helpful question answering AI assistant.",
        "QueryPromptTemplate": "Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.<br>Chat History: <br>{history}<br>Follow up question: {input}<br>Standalone question:",
      },
      "amazon.nova-pro-v1": {
        "GenerateQuerySystemPrompt": "You are an AI assistant designed to disambiguate user queries.",
        "KnowledgeBasePromptTemplate": "You are a question answering bot who gives helpful, detailed, and polite answers to the user's questions. In this session, the model has access to search results and a users question, your job is to answer the user's question using only information from the search results. Model Instructions: - You should provide concise answer to simple questions when the answer is directly contained in search results, but when comes to yes/no question, provide some details. - In case the question requires multi-hop reasoning, you should find relevant information from search results and summarize the answer based on relevant information with logical reasoning. - If the search results do not contain information that can answer the question, then respond saying \\"Sorry, I don't know that.\\". - $output_format_instructions$ - DO NOT USE INFORMATION THAT IS NOT IN SEARCH RESULTS! User: $query$ Bot: Resource: Search Results: $search_results$ Bot:",
        "MaxTokens": 300000,
        "ModelID": "amazon.nova-pro-v1:0",
        "ModelParams": "{\\"temperature\\":0, \\"maxTokens\\":300, \\"topP\\":1}",
        "NoHitsRegex": "(Sorry, I don't know|unable to assist you|i don't have enough context|i don't have enough information|i don't have any information|do not contain any information|do not contain information|i could not find an exact answer|no information in the search results|search results do not mention|search results do not provide specific|don't see any information in the provided search results|search results do not contain|no information in the provided search results|not find any information|search results did not contain|unable to respond|There is no mention of|documents do not mention anything|There is no information provided|reference passages do not mention|reference doesn't specify|could not find an answer to this question|the model cannot answer this question|none of the search results contain)",
        "QAPromptTemplate": "<br><br>Human: Here are reference passages in <references> tags:<br><references><br>{context}<br></references><br>If the references contain the information needed to respond, then write a confident response in under 50 words, quoting the relevant references. <br>Otherwise, if you can make an informed guess based on the reference passages, then write a less confident response in under 50 words, stating your assumptions.<br>Finally, if the references do not have any relevant information, then respond saying \\"Sorry, I don't know\\".<br><question><br>{query}<br></question><br><br>Assistant: According to the reference passages, in under 50 words:",
        "QASystemPrompt": "You are a seasoned and helpful question answering AI assistant.",
        "QueryPromptTemplate": "Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.<br>Chat History: <br>{history}<br>Follow up question: {input}<br>Standalone question:",
      },
      "amazon.titan-embed-text-v1": {
        "EmbeddingsDimensions": 1536,
        "MaxTokens": 8000,
        "ModelID": "amazon.titan-embed-text-v1",
      },
      "amazon.titan-embed-text-v2": {
        "EmbeddingsDimensions": 1024,
        "MaxTokens": 8000,
        "ModelID": "amazon.titan-embed-text-v2:0",
      },
      "amazon.titan-text-express-v1": {
        "GenerateQuerySystemPrompt": "",
        "MaxTokens": 8000,
        "ModelID": "amazon.titan-text-express-v1",
        "ModelParams": "{\\"temperature\\":0, \\"maxTokens\\":300, \\"topP\\":1}",
        "NoHitsRegex": "(Sorry, I don't know|unable to assist you|i don't have enough context|i don't have enough information|i don't have any information|do not contain any information|do not contain information|i could not find an exact answer|no information in the search results|search results do not mention|search results do not provide specific|don't see any information in the provided search results|search results do not contain|no information in the provided search results|not find any information|search results did not contain|unable to respond|There is no mention of|documents do not mention anything|There is no information provided|reference passages do not mention|reference doesn't specify|could not find an answer to this question|the model cannot answer this question|none of the search results contain)",
        "QAPromptTemplate": "<br><br>Human: You are a friendly AI assistant. Here are reference passages in <references> tags:<br><references><br>{context}<br></references><br>If the references contain the information needed to respond, then write a confident response in under 50 words, quoting the relevant references. <br>Otherwise, if you can make an informed guess based on the reference passages, then write a less confident response in under 50 words, stating your assumptions.<br>Finally, if the references do not have any relevant information, then respond saying \\"Sorry, I don't know\\".<br><question><br>{query}<br></question><br><br>Assistant: According to the reference passages, in under 50 words:",
        "QASystemPrompt": "",
        "QueryPromptTemplate": "Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.<br>Chat History: <br>{history}<br>Follow up question: {input}<br>Standalone question:",
      },
      "amazon.titan-text-lite-v1": {
        "GenerateQuerySystemPrompt": "",
        "MaxTokens": 4000,
        "ModelID": "amazon.titan-text-lite-v1",
        "ModelParams": "{\\"temperature\\":0, \\"maxTokens\\":300, \\"topP\\":1}",
        "NoHitsRegex": "(Sorry, I don't know|unable to assist you|i don't have enough context|i don't have enough information|i don't have any information|do not contain any information|do not contain information|i could not find an exact answer|no information in the search results|search results do not mention|search results do not provide specific|don't see any information in the provided search results|search results do not contain|no information in the provided search results|not find any information|search results did not contain|unable to respond|There is no mention of|documents do not mention anything|There is no information provided|reference passages do not mention|reference doesn't specify|could not find an answer to this question|the model cannot answer this question|none of the search results contain)",
        "QAPromptTemplate": "<br><br>Human: You are a friendly AI assistant. Here are reference passages in <references> tags:<br><references><br>{context}<br></references><br>If the references contain the information needed to respond, then write a confident response in under 50 words, quoting the relevant references. <br>Otherwise, if you can make an informed guess based on the reference passages, then write a less confident response in under 50 words, stating your assumptions.<br>Finally, if the references do not have any relevant information, then respond saying \\"Sorry, I don't know\\".<br><question><br>{query}<br></question><br><br>Assistant: According to the reference passages, in under 50 words:",
        "QASystemPrompt": "",
        "QueryPromptTemplate": "Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.<br>Chat History: <br>{history}<br>Follow up question: {input}<br>Standalone question:",
      },
      "amazon.titan-text-premier-v1": {
        "GenerateQuerySystemPrompt": "",
        "KnowledgeBasePromptTemplate": "You are a question answering bot who gives helpful, detailed, and polite answers to the user's questions. In this session, the model has access to search results and a users question, your job is to answer the user's question using only information from the search results. Model Instructions: - You should provide concise answer to simple questions when the answer is directly contained in search results, but when comes to yes/no question, provide some details. - In case the question requires multi-hop reasoning, you should find relevant information from search results and summarize the answer based on relevant information with logical reasoning. - If the search results do not contain information that can answer the question, then respond saying \\"Sorry, I don't know that.\\". - $output_format_instructions$ - DO NOT USE INFORMATION THAT IS NOT IN SEARCH RESULTS! User: $query$ Bot: Resource: Search Results: $search_results$ Bot:",
        "MaxTokens": 32000,
        "ModelID": "amazon.titan-text-premier-v1:0",
        "ModelParams": "{\\"temperature\\":0, \\"maxTokens\\":300, \\"topP\\":1}",
        "NoHitsRegex": "(Sorry, I don't know|unable to assist you|i don't have enough context|i don't have enough information|i don't have any information|do not contain any information|do not contain information|i could not find an exact answer|no information in the search results|search results do not mention|search results do not provide specific|don't see any information in the provided search results|search results do not contain|no information in the provided search results|not find any information|search results did not contain|unable to respond|There is no mention of|documents do not mention anything|There is no information provided|reference passages do not mention|reference doesn't specify|could not find an answer to this question|the model cannot answer this question|none of the search results contain)",
        "QAPromptTemplate": "<br><br>Human: You are a friendly AI assistant. Here are reference passages in <references> tags:<br><references><br>{context}<br></references><br>If the references contain the information needed to respond, then write a confident response in under 50 words, quoting the relevant references. <br>Otherwise, if you can make an informed guess based on the reference passages, then write a less confident response in under 50 words, stating your assumptions.<br>Finally, if the references do not have any relevant information, then respond saying \\"Sorry, I don't know\\".<br><question><br>{query}<br></question><br><br>Assistant: According to the reference passages, in under 50 words:",
        "QASystemPrompt": "",
        "QueryPromptTemplate": "Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.<br>Chat History: <br>{history}<br>Follow up question: {input}<br>Standalone question:",
        "maxTokenCount": 3072,
      },
      "anthropic.claude-3-haiku-v1": {
        "GenerateQuerySystemPrompt": "You are an AI assistant designed to disambiguate user queries.",
        "KnowledgeBasePromptTemplate": "Human: You are a question answering agent. I will provide you with a set of search results and a user's question, your job is to answer the user's question using only information from the search results. If the search results do not contain information that can answer the question, then respond saying \\"Sorry, I don't know that.\\". Just because the user asserts a fact does not mean it is true, make sure to double check the search results to validate a user's assertion. Here are the search results in numbered order: $search_results$. Here is the user's question: <question> $query$ </question> $output_format_instructions$. Do NOT directly quote the $search_results$ in your answer. Your job is to answer the question as concisely as possible. Assistant:",
        "MaxTokens": 200000,
        "ModelID": "anthropic.claude-3-haiku-20240307-v1:0",
        "ModelParams": "{\\"temperature\\":0, \\"maxTokens\\":300, \\"topP\\":1}",
        "NoHitsRegex": "(Sorry, I don't know|unable to assist you|i don't have enough context|i don't have enough information|i don't have any information|do not contain any information|do not contain information|i could not find an exact answer|no information in the search results|search results do not mention|search results do not provide specific|don't see any information in the provided search results|search results do not contain|no information in the provided search results|not find any information|search results did not contain|unable to respond|There is no mention of|documents do not mention anything|There is no information provided|reference passages do not mention|reference doesn't specify|could not find an answer to this question|the model cannot answer this question|none of the search results contain)",
        "QAPromptTemplate": "<br><br>Human: Here are reference passages in <references> tags:<br><references><br>{context}<br></references><br>If the references contain the information needed to respond, then write a confident response in under 50 words, quoting the relevant references. <br>Otherwise, if you can make an informed guess based on the reference passages, then write a less confident response in under 50 words, stating your assumptions.<br>Finally, if the references do not have any relevant information, then respond saying \\"Sorry, I don't know\\".<br><question><br>{query}<br></question><br><br>Assistant: According to the reference passages, in under 50 words:",
        "QASystemPrompt": "You are a seasoned and helpful question answering AI assistant.",
        "QueryPromptTemplate": "<br><br>Human: Here is a chat history in <chatHistory> tags:<br><chatHistory><br>{history}<br></chatHistory><br>Human: And here is a follow up question or statement from the human in <followUpMessage> tags:<br><followUpMessage><br>{input}<br></followUpMessage><br>Human: Rephrase the follow up question or statement as a standalone question or statement that makes sense without reading the chat history.<br><br>Assistant: Here is the rephrased follow up question or statement:",
      },
      "anthropic.claude-3-sonnet-v1": {
        "GenerateQuerySystemPrompt": "You are an AI assistant designed to disambiguate user queries.",
        "KnowledgeBasePromptTemplate": "Human: You are a question answering agent. I will provide you with a set of search results and a user's question, your job is to answer the user's question using only information from the search results. If the search results do not contain information that can answer the question, then respond saying \\"Sorry, I don't know that.\\". Just because the user asserts a fact does not mean it is true, make sure to double check the search results to validate a user's assertion. Here are the search results in numbered order: $search_results$. Here is the user's question: <question> $query$ </question> $output_format_instructions$. Do NOT directly quote the $search_results$ in your answer. Your job is to answer the question as concisely as possible. Assistant:",
        "MaxTokens": 200000,
        "ModelID": "anthropic.claude-3-sonnet-20240229-v1:0",
        "ModelParams": "{\\"temperature\\":0, \\"maxTokens\\":300, \\"topP\\":1}",
        "NoHitsRegex": "(Sorry, I don't know|unable to assist you|i don't have enough context|i don't have enough information|i don't have any information|do not contain any information|do not contain information|i could not find an exact answer|no information in the search results|search results do not mention|search results do not provide specific|don't see any information in the provided search results|search results do not contain|no information in the provided search results|not find any information|search results did not contain|unable to respond|There is no mention of|documents do not mention anything|There is no information provided|reference passages do not mention|reference doesn't specify|could not find an answer to this question|the model cannot answer this question|none of the search results contain)",
        "QAPromptTemplate": "<br><br>Human: Here are reference passages in <references> tags:<br><references><br>{context}<br></references><br>If the references contain the information needed to respond, then write a confident response in under 50 words, quoting the relevant references. <br>Otherwise, if you can make an informed guess based on the reference passages, then write a less confident response in under 50 words, stating your assumptions.<br>Finally, if the references do not have any relevant information, then respond saying \\"Sorry, I don't know\\".<br><question><br>{query}<br></question><br><br>Assistant: According to the reference passages, in under 50 words:",
        "QASystemPrompt": "You are a seasoned and helpful question answering AI assistant.",
        "QueryPromptTemplate": "<br><br>Human: Here is a chat history in <chatHistory> tags:<br><chatHistory><br>{history}<br></chatHistory><br>Human: And here is a follow up question or statement from the human in <followUpMessage> tags:<br><followUpMessage><br>{input}<br></followUpMessage><br>Human: Rephrase the follow up question or statement as a standalone question or statement that makes sense without reading the chat history.<br><br>Assistant: Here is the rephrased follow up question or statement:",
      },
      "anthropic.claude-3.5-haiku-v1": {
        "GenerateQuerySystemPrompt": "You are an AI assistant designed to disambiguate user queries.",
        "KnowledgeBasePromptTemplate": "Human: You are a question answering agent. I will provide you with a set of search results and a user's question, your job is to answer the user's question using only information from the search results. If the search results do not contain information that can answer the question, then respond saying \\"Sorry, I don't know that.\\". Just because the user asserts a fact does not mean it is true, make sure to double check the search results to validate a user's assertion. Here are the search results in numbered order: $search_results$. Here is the user's question: <question> $query$ </question> $output_format_instructions$. Do NOT directly quote the $search_results$ in your answer. Your job is to answer the question as concisely as possible. Assistant:",
        "MaxTokens": 200000,
        "ModelID": "anthropic.claude-3-5-haiku-20241022-v1:0",
        "ModelParams": "{\\"temperature\\":0, \\"maxTokens\\":300, \\"topP\\":1}",
        "NoHitsRegex": "(Sorry, I don't know|unable to assist you|i don't have enough context|i don't have enough information|i don't have any information|do not contain any information|do not contain information|i could not find an exact answer|no information in the search results|search results do not mention|search results do not provide specific|don't see any information in the provided search results|search results do not contain|no information in the provided search results|not find any information|search results did not contain|unable to respond|There is no mention of|documents do not mention anything|There is no information provided|reference passages do not mention|reference doesn't specify|could not find an answer to this question|the model cannot answer this question|none of the search results contain)",
        "QAPromptTemplate": "<br><br>Human: Here are reference passages in <references> tags:<br><references><br>{context}<br></references><br>If the references contain the information needed to respond, then write a confident response in under 50 words, quoting the relevant references. <br>Otherwise, if you can make an informed guess based on the reference passages, then write a less confident response in under 50 words, stating your assumptions.<br>Finally, if the references do not have any relevant information, then respond saying \\"Sorry, I don't know\\".<br><question><br>{query}<br></question><br><br>Assistant: According to the reference passages, in under 50 words:",
        "QASystemPrompt": "You are a seasoned and helpful question answering AI assistant.",
        "QueryPromptTemplate": "<br><br>Human: Here is a chat history in <chatHistory> tags:<br><chatHistory><br>{history}<br></chatHistory><br>Human: And here is a follow up question or statement from the human in <followUpMessage> tags:<br><followUpMessage><br>{input}<br></followUpMessage><br>Human: Rephrase the follow up question or statement as a standalone question or statement that makes sense without reading the chat history.<br><br>Assistant: Here is the rephrased follow up question or statement:",
      },
      "anthropic.claude-3.5-sonnet-v1": {
        "GenerateQuerySystemPrompt": "You are an AI assistant designed to disambiguate user queries.",
        "KnowledgeBasePromptTemplate": "Human: You are a question answering agent. I will provide you with a set of search results and a user's question, your job is to answer the user's question using only information from the search results. If the search results do not contain information that can answer the question, then respond saying \\"Sorry, I don't know that.\\". Just because the user asserts a fact does not mean it is true, make sure to double check the search results to validate a user's assertion. Here are the search results in numbered order: $search_results$. Here is the user's question: <question> $query$ </question> $output_format_instructions$. Do NOT directly quote the $search_results$ in your answer. Your job is to answer the question as concisely as possible. Assistant:",
        "MaxTokens": 200000,
        "ModelID": "anthropic.claude-3-5-sonnet-20240620-v1:0",
        "ModelParams": "{\\"temperature\\":0, \\"maxTokens\\":300, \\"topP\\":1}",
        "NoHitsRegex": "(Sorry, I don't know|unable to assist you|i don't have enough context|i don't have enough information|i don't have any information|do not contain any information|do not contain information|i could not find an exact answer|no information in the search results|search results do not mention|search results do not provide specific|don't see any information in the provided search results|search results do not contain|no information in the provided search results|not find any information|search results did not contain|unable to respond|There is no mention of|documents do not mention anything|There is no information provided|reference passages do not mention|reference doesn't specify|could not find an answer to this question|the model cannot answer this question|none of the search results contain)",
        "QAPromptTemplate": "<br><br>Human: Here are reference passages in <references> tags:<br><references><br>{context}<br></references><br>If the references contain the information needed to respond, then write a confident response in under 50 words, quoting the relevant references. <br>Otherwise, if you can make an informed guess based on the reference passages, then write a less confident response in under 50 words, stating your assumptions.<br>Finally, if the references do not have any relevant information, then respond saying \\"Sorry, I don't know\\".<br><question><br>{query}<br></question><br><br>Assistant: According to the reference passages, in under 50 words:",
        "QASystemPrompt": "You are a seasoned and helpful question answering AI assistant.",
        "QueryPromptTemplate": "<br><br>Human: Here is a chat history in <chatHistory> tags:<br><chatHistory><br>{history}<br></chatHistory><br>Human: And here is a follow up question or statement from the human in <followUpMessage> tags:<br><followUpMessage><br>{input}<br></followUpMessage><br>Human: Rephrase the follow up question or statement as a standalone question or statement that makes sense without reading the chat history.<br><br>Assistant: Here is the rephrased follow up question or statement:",
      },
      "anthropic.claude-3.5-sonnet-v2": {
        "GenerateQuerySystemPrompt": "You are an AI assistant designed to disambiguate user queries.",
        "KnowledgeBasePromptTemplate": "Human: You are a question answering agent. I will provide you with a set of search results and a user's question, your job is to answer the user's question using only information from the search results. If the search results do not contain information that can answer the question, then respond saying \\"Sorry, I don't know that.\\". Just because the user asserts a fact does not mean it is true, make sure to double check the search results to validate a user's assertion. Here are the search results in numbered order: $search_results$. Here is the user's question: <question> $query$ </question> $output_format_instructions$. Do NOT directly quote the $search_results$ in your answer. Your job is to answer the question as concisely as possible. Assistant:",
        "MaxTokens": 200000,
        "ModelID": "anthropic.claude-3-5-sonnet-20241022-v2:0",
        "ModelParams": "{\\"temperature\\":0, \\"maxTokens\\":300, \\"topP\\":1}",
        "NoHitsRegex": "(Sorry, I don't know|unable to assist you|i don't have enough context|i don't have enough information|i don't have any information|do not contain any information|do not contain information|i could not find an exact answer|no information in the search results|search results do not mention|search results do not provide specific|don't see any information in the provided search results|search results do not contain|no information in the provided search results|not find any information|search results did not contain|unable to respond|There is no mention of|documents do not mention anything|There is no information provided|reference passages do not mention|reference doesn't specify|could not find an answer to this question|the model cannot answer this question|none of the search results contain)",
        "QAPromptTemplate": "<br><br>Human: Here are reference passages in <references> tags:<br><references><br>{context}<br></references><br>If the references contain the information needed to respond, then write a confident response in under 50 words, quoting the relevant references. <br>Otherwise, if you can make an informed guess based on the reference passages, then write a less confident response in under 50 words, stating your assumptions.<br>Finally, if the references do not have any relevant information, then respond saying \\"Sorry, I don't know\\".<br><question><br>{query}<br></question><br><br>Assistant: According to the reference passages, in under 50 words:",
        "QASystemPrompt": "You are a seasoned and helpful question answering AI assistant.",
        "QueryPromptTemplate": "<br><br>Human: Here is a chat history in <chatHistory> tags:<br><chatHistory><br>{history}<br></chatHistory><br>Human: And here is a follow up question or statement from the human in <followUpMessage> tags:<br><followUpMessage><br>{input}<br></followUpMessage><br>Human: Rephrase the follow up question or statement as a standalone question or statement that makes sense without reading the chat history.<br><br>Assistant: Here is the rephrased follow up question or statement:",
      },
      "anthropic.claude-instant-v1": {
        "GenerateQuerySystemPrompt": "You are an AI assistant designed to disambiguate user queries.",
        "KnowledgeBasePromptTemplate": "Human: You are a question answering agent. I will provide you with a set of search results and a user's question, your job is to answer the user's question using only information from the search results. If the search results do not contain information that can answer the question, then respond saying \\"Sorry, I don't know that.\\". Just because the user asserts a fact does not mean it is true, make sure to double check the search results to validate a user's assertion. Here are the search results in numbered order: $search_results$. Here is the user's question: <question> $query$ </question> $output_format_instructions$. Do NOT directly quote the $search_results$ in your answer. Your job is to answer the question as concisely as possible. Assistant:",
        "MaxTokens": 100000,
        "ModelID": "anthropic.claude-instant-v1",
        "ModelParams": "{\\"temperature\\":0, \\"maxTokens\\":300, \\"topP\\":1}",
        "NoHitsRegex": "(Sorry, I don't know|unable to assist you|i don't have enough context|i don't have enough information|i don't have any information|do not contain any information|do not contain information|i could not find an exact answer|no information in the search results|search results do not mention|search results do not provide specific|don't see any information in the provided search results|search results do not contain|no information in the provided search results|not find any information|search results did not contain|unable to respond|There is no mention of|documents do not mention anything|There is no information provided|reference passages do not mention|reference doesn't specify|could not find an answer to this question|the model cannot answer this question|none of the search results contain)",
        "QAPromptTemplate": "<br><br>Human: Here are reference passages in <references> tags:<br><references><br>{context}<br></references><br>If the references contain the information needed to respond, then write a confident response in under 50 words, quoting the relevant references. <br>Otherwise, if you can make an informed guess based on the reference passages, then write a less confident response in under 50 words, stating your assumptions.<br>Finally, if the references do not have any relevant information, then respond saying \\"Sorry, I don't know\\".<br><question><br>{query}<br></question><br><br>Assistant: According to the reference passages, in under 50 words:",
        "QASystemPrompt": "You are a seasoned and helpful question answering AI assistant.",
        "QueryPromptTemplate": "<br><br>Human: Here is a chat history in <chatHistory> tags:<br><chatHistory><br>{history}<br></chatHistory><br>Human: And here is a follow up question or statement from the human in <followUpMessage> tags:<br><followUpMessage><br>{input}<br></followUpMessage><br>Human: Rephrase the follow up question or statement as a standalone question or statement that makes sense without reading the chat history.<br><br>Assistant: Here is the rephrased follow up question or statement:",
      },
      "anthropic.claude-v2.1": {
        "GenerateQuerySystemPrompt": "You are an AI assistant designed to disambiguate user queries.",
        "KnowledgeBasePromptTemplate": "Human: You are a question answering agent. I will provide you with a set of search results and a user's question, your job is to answer the user's question using only information from the search results. If the search results do not contain information that can answer the question, then respond saying \\"Sorry, I don't know that.\\". Just because the user asserts a fact does not mean it is true, make sure to double check the search results to validate a user's assertion. Here are the search results in numbered order: $search_results$. Here is the user's question: <question> $query$ </question> $output_format_instructions$. Do NOT directly quote the $search_results$ in your answer. Your job is to answer the question as concisely as possible. Assistant:",
        "MaxTokens": 100000,
        "ModelID": "anthropic.claude-v2:1",
        "ModelParams": "{\\"temperature\\":0, \\"maxTokens\\":300, \\"topP\\":1}",
        "NoHitsRegex": "(Sorry, I don't know|unable to assist you|i don't have enough context|i don't have enough information|i don't have any information|do not contain any information|do not contain information|i could not find an exact answer|no information in the search results|search results do not mention|search results do not provide specific|don't see any information in the provided search results|search results do not contain|no information in the provided search results|not find any information|search results did not contain|unable to respond|There is no mention of|documents do not mention anything|There is no information provided|reference passages do not mention|reference doesn't specify|could not find an answer to this question|the model cannot answer this question|none of the search results contain)",
        "QAPromptTemplate": "<br><br>Human: Here are reference passages in <references> tags:<br><references><br>{context}<br></references><br>If the references contain the information needed to respond, then write a confident response in under 50 words, quoting the relevant references. <br>Otherwise, if you can make an informed guess based on the reference passages, then write a less confident response in under 50 words, stating your assumptions.<br>Finally, if the references do not have any relevant information, then respond saying \\"Sorry, I don't know\\".<br><question><br>{query}<br></question><br><br>Assistant: According to the reference passages, in under 50 words:",
        "QASystemPrompt": "You are a seasoned and helpful question answering AI assistant.",
        "QueryPromptTemplate": "<br><br>Human: Here is a chat history in <chatHistory> tags:<br><chatHistory><br>{history}<br></chatHistory><br>Human: And here is a follow up question or statement from the human in <followUpMessage> tags:<br><followUpMessage><br>{input}<br></followUpMessage><br>Human: Rephrase the follow up question or statement as a standalone question or statement that makes sense without reading the chat history.<br><br>Assistant: Here is the rephrased follow up question or statement:",
      },
      "cohere.command-r-plus-v1": {
        "GenerateQuerySystemPrompt": "You are an AI assistant designed to disambiguate user queries.",
        "KnowledgeBasePromptTemplate": "You are a question answering agent. I will provide you with a set of search results. The user will provide you with a question. Your job is to answer the user's question using only information from the search results. If the search results do not contain information that can answer the question, please state \\"Sorry, I don't know that.\\". Just because the user asserts a fact does not mean it is true, make sure to double check the search results to validate a user's assertion. Here are the search results in numbered order: $search_results$ $output_format_instructions$ - DO NOT USE INFORMATION THAT IS NOT IN SEARCH RESULTS!",
        "MaxTokens": 128000,
        "ModelID": "cohere.command-r-plus-v1:0",
        "ModelParams": "{\\"temperature\\":0, \\"maxTokens\\":300, \\"topP\\":1}",
        "NoHitsRegex": "(Sorry, I don't know|unable to assist you|i don't have enough context|i don't have enough information|i don't have any information|do not contain any information|do not contain information|i could not find an exact answer|no information in the search results|search results do not mention|search results do not provide specific|don't see any information in the provided search results|search results do not contain|no information in the provided search results|not find any information|search results did not contain|unable to respond|There is no mention of|documents do not mention anything|There is no information provided|reference passages do not mention|reference doesn't specify|could not find an answer to this question|the model cannot answer this question|none of the search results contain)",
        "QAPromptTemplate": "<br><br>Human: Here are reference passages in <references> tags:<br><references><br>{context}<br></references><br>If the references contain the information needed to respond, then write a confident response in under 50 words, quoting the relevant references. <br>Otherwise, if you can make an informed guess based on the reference passages, then write a less confident response in under 50 words, stating your assumptions.<br>Finally, if the references do not have any relevant information, then respond saying \\"Sorry, I don't know\\".<br><question><br>{query}<br></question><br><br>Assistant: According to the reference passages, in under 50 words:",
        "QASystemPrompt": "You are a seasoned and helpful question answering AI assistant.",
        "QueryPromptTemplate": "Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.<br>Chat History: <br>{history}<br>Follow up question: {input}<br>Standalone question:",
      },
      "cohere.embed-english-v3": {
        "EmbeddingsDimensions": 1024,
        "MaxTokens": 512,
        "ModelID": "cohere.embed-english-v3",
      },
      "cohere.embed-multilingual-v3": {
        "EmbeddingsDimensions": 1024,
        "MaxTokens": 512,
        "ModelID": "cohere.embed-multilingual-v3",
      },
      "meta.llama3-8b-instruct-v1": {
        "GenerateQuerySystemPrompt": "You are an AI assistant designed to disambiguate user queries.",
        "MaxTokens": 8000,
        "ModelID": "meta.llama3-8b-instruct-v1:0",
        "ModelParams": "{\\"temperature\\":0, \\"maxTokens\\":300, \\"topP\\":1}",
        "NoHitsRegex": "(Sorry, I don't know|unable to assist you|i don't have enough context|i don't have enough information|i don't have any information|do not contain any information|do not contain information|i could not find an exact answer|no information in the search results|search results do not mention|search results do not provide specific|don't see any information in the provided search results|search results do not contain|no information in the provided search results|not find any information|search results did not contain|unable to respond|There is no mention of|documents do not mention anything|There is no information provided|reference passages do not mention|reference doesn't specify|could not find an answer to this question|the model cannot answer this question|none of the search results contain)",
        "QAPromptTemplate": "<br><br>Human: Here are reference passages in <references> tags:<br><references><br>{context}<br></references><br>If the references contain the information needed to respond, then write a confident response in under 50 words, quoting the relevant references. <br>Otherwise, if you can make an informed guess based on the reference passages, then write a less confident response in under 50 words, stating your assumptions.<br>Finally, if the references do not have any relevant information, then respond saying \\"Sorry, I don't know\\".<br><question><br>{query}<br></question><br><br>Assistant: According to the reference passages, in under 50 words:",
        "QASystemPrompt": "You are a seasoned and helpful question answering AI assistant.",
        "QueryPromptTemplate": "Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.<br>Chat History: <br>{history}<br>Follow up question: {input}<br>Standalone question:",
      },
      "meta.llama3.1-405b-instruct-v1": {
        "GenerateQuerySystemPrompt": "You are an AI assistant designed to disambiguate user queries.",
        "KnowledgeBasePromptTemplate": "You are a question answering agent. I will provide you with a set of search results. The user will provide you with a question. Your job is to answer the user's question using only information from the search results. If the search results do not contain information that can answer the question, please state \\"Sorry, I don't know that.\\". Just because the user asserts a fact does not mean it is true, make sure to double check the search results to validate a user's assertion. Here are the search results in numbered order: $search_results$ $output_format_instructions$ - DO NOT USE INFORMATION THAT IS NOT IN SEARCH RESULTS!",
        "MaxTokens": 128000,
        "ModelID": "meta.llama3-1-405b-instruct-v1:0",
        "ModelParams": "{\\"temperature\\":0, \\"maxTokens\\":300, \\"topP\\":1}",
        "NoHitsRegex": "(Sorry, I don't know|unable to assist you|i don't have enough context|i don't have enough information|i don't have any information|do not contain any information|do not contain information|i could not find an exact answer|no information in the search results|search results do not mention|search results do not provide specific|don't see any information in the provided search results|search results do not contain|no information in the provided search results|not find any information|search results did not contain|unable to respond|There is no mention of|documents do not mention anything|There is no information provided|reference passages do not mention|reference doesn't specify|could not find an answer to this question|the model cannot answer this question|none of the search results contain)",
        "QAPromptTemplate": "<br><br>Human: Here are reference passages in <references> tags:<br><references><br>{context}<br></references><br>If the references contain the information needed to respond, then write a confident response in under 50 words, quoting the relevant references. <br>Otherwise, if you can make an informed guess based on the reference passages, then write a less confident response in under 50 words, stating your assumptions.<br>Finally, if the references do not have any relevant information, then respond saying \\"Sorry, I don't know\\".<br><question><br>{query}<br></question><br><br>Assistant: According to the reference passages, in under 50 words:",
        "QASystemPrompt": "You are a seasoned and helpful question answering AI assistant.",
        "QueryPromptTemplate": "Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.<br>Chat History: <br>{history}<br>Follow up question: {input}<br>Standalone question:",
      },
      "mistral.mistral-large-2407-v1": {
        "GenerateQuerySystemPrompt": "You are an AI assistant designed to disambiguate user queries.",
        "KnowledgeBasePromptTemplate": "Human: You are a question answering agent. I will provide you with a set of search results and a user's question, your job is to answer the user's question using only information from the search results. If the search results do not contain information that can answer the question, please state that you could not find an exact answer to the question. Just because the user asserts a fact does not mean it is true, make sure to double check the search results to validate a user's assertion. Here are the search results in numbered order: $search_results$ Here is the user's question: <question> $query$ </question> $output_format_instructions$ - DO NOT USE INFORMATION THAT IS NOT IN SEARCH RESULTS! Assistant:",
        "MaxTokens": 128000,
        "ModelID": "mistral.mistral-large-2407-v1:0",
        "ModelParams": "{\\"temperature\\":0, \\"maxTokens\\":300, \\"topP\\":1}",
        "NoHitsRegex": "(Sorry, I don't know|unable to assist you|i don't have enough context|i don't have enough information|i don't have any information|do not contain any information|do not contain information|i could not find an exact answer|no information in the search results|search results do not mention|search results do not provide specific|don't see any information in the provided search results|search results do not contain|no information in the provided search results|not find any information|search results did not contain|unable to respond|There is no mention of|documents do not mention anything|There is no information provided|reference passages do not mention|reference doesn't specify|could not find an answer to this question|the model cannot answer this question|none of the search results contain)",
        "QAPromptTemplate": "<br><br>Human: Here are reference passages in <references> tags:<br><references><br>{context}<br></references><br>If the references contain the information needed to respond, then write a confident response in under 50 words, quoting the relevant references. <br>Otherwise, if you can make an informed guess based on the reference passages, then write a less confident response in under 50 words, stating your assumptions.<br>Finally, if the references do not have any relevant information, then respond saying \\"Sorry, I don't know\\".<br><question><br>{query}<br></question><br><br>Assistant: According to the reference passages, in under 50 words:",
        "QASystemPrompt": "You are a seasoned and helpful question answering AI assistant.",
        "QueryPromptTemplate": "Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.<br>Chat History: <br>{history}<br>Follow up question: {input}<br>Standalone question:",
      },
    },
    "Solution": {
      "Data": {
        "AppRegistryApplicationName": "qnabot",
        "ApplicationType": "AWS-Solutions",
        "ID": "SO0189",
        "SolutionName": "QnABot on AWS",
        "Version": "x.x.x",
      },
    },
    "SolutionHelperAnonymizedData": {
      "SendAnonymizedData": {
        "Data": "Yes",
      },
    },
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Step 2A: Set Basic Chatbot Parameters (required)",
          },
          "Parameters": [
            "Email",
            "Username",
            "PublicOrPrivate",
            "Language",
            "OpenSearchName",
            "OpenSearchInstanceType",
            "OpenSearchNodeCount",
            "OpenSearchEBSVolumeSize",
            "OpenSearchDashboardsRetentionMinutes",
            "OpenSearchFineGrainAccessControl",
            "LexV2BotLocaleIds",
            "InstallLexResponseBots",
            "FulfillmentConcurrency",
            "XraySetting",
          ],
        },
        {
          "Label": {
            "default": "Step 2B: Set VPC parameters to deploy QnABot in an existing VPC (optional)",
          },
          "Parameters": [
            "VPCSubnetIdList",
            "VPCSecurityGroupIdList",
          ],
        },
        {
          "Label": {
            "default": "Step 2C: Enable LLM for Semantic Search with Embeddings (optional)",
          },
          "Parameters": [
            "EmbeddingsApi",
            "EmbeddingsBedrockModelId",
            "EmbeddingsLambdaArn",
            "EmbeddingsLambdaDimensions",
          ],
        },
        {
          "Label": {
            "default": "Step 2D: Enable LLM Retrieval and generative text question answering to use with Fallback Option (optional)",
          },
          "Parameters": [
            "LLMApi",
            "LLMBedrockModelId",
            "LLMLambdaArn",
            "EnableStreaming",
          ],
        },
        {
          "Label": {
            "default": "Step 2E: Select Data Sources as Fallback Option (optional)",
          },
          "Parameters": [
            "KendraWebPageIndexId",
            "KendraFaqIndexId",
            "AltSearchKendraIndexes",
            "AltSearchKendraIndexAuth",
            "BedrockKnowledgeBaseId",
            "BedrockKnowledgeBaseModel",
          ],
        },
        {
          "Label": {
            "default": "Step 2F: Set miscellaneous settings (optional)",
          },
          "Parameters": [
            "AdminUserSignUp",
            "ApprovedDomain",
            "BootstrapBucket",
            "BootstrapPrefix",
            "BuildExamples",
            "LogRetentionPeriod",
          ],
        },
      ],
    },
  },
  "Outputs": {
    "ApiEndpoint": {
      "Value": {
        "Fn::GetAtt": [
          "ApiUrl",
          "Name",
        ],
      },
    },
    "ApiId": {
      "Value": {
        "Ref": "API",
      },
    },
    "Bucket": {
      "Value": {
        "Ref": "Bucket",
      },
    },
    "CFNESProxyLambda": {
      "Value": {
        "Fn::GetAtt": [
          "ESCFNProxyLambda",
          "Arn",
        ],
      },
    },
    "ClientClientId": {
      "Value": {
        "Ref": "ClientClient",
      },
    },
    "ClientURL": {
      "Value": {
        "Fn::If": [
          "Public",
          {
            "Fn::GetAtt": [
              "Urls",
              "Client",
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::GetAtt": [
                    "ApiUrl",
                    "Name",
                  ],
                },
                "/pages/client",
              ],
            ],
          },
        ],
      },
    },
    "CloudWatchDashboardURL": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://console.aws.amazon.com/cloudwatch/home?",
            "region=",
            {
              "Ref": "AWS::Region",
            },
            "#dashboards:name=",
            {
              "Ref": "dashboard",
            },
          ],
        ],
      },
    },
    "CognitoEndpoint": {
      "Value": {
        "Fn::GetAtt": [
          "DesignerLogin",
          "Domain",
        ],
      },
    },
    "ContentDesignerOutputBucket": {
      "Value": {
        "Ref": "ContentDesignerOutputBucket",
      },
    },
    "ContentDesignerURL": {
      "Value": {
        "Fn::Join": [
          "",
          [
            {
              "Fn::GetAtt": [
                "ApiUrl",
                "Name",
              ],
            },
            "/pages/designer",
          ],
        ],
      },
    },
    "DefaultUserPoolJwksUrlParameterName": {
      "Value": {
        "Ref": "DefaultUserPoolJwksUrl",
      },
    },
    "DesignerClientId": {
      "Value": {
        "Ref": "ClientDesigner",
      },
    },
    "ESProxyLambda": {
      "Value": {
        "Fn::GetAtt": [
          "ESProxyLambda",
          "Arn",
        ],
      },
    },
    "FeedbackSNSTopic": {
      "Condition": "BuildExamples",
      "Value": {
        "Fn::GetAtt": [
          "ExamplesStack",
          "Outputs.FeedbackSNSTopic",
        ],
      },
    },
    "IdPool": {
      "Value": {
        "Ref": "IdPool",
      },
    },
    "ImportBucket": {
      "Value": {
        "Ref": "ImportBucket",
      },
    },
    "LexV2BotAlias": {
      "Value": {
        "Fn::GetAtt": [
          "LexV2Bot",
          "botAlias",
        ],
      },
    },
    "LexV2BotAliasId": {
      "Value": {
        "Fn::GetAtt": [
          "LexV2Bot",
          "botAliasId",
        ],
      },
    },
    "LexV2BotId": {
      "Value": {
        "Fn::GetAtt": [
          "LexV2Bot",
          "botId",
        ],
      },
    },
    "LexV2BotLocaleIds": {
      "Value": {
        "Fn::GetAtt": [
          "LexV2Bot",
          "botLocaleIds",
        ],
      },
    },
    "LexV2BotName": {
      "Value": {
        "Fn::GetAtt": [
          "LexV2Bot",
          "botName",
        ],
      },
    },
    "LexV2Intent": {
      "Value": {
        "Fn::GetAtt": [
          "LexV2Bot",
          "botIntent",
        ],
      },
    },
    "LexV2IntentFallback": {
      "Value": {
        "Fn::GetAtt": [
          "LexV2Bot",
          "botIntentFallback",
        ],
      },
    },
    "MetricsBucket": {
      "Value": {
        "Ref": "MetricsBucket",
      },
    },
    "OpenSearchDomainEndpoint": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "ESVar",
                "ESAddress",
              ],
            },
          ],
        ],
      },
    },
    "OpenSearchIndex": {
      "Value": {
        "Fn::GetAtt": [
          "Var",
          "index",
        ],
      },
    },
    "OpenSearchQnAType": {
      "Value": {
        "Fn::GetAtt": [
          "Var",
          "QnAType",
        ],
      },
    },
    "OpenSearchQuizType": {
      "Value": {
        "Fn::GetAtt": [
          "Var",
          "QuizType",
        ],
      },
    },
    "SettingsTable": {
      "Value": {
        "Ref": "SettingsTable",
      },
    },
    "StreamingWebSocketEndpoint": {
      "Condition": "StreamingEnabled",
      "Value": {
        "Fn::GetAtt": [
          "StreamingStack",
          "Outputs.StreamingWebSocketEndpoint",
        ],
      },
    },
    "TestAllBucket": {
      "Value": {
        "Ref": "TestAllBucket",
      },
    },
    "UserPool": {
      "Value": {
        "Ref": "UserPool",
      },
    },
    "UserPoolURL": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://console.aws.amazon.com/cognito/users/",
            "?region=",
            {
              "Ref": "AWS::Region",
            },
            "#/pool/",
            {
              "Ref": "UserPool",
            },
            "/details",
          ],
        ],
      },
    },
    "UserRole": {
      "Value": {
        "Ref": "UserRole",
      },
    },
    "UsersTable": {
      "Value": {
        "Ref": "UsersTable",
      },
    },
  },
  "Parameters": {
    "AdminUserSignUp": {
      "AllowedValues": [
        "FALSE",
        "TRUE",
      ],
      "ConstraintDescription": "Allowed Values are FALSE or TRUE",
      "Default": "TRUE",
      "Description": "Set to TRUE if only the administrator is allowed to create user profiles in Amazon Cognito",
      "Type": "String",
    },
    "AltSearchKendraIndexAuth": {
      "AllowedValues": [
        "true",
        "false",
      ],
      "Default": "false",
      "Description": "Set to true if using Kendra Index(es) with access control enabled. This tells QnABot to pass an authentication token to Kendra Index(es) used for Kendra fallback if it is available.",
      "Type": "String",
    },
    "AltSearchKendraIndexes": {
      "AllowedPattern": "[^ ]*",
      "ConstraintDescription": "Must be a list of valid Amazon Kendra index id(s) or left blank",
      "Default": "",
      "Description": "Optional: A comma separated String value specifying ids of one or more Amazon Kendra indexes to be used for Kendra fallback",
      "Type": "String",
    },
    "ApprovedDomain": {
      "AllowedPattern": "(.+\\..+)*|(NONE)|(EMPTY)",
      "ConstraintDescription": "Must be a valid domain name eg. example.com",
      "Default": "",
      "Description": "If QnABot is private, restrict user sign up to users whos email domain matches this domain. eg. amazon.com",
      "Type": "String",
    },
    "BedrockKnowledgeBaseId": {
      "AllowedPattern": "[0-9A-Z]{10}|^$",
      "ConstraintDescription": "Must be a valid Bedrock knowledge base id or leave blank",
      "Default": "",
      "Description": "Optional: ID of an existing Bedrock knowledge base. This setting enables the use of Bedrock knowledge bases as a fallback mechanism when a match is not found in OpenSearch.",
      "Type": "String",
    },
    "BedrockKnowledgeBaseModel": {
      "AllowedValues": [
        "amazon.nova-micro-v1",
        "amazon.nova-lite-v1",
        "amazon.nova-pro-v1",
        "amazon.titan-text-premier-v1",
        "anthropic.claude-instant-v1",
        "anthropic.claude-v2.1",
        "anthropic.claude-3-haiku-v1",
        "anthropic.claude-3.5-haiku-v1",
        "anthropic.claude-3-sonnet-v1",
        "anthropic.claude-3.5-sonnet-v1",
        "anthropic.claude-3.5-sonnet-v2",
        "cohere.command-r-plus-v1",
        "meta.llama3.1-405b-instruct-v1",
        "mistral.mistral-large-2407-v1",
      ],
      "Default": "anthropic.claude-instant-v1",
      "Description": "Required if BedrockKnowledgeBaseId is not empty. Sets the preferred LLM model to use with the Bedrock knowledge base. Please ensure you have requested access to the LLMs in Bedrock console (https://docs.aws.amazon.com/bedrock/latest/userguide/model-access.html), before deploying",
      "Type": "String",
    },
    "BootstrapBucket": {
      "AllowedPattern": "[^ ]*",
      "ConstraintDescription": "Must be a valid S3 bucket name or left blank",
      "Description": "Name of the S3 bucket used in bootstrapping resources",
      "Type": "String",
    },
    "BootstrapPrefix": {
      "AllowedPattern": "[^ ]*",
      "ConstraintDescription": "Must be a valid S3 key prefix or left blank",
      "Description": "S3 key prefix to the bootstrapping resources",
      "Type": "String",
    },
    "BuildExamples": {
      "AllowedValues": [
        "TRUE",
        "FALSE",
      ],
      "Default": "TRUE",
      "Description": "Experimental (Development ONLY): Set to TRUE to deploy the QnABot Examples Stack. Note: Selecting FALSE will not the deploy the QnABot Examples Stack. This will limit also disable the feedback functionality and there will be no predefined examples questions set.",
      "Type": "String",
    },
    "Email": {
      "AllowedPattern": ".+\\@.+\\..+",
      "ConstraintDescription": "Must be valid email address eg. johndoe@example.com",
      "Description": "Email address for the admin user. This email address will receive a temporary password to access the QnABot on AWS content designer.",
      "Type": "String",
    },
    "EmbeddingsApi": {
      "AllowedValues": [
        "DISABLED",
        "BEDROCK",
        "LAMBDA",
      ],
      "Default": "DISABLED",
      "Description": "Enable QnABot semantics search using Embeddings from a pre-trained Large Language Model. To use a custom LAMBDA function, provide additional parameters below.",
      "Type": "String",
    },
    "EmbeddingsBedrockModelId": {
      "AllowedValues": [
        "amazon.titan-embed-text-v1",
        "amazon.titan-embed-text-v2",
        "cohere.embed-english-v3",
        "cohere.embed-multilingual-v3",
      ],
      "Default": "amazon.titan-embed-text-v1",
      "Description": "Required when EmbeddingsApi is BEDROCK. Please ensure you have requested access to the LLMs in Bedrock console (https://docs.aws.amazon.com/bedrock/latest/userguide/model-access.html), before deploying.",
      "Type": "String",
    },
    "EmbeddingsLambdaArn": {
      "AllowedPattern": "^(|arn:aws:lambda:.*)$",
      "ConstraintDescription": "Must be a valid Lambda ARN or leave blank",
      "Default": "",
      "Description": "Required when EmbeddingsApi is LAMBDA. Provide the ARN for a Lambda function that takes JSON {"inputtext":"string"}, and returns JSON {"embedding":[...]}",
      "Type": "String",
    },
    "EmbeddingsLambdaDimensions": {
      "Default": 1536,
      "Description": "Required when EmbeddingsApi is LAMBDA. Provide number of dimensions for embeddings returned by the EmbeddingsLambda function specified above.",
      "MinValue": 1,
      "Type": "Number",
    },
    "EnableStreaming": {
      "AllowedValues": [
        "TRUE",
        "FALSE",
      ],
      "Default": "FALSE",
      "Description": "Set to TRUE to deploy the streaming resources using for LLMs.",
      "Type": "String",
    },
    "FulfillmentConcurrency": {
      "Default": 0,
      "Description": "The amount of provisioned concurrency for the fulfillment Lambda function - see: https://docs.aws.amazon.com/lambda/latest/dg/configuration-concurrency.html",
      "MinValue": 0,
      "Type": "Number",
    },
    "InstallLexResponseBots": {
      "AllowedValues": [
        "true",
        "false",
      ],
      "Default": "true",
      "Description": "You can configure your chatbot to ask questions and process your end user's answers for surveys, quizzes,... (Elicit Response Feature). If the Elicit Response feature is not needed, choose 'false' to skip the sample Lex Response Bot installation - see https://docs.aws.amazon.com/solutions/latest/qnabot-on-aws/configuring-the-chatbot-to-ask-the-questions-and-use-response-bots.html",
      "Type": "String",
    },
    "KendraFaqIndexId": {
      "AllowedPattern": "[^ ]*",
      "ConstraintDescription": "Must be a valid Amazon Kendra index id or left blank",
      "Default": "",
      "Description": "Optional: Id of the Amazon Kendra Index to use for syncing OpenSearch questions and answers",
      "Type": "String",
    },
    "KendraWebPageIndexId": {
      "AllowedPattern": "[^ ]*",
      "ConstraintDescription": "Must be a valid Amazon Kendra index id or left blank",
      "Default": "",
      "Description": "Optional: Id of the Amazon Kendra index to use for the web crawler, a custom data source will automatically be added to the specified index. Also use this index id in AltSearchKendraIndexes to enable fallback.",
      "Type": "String",
    },
    "LLMApi": {
      "AllowedValues": [
        "DISABLED",
        "LAMBDA",
        "BEDROCK",
      ],
      "Default": "DISABLED",
      "Description": "Optionally enable QnABot on AWS question disambiguation and generative question answering using an LLM. Selecting the LAMBDA option allows for configuration with other LLMs.",
      "Type": "String",
    },
    "LLMBedrockModelId": {
      "AllowedValues": [
        "amazon.nova-micro-v1",
        "amazon.nova-lite-v1",
        "amazon.nova-pro-v1",
        "amazon.titan-text-express-v1",
        "amazon.titan-text-lite-v1",
        "amazon.titan-text-premier-v1",
        "ai21.jamba-instruct-v1",
        "anthropic.claude-instant-v1",
        "anthropic.claude-v2.1",
        "anthropic.claude-3-haiku-v1",
        "anthropic.claude-3.5-haiku-v1",
        "anthropic.claude-3-sonnet-v1",
        "anthropic.claude-3.5-sonnet-v1",
        "anthropic.claude-3.5-sonnet-v2",
        "cohere.command-r-plus-v1",
        "meta.llama3-8b-instruct-v1",
        "meta.llama3.1-405b-instruct-v1",
        "mistral.mistral-large-2407-v1",
      ],
      "Default": "anthropic.claude-instant-v1",
      "Description": "Required when LLMApi is BEDROCK. Please ensure you have requested access to the LLMs in Bedrock console (https://docs.aws.amazon.com/bedrock/latest/userguide/model-access.html), before deploying.",
      "Type": "String",
    },
    "LLMLambdaArn": {
      "AllowedPattern": "^(|arn:aws:lambda:.*)$",
      "ConstraintDescription": "Must be a valid Lambda ARN or leave blank",
      "Default": "",
      "Description": "Required if LLMApi is LAMBDA. Provide ARN for a Lambda function that takes JSON {"prompt":"string", "settings":{key:value,..}}, and returns JSON {"generated_text":"string"}",
      "Type": "String",
    },
    "Language": {
      "AllowedValues": [
        "Arabic",
        "Armenian",
        "Basque",
        "Bengali",
        "Brazilian",
        "Bulgarian",
        "Catalan",
        "Chinese",
        "Czech",
        "Danish",
        "Dutch",
        "English",
        "Estonian",
        "Finnish",
        "French",
        "Galician",
        "German",
        "Greek",
        "Hindi",
        "Hungarian",
        "Indonesian",
        "Irish",
        "Italian",
        "Latvian",
        "Lithuanian",
        "Norwegian",
        "Portuguese",
        "Romanian",
        "Russian",
        "Sorani",
        "Spanish",
        "Swedish",
        "Turkish",
        "Thai",
      ],
      "Default": "English",
      "Description": "Choose the primary Language for your QnABot deployment. Note: Picking non-English may correspond with limited functionalities",
      "Type": "String",
    },
    "LexV2BotLocaleIds": {
      "AllowedPattern": "[^ ]+",
      "ConstraintDescription": "Must be a valid comma separated list of Locale IDs",
      "Default": "en_US,es_US,fr_CA",
      "Description": "Languages for QnABot on AWS voice interaction using LexV2. Specify as a comma separated list of valid Locale IDs without empty spaces - see https://github.com/aws-solutions/qnabot-on-aws/blob/main/source/docs/multilanguage_support/README.md#supported-languages",
      "Type": "String",
    },
    "LogRetentionPeriod": {
      "AllowedValues": [
        0,
        1,
        3,
        5,
        7,
        14,
        30,
        60,
        90,
        120,
        150,
        180,
        365,
        400,
        545,
        731,
        1096,
        1827,
        2192,
        2557,
        2922,
        3288,
        3653,
      ],
      "Default": 0,
      "Description": "Optional: The number of days to keep logs before expiring. If you would like your logs to never expire, leave this value as 0.",
      "MinValue": 0,
      "Type": "Number",
    },
    "OpenSearchDashboardsRetentionMinutes": {
      "Default": 43200,
      "Description": "To conserve storage in Amazon OpenSearch, metrics and feedback data used to populate the OpenSearch dashboards are automatically deleted after this period (default 43200 minutes = 30 days). Monitor 'Free storage space' for your OpenSearch domain to ensure that you have sufficient space available to store data for the desired retention period.",
      "MinValue": 0,
      "Type": "Number",
    },
    "OpenSearchEBSVolumeSize": {
      "Default": 10,
      "Description": "Size in GB of each EBS volume attached to OpenSearch node instances - '10' is the minimum default volume size.",
      "MinValue": 10,
      "Type": "Number",
    },
    "OpenSearchFineGrainAccessControl": {
      "AllowedValues": [
        "FALSE",
        "TRUE",
      ],
      "ConstraintDescription": "Allowed Values are FALSE or TRUE",
      "Default": "TRUE",
      "Description": "Set to FALSE if Fine-grained access control does not need to be enabled by default. Once fine-grained access control is enabled, it cannot be disabled. Please note that it may take an additional 30-60 minutes for AWS OpenSearch Service to apply these settings to the OpenSearch domain after the stack has been deployed. (see https://docs.aws.amazon.com/opensearch-service/latest/developerguide/fgac.html for additional details).",
      "Type": "String",
    },
    "OpenSearchInstanceType": {
      "AllowedPattern": "^\\w+\\.\\w+\\.search$",
      "ConstraintDescription": "Must be a valid OpenSearch instance type",
      "Default": "m6g.large.search",
      "Description": "OpenSearch instance type to use for the domain. Default recommendation for production deployments is m6g.large.search (see https://docs.aws.amazon.com/opensearch-service/latest/developerguide/supported-instance-types.html for other options).",
      "Type": "String",
    },
    "OpenSearchName": {
      "AllowedPattern": "([^ ]+)|(EMPTY)",
      "ConstraintDescription": "Must be a valid Amazon OpenSearch domain name or 'EMPTY'",
      "Default": "EMPTY",
      "Description": "Set this to the target Amazon OpenSearch domain name to use an existing OpenSearch service. Set to 'EMPTY' to provision a new Amazon OpenSearch service",
      "Type": "String",
    },
    "OpenSearchNodeCount": {
      "AllowedValues": [
        "1",
        "2",
        "4",
      ],
      "Default": "4",
      "Description": "Number of nodes in Amazon OpenSearch Service domain - '4' is recommended for fault tolerant production deployments.",
      "Type": "String",
    },
    "PublicOrPrivate": {
      "AllowedValues": [
        "PUBLIC",
        "PRIVATE",
      ],
      "Default": "PRIVATE",
      "Description": "Choose whether access to the QnABot client should be publicly available or restricted to users in QnABot UserPool.",
      "Type": "String",
    },
    "Username": {
      "AllowedPattern": "[^ ]+",
      "ConstraintDescription": "Must not be empty or contain spaces",
      "Default": "Admin",
      "Description": "This username will be used to sign in to QnABot on AWS content designer console.",
      "Type": "String",
    },
    "VPCSecurityGroupIdList": {
      "AllowedPattern": "[^ ]*",
      "ConstraintDescription": "Must be a list of valid security group IDs",
      "Default": "",
      "Description": "Set to a list of Security Group IDs used by QnABot when deployed within a VPC.",
      "Type": "CommaDelimitedList",
    },
    "VPCSubnetIdList": {
      "AllowedPattern": "[^ ]*",
      "ConstraintDescription": "Must be a list of valid subnet IDs",
      "Default": "",
      "Description": "Set to a list of Subnet IDs belonging to the target VPC you want to deploy QnABot on AWS in.",
      "Type": "CommaDelimitedList",
    },
    "XraySetting": {
      "AllowedValues": [
        "FALSE",
        "TRUE",
      ],
      "ConstraintDescription": "Allowed Values are FALSE or TRUE",
      "Default": "FALSE",
      "Description": "Configure Lambdas with X-Ray enabled",
      "Type": "String",
    },
  },
  "Resources": {
    "API": {
      "Properties": {
        "BinaryMediaTypes": [
          "image/png",
          "font/woff",
          "font/woff2",
        ],
        "Description": "An Api interface for the admin actions on the QNA bot",
        "MinimumCompressionSize": 500000,
        "Name": {
          "Ref": "AWS::StackName",
        },
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "AdminRole": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F3",
              "reason": "This role policy is required to have * action in its policy",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "IAM_NO_INLINE_POLICY_CHECK",
            "CFN_NO_EXPLICIT_RESOURCE_NAMES",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "ForAnyValue:StringLike": {
                  "cognito-identity.amazonaws.com:amr": "authenticated",
                },
                "StringEquals": {
                  "cognito-identity.amazonaws.com:aud": {
                    "Ref": "IdPool",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Federated": "cognito-identity.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "es:ESHttp*",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "ESVar",
                        "ESArn",
                      ],
                    },
                  ],
                },
                {
                  "Action": [
                    "cognito-idp:AdminUserGlobalSignOut",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:cognito-idp:\${AWS::Region}:\${AWS::AccountId}:userpool/\${UserPool}",
                    },
                  ],
                },
                {
                  "Action": [
                    "execute-api:*",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:execute-api:\${AWS::Region}:\${AWS::AccountId}:\${API}/*/*/*",
                    },
                  ],
                },
                {
                  "Action": [
                    "s3:PutObject",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::\${ImportBucket}/data/*",
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::\${TestAllBucket}/data/*",
                    },
                  ],
                },
                {
                  "Action": [
                    "s3:GetObject",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::\${ExportBucket}/data/*",
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::\${ContentDesignerOutputBucket}/data-testall/*",
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::\${ContentDesignerOutputBucket}/data-export/*",
                    },
                  ],
                },
                {
                  "Action": [
                    "lambda:InvokeFunction",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:lambda:\${AWS::Region}:\${AWS::AccountId}:function:\${SolutionHelper}",
                    },
                  ],
                },
                {
                  "Action": [
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:Scan",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:dynamodb:\${AWS::Region}:\${AWS::AccountId}:table/\${SettingsTable}",
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "apiAccess",
          },
        ],
        "RoleName": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::Select": [
                  "0",
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          2,
                          {
                            "Fn::Split": [
                              "/",
                              {
                                "Ref": "AWS::StackId",
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                ],
              },
              "-AdminRole",
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "Admins": {
      "Properties": {
        "GroupName": "Admins",
        "UserPoolId": {
          "Ref": "UserPool",
        },
      },
      "Type": "AWS::Cognito::UserPoolGroup",
    },
    "Alexa": {
      "DependsOn": "FulfillmentLambdaAliaslive",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::Join": [
            ":",
            [
              {
                "Fn::GetAtt": [
                  "FulfillmentLambda",
                  "Arn",
                ],
              },
              "live",
            ],
          ],
        },
        "Principal": "alexa-appkit.amazon.com",
      },
      "Type": "AWS::Lambda::Permission",
    },
    "AlexaApi": {
      "Properties": {
        "ParentId": {
          "Ref": "Bot",
        },
        "PathPart": "alexa",
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "AlexaSchema": {
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set($inputRoot = $input.path('$'))
#set($utterances = $inputRoot.utterances)

{
  "interactionModel": {
    "languageModel": {
      "invocationName": "q and a",
      "types": [
        {
          "name": "EXAMPLE_QUESTIONS",
          "values": [
            #foreach( $utterance in $utterances)
                {"name":{
                    "value":"$utterance" 
                }}#if( $foreach.hasNext ),#end
            #end
          ]
        }
        ## {
        ##     "name": "EXAMPLE_QUESTIONS",
        ##     "values": [
        ##         {
        ##             "name": {
        ##                 "value": "this is required"
        ##             }
        ##         }
        ##     ]
        ##   }
      ],
      "intents": [
        {
          "slots": [
            {
              "name": "QnA_slot",
              "type": "EXAMPLE_QUESTIONS"
            }
          ],
          "name": "Qna_intent",
          "samples": [
            "{QnA_slot}"
          ]
        },
        {
          "name": "AMAZON.StopIntent"
        },
        {
          "name": "AMAZON.RepeatIntent"
        },
        {
          "name": "AMAZON.FallbackIntent"
        },
        {
          "name": "AMAZON.CancelIntent"
        }
      ]
    }
  }
}
",
                },
              },
              "StatusCode": 200,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*Exception.*",
              "StatusCode": 405,
            },
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "{
}                
               

",
            },
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UtteranceLambda",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.date": true,
            },
            "StatusCode": 200,
          },
          {
            "StatusCode": 404,
          },
          {
            "StatusCode": 405,
          },
          {
            "StatusCode": 500,
          },
        ],
        "ResourceId": {
          "Ref": "AlexaApi",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "ApiGatewayAccount": {
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiGatewayCloudWatchLogsRole",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
    },
    "ApiGatewayCloudWatchLogsRole": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W11",
              "reason": "This IAM role requires to have * resource on its permission policy",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "IAM_NO_INLINE_POLICY_CHECK",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole",
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "apigateway.amazonaws.com",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:DescribeLogGroups",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*",
                  ],
                },
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "logs:GetLogEvents",
                    "logs:FilterLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:logs:\${AWS::Region}:\${AWS::AccountId}:*",
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "ApiGatewayLogsPolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiGatewayRole": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "IAM_NO_INLINE_POLICY_CHECK",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole",
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "apigateway.amazonaws.com",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiUrl": {
      "Properties": {
        "Name": {
          "Fn::Join": [
            "",
            [
              "https://",
              {
                "Ref": "API",
              },
              ".execute-api.",
              {
                "Ref": "AWS::Region",
              },
              ".amazonaws.com/prod",
            ],
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
      },
      "Type": "Custom::Variable",
    },
    "AppRegistryApplicationAttributeAssociation": {
      "Properties": {
        "Application": {
          "Fn::GetAtt": [
            "Application",
            "Id",
          ],
        },
        "AttributeGroup": {
          "Fn::GetAtt": [
            "DefaultApplicationAttributes",
            "Id",
          ],
        },
      },
      "Type": "AWS::ServiceCatalogAppRegistry::AttributeGroupAssociation",
    },
    "AppRegistryApplicationStackAssociation": {
      "Properties": {
        "Application": {
          "Fn::GetAtt": [
            "Application",
            "Id",
          ],
        },
        "Resource": {
          "Ref": "AWS::StackId",
        },
        "ResourceType": "CFN_STACK",
      },
      "Type": "AWS::ServiceCatalogAppRegistry::ResourceAssociation",
    },
    "AppRegistryApplicationStackAssociationExamples": {
      "Condition": "BuildExamples",
      "Properties": {
        "Application": {
          "Fn::GetAtt": [
            "Application",
            "Id",
          ],
        },
        "Resource": {
          "Ref": "ExamplesStack",
        },
        "ResourceType": "CFN_STACK",
      },
      "Type": "AWS::ServiceCatalogAppRegistry::ResourceAssociation",
    },
    "AppRegistryApplicationStackAssociationExport": {
      "Properties": {
        "Application": {
          "Fn::GetAtt": [
            "Application",
            "Id",
          ],
        },
        "Resource": {
          "Ref": "ExportStack",
        },
        "ResourceType": "CFN_STACK",
      },
      "Type": "AWS::ServiceCatalogAppRegistry::ResourceAssociation",
    },
    "AppRegistryApplicationStackAssociationImport": {
      "Properties": {
        "Application": {
          "Fn::GetAtt": [
            "Application",
            "Id",
          ],
        },
        "Resource": {
          "Ref": "ImportStack",
        },
        "ResourceType": "CFN_STACK",
      },
      "Type": "AWS::ServiceCatalogAppRegistry::ResourceAssociation",
    },
    "AppRegistryApplicationStackAssociationTestAll": {
      "Properties": {
        "Application": {
          "Fn::GetAtt": [
            "Application",
            "Id",
          ],
        },
        "Resource": {
          "Ref": "TestAllStack",
        },
        "ResourceType": "CFN_STACK",
      },
      "Type": "AWS::ServiceCatalogAppRegistry::ResourceAssociation",
    },
    "Application": {
      "Properties": {
        "Description": "Service Catalog application to track and manage all your resources for the solution qnabot-on-aws",
        "Name": {
          "Fn::Join": [
            "-",
            [
              "App",
              {
                "Ref": "AWS::StackName",
              },
              {
                "Fn::FindInMap": [
                  "Solution",
                  "Data",
                  "AppRegistryApplicationName",
                ],
              },
            ],
          ],
        },
        "Tags": {
          "Solutions:ApplicationType": {
            "Fn::FindInMap": [
              "Solution",
              "Data",
              "ApplicationType",
            ],
          },
          "Solutions:SolutionID": {
            "Fn::FindInMap": [
              "Solution",
              "Data",
              "ID",
            ],
          },
          "Solutions:SolutionName": {
            "Fn::FindInMap": [
              "Solution",
              "Data",
              "SolutionName",
            ],
          },
          "Solutions:SolutionVersion": {
            "Fn::FindInMap": [
              "Solution",
              "Data",
              "Version",
            ],
          },
        },
      },
      "Type": "AWS::ServiceCatalogAppRegistry::Application",
    },
    "AssetBucket": {
      "DependsOn": [
        "MainAccessLogBucket",
        "MainAccessLogsBucketPolicy",
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F14",
              "reason": "AccessControl is deprecated.",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "S3_BUCKET_NO_PUBLIC_RW_ACL",
          ],
        },
      },
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "LoggingConfiguration": {
          "DestinationBucketName": {
            "Ref": "MainAccessLogBucket",
          },
          "LogFilePrefix": {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "MainAccessLogBucket",
                },
                "/Assets/",
              ],
            ],
          },
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
    },
    "AssetClean": {
      "DependsOn": [
        "CFNInvokePolicy",
        "HTTPSOnlyAssetBucketPolicy",
      ],
      "Properties": {
        "Bucket": {
          "Ref": "AssetBucket",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "S3Clean",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3Clean",
    },
    "AssetUnzip": {
      "DependsOn": [
        "AssetClean",
      ],
      "Properties": {
        "DstBucket": {
          "Ref": "AssetBucket",
        },
        "Key": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "BootstrapPrefix",
              },
              "/assets.zip",
            ],
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
        "SrcBucket": {
          "Ref": "BootstrapBucket",
        },
        "version": {
          "Ref": "AssetZipVersion",
        },
      },
      "Type": "Custom::S3Unzip",
    },
    "AssetZipVersion": {
      "Properties": {
        "Bucket": {
          "Ref": "BootstrapBucket",
        },
        "BuildDate": Any<String>,
        "Key": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "BootstrapPrefix",
              },
              "/assets.zip",
            ],
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3Version",
    },
    "AwsSdkLayerCodeVersion": {
      "Properties": {
        "Bucket": {
          "Ref": "BootstrapBucket",
        },
        "BuildDate": Any<String>,
        "Key": {
          "Fn::Sub": "\${BootstrapPrefix}/lambda/aws-sdk-layer.zip",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3Version",
    },
    "AwsSdkLayerLambdaLayer": {
      "Properties": {
        "CompatibleRuntimes": [
          "nodejs",
        ],
        "Content": {
          "S3Bucket": {
            "Ref": "BootstrapBucket",
          },
          "S3Key": {
            "Fn::Sub": "\${BootstrapPrefix}/lambda/aws-sdk-layer.zip",
          },
          "S3ObjectVersion": {
            "Ref": "AwsSdkLayerCodeVersion",
          },
        },
        "LayerName": {
          "Fn::Join": [
            "-",
            [
              "AwsSdk",
              {
                "Fn::Select": [
                  "0",
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Ref": "AWS::StackName",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::LayerVersion",
    },
    "Bot": {
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "API",
            "RootResourceId",
          ],
        },
        "PathPart": "bot",
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "BotDoc": {
      "Properties": {
        "Location": {
          "Path": "/bot",
          "Type": "RESOURCE",
        },
        "Properties": "{"description":""}",
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::DocumentationPart",
    },
    "BotGet": {
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($root="https://\${!context.domainName}/\${!context.stage}")

#set($inputRoot = $input.path('$'))

{
    "lambdaArn": "$inputRoot.lambdaArn",
    "lambdaRole":"$inputRoot.lambdaRole",
    "botversion":"$inputRoot.botversion",
    "botname":"$inputRoot.botname",
    "intent":"$inputRoot.intent",
    "intentFallback":"$inputRoot.intentFallback",
    "lexV2botname":"$inputRoot.lexV2botname",
    "lexV2botid":"$inputRoot.lexV2botid",
    "lexV2botalias":"$inputRoot.lexV2botalias",
    "lexV2botaliasid":"$inputRoot.lexV2botaliasid",
    "lexV2intent":"$inputRoot.lexV2intent",
    "lexV2intentFallback":"$inputRoot.lexV2intentFallback",
    "lexV2localeids":"$inputRoot.lexV2localeids",
    "status":"$inputRoot.status",
    "build":$input.json('$.build'),
    "_links":{
        "alexa":{
            "href":"$root/bot/alexa"
        }
    }
}

",
                },
              },
              "StatusCode": 200,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*Exception.*",
              "StatusCode": 405,
            },
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "{
    "fnc":"getBot"
}                
               

",
            },
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LexStatusLambda",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.date": true,
            },
            "StatusCode": 200,
          },
          {
            "StatusCode": 404,
          },
          {
            "StatusCode": 405,
          },
          {
            "StatusCode": 500,
          },
        ],
        "ResourceId": {
          "Ref": "Bot",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "BotPost": {
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "POST",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "{"token":"$input.path('$.token')"}
",
                },
              },
              "StatusCode": 200,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*Exception.*",
              "StatusCode": 405,
            },
          ],
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LexBuildLambdaStart",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.date": true,
            },
            "StatusCode": 200,
          },
          {
            "StatusCode": 404,
          },
          {
            "StatusCode": 405,
          },
          {
            "StatusCode": 500,
          },
        ],
        "ResourceId": {
          "Ref": "Bot",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "Bucket": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "MainAccessLogBucket",
        "MainAccessLogsBucketPolicy",
      ],
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "S3_BUCKET_NO_PUBLIC_RW_ACL",
          ],
        },
      },
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "LoggingConfiguration": {
          "DestinationBucketName": {
            "Ref": "MainAccessLogBucket",
          },
          "LogFilePrefix": {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "MainAccessLogBucket",
                },
                "/S3Bucket/",
              ],
            ],
          },
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": {
          "Status": "Enabled",
        },
        "WebsiteConfiguration": {
          "IndexDocument": "index.html",
        },
      },
      "Type": "AWS::S3::Bucket",
    },
    "BuildStatusBucket": {
      "DependsOn": [
        "MainAccessLogBucket",
        "MainAccessLogsBucketPolicy",
      ],
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "S3_BUCKET_NO_PUBLIC_RW_ACL",
          ],
        },
      },
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "NoncurrentVersionExpirationInDays": 1,
              "Status": "Enabled",
            },
            {
              "AbortIncompleteMultipartUpload": {
                "DaysAfterInitiation": 1,
              },
              "Status": "Enabled",
            },
          ],
        },
        "LoggingConfiguration": {
          "DestinationBucketName": {
            "Ref": "MainAccessLogBucket",
          },
          "LogFilePrefix": {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "MainAccessLogBucket",
                },
                "/BuildStatus/",
              ],
            ],
          },
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
    },
    "BuildStatusClean": {
      "DependsOn": [
        "CFNInvokePolicy",
        "HTTPSOnlyBuildStatusBucketPolicy",
      ],
      "Properties": {
        "Bucket": {
          "Ref": "BuildStatusBucket",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "S3Clean",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3Clean",
    },
    "CFNInvokePolicy": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "lambda:InvokeFunction",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CFNLambda",
                    "Arn",
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "Roles": [
          {
            "Ref": "CFNLambdaRole",
          },
        ],
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "CFNLambda": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "This lambda function does not require to have ReservedConcurrentExecutions",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "LAMBDA_CONCURRENCY_CHECK",
            "LAMBDA_INSIDE_VPC",
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "BootstrapBucket",
          },
          "S3Key": {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "BootstrapPrefix",
                },
                "/lambda/cfn.zip",
              ],
            ],
          },
          "S3ObjectVersion": {
            "Fn::GetAtt": [
              "CFNVersion",
              "version",
            ],
          },
        },
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0189",
            "SOLUTION_VERSION": "vx.x.x",
          },
        },
        "Handler": "index.handler",
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "CFNLambdaLogGroup",
          },
        },
        "MemorySize": "3008",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs",
        "Tags": [
          {
            "Key": "Type",
            "Value": "CustomResource",
          },
        ],
        "Timeout": 180,
        "TracingConfig": {
          "Fn::If": [
            "XRAYEnabled",
            {
              "Mode": "Active",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SecurityGroupIds": {
                "Ref": "VPCSecurityGroupIdList",
              },
              "SubnetIds": {
                "Ref": "VPCSubnetIdList",
              },
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "CFNLambdaLogGroup": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
            "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Sub": "/aws/lambda/\${AWS::StackName}-CFNLambda",
              },
              {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Fn::If": [
            "LogRetentionPeriodIsNotZero",
            {
              "Ref": "LogRetentionPeriod",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "CFNLambdaRole": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F3",
              "reason": "This role policy is required to have * action in its policy",
            },
            {
              "id": "F38",
              "reason": "This role policy is required to have * action in its policy with PassRole action",
            },
            {
              "id": "W11",
              "reason": "This IAM role requires to have * resource on its permission policy",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "IAM_NO_INLINE_POLICY_CHECK",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
          "arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess",
        ],
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "es:ESHttp*",
                    "es:UpdateDomainConfig",
                    "es:DescribeDomain",
                    "es:DescribeDomains",
                    "es:DescribeDomainConfig",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:es:\${AWS::Region}:\${AWS::AccountId}:domain*",
                    },
                  ],
                },
                {
                  "Action": [
                    "lex:PutSlotType",
                    "lex:GetSlotType",
                    "lex:DeleteSlotType",
                    "lex:PutIntent",
                    "lex:GetIntent",
                    "lex:DeleteIntent",
                    "lex:PutBot",
                    "lex:GetBot",
                    "lex:DeleteBot",
                    "lex:PutBotAlias",
                    "lex:DeleteBotAlias",
                    "lex:GetBotAlias",
                    "lex:GetBotVersions",
                    "lex:GetIntentVersions",
                    "lex:GetSlotTypeVersions",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*",
                  ],
                },
                {
                  "Action": [
                    "apigateway:*",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*",
                  ],
                },
                {
                  "Action": [
                    "iam:PassRole",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":iam::",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":role/",
                        {
                          "Fn::Select": [
                            "0",
                            {
                              "Fn::Split": [
                                "-",
                                {
                                  "Fn::Select": [
                                    2,
                                    {
                                      "Fn::Split": [
                                        "/",
                                        {
                                          "Ref": "AWS::StackId",
                                        },
                                      ],
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                        "-*",
                      ],
                    ],
                  },
                },
                {
                  "Action": [
                    "cognito-identity:SetIdentityPoolRoles",
                    "cognito-identity:GetIdentityPoolRoles",
                    "iam:CreateServiceLinkedRole",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*",
                  ],
                },
                {
                  "Action": [
                    "cognito-idp:*",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*",
                  ],
                },
                {
                  "Action": [
                    "s3:ListBucketVersions",
                    "s3:PutBucketNotification",
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:DeleteObjectVersion",
                    "s3:DeleteObject",
                    "s3:GetObjectVersion",
                    "s3:ListBucket",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:s3:::*",
                    },
                  ],
                  "Sid": "CFNLambdaS3Access",
                },
                {
                  "Action": [
                    "lambda:PublishVersion",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lambda:\${AWS::Region}:\${AWS::AccountId}:function:*",
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "CFNAccess",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "lambda:AddPermission",
                    "lambda:RemovePermission",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lambda:\${AWS::Region}:\${AWS::AccountId}:function:*",
                    },
                  ],
                },
                {
                  "Action": [
                    "events:PutRule",
                    "events:DeleteRule",
                    "events:PutTargets",
                    "events:RemoveTargets",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:events:\${AWS::Region}:\${AWS::AccountId}:rule/*",
                    },
                  ],
                },
                {
                  "Action": [
                    "s3:PutBucketVersioning",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:s3:::*",
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionCustomResourcePollingPolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "dynamodb:PutItem",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:UpdateItem",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "SettingsTable",
                        "Arn",
                      ],
                    },
                  ],
                },
                {
                  "Action": [
                    "ssm:DescribeParameters",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:ssm:\${AWS::Region}:\${AWS::AccountId}:*",
                    },
                  ],
                },
                {
                  "Action": [
                    "ssm:GetParameter",
                    "ssm:DeleteParameter",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:ssm:\${AWS::Region}:\${AWS::AccountId}:parameter/CFN-CustomQnABotSettings-*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:ssm:\${AWS::Region}:\${AWS::AccountId}:parameter/CFN-PrivateQnABotSettings-*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:ssm:\${AWS::Region}:\${AWS::AccountId}:parameter/CFN-DefaultQnABotSettings-*",
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "SettingsInitializerCustomResourcePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CFNVersion": {
      "Properties": {
        "Bucket": {
          "Ref": "BootstrapBucket",
        },
        "BuildDate": Any<String>,
        "Key": {
          "Fn::Sub": "\${BootstrapPrefix}/lambda/cfn.zip",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "VersionLambda",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3Version",
    },
    "CfnLambdaLayer": {
      "Properties": {
        "CompatibleRuntimes": [
          "nodejs",
        ],
        "Content": {
          "S3Bucket": {
            "Ref": "BootstrapBucket",
          },
          "S3Key": {
            "Fn::Sub": "\${BootstrapPrefix}/lambda/cfn-lambda-layer.zip",
          },
          "S3ObjectVersion": {
            "Ref": "CfnLambdaLayerCodeVersion",
          },
        },
        "LayerName": {
          "Fn::Join": [
            "-",
            [
              "CfnLambdaModule",
              {
                "Fn::Select": [
                  "0",
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Ref": "AWS::StackName",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::LayerVersion",
    },
    "CfnLambdaLayerCodeVersion": {
      "Properties": {
        "Bucket": {
          "Ref": "BootstrapBucket",
        },
        "BuildDate": Any<String>,
        "Key": {
          "Fn::Sub": "\${BootstrapPrefix}/lambda/cfn-lambda-layer.zip",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3Version",
    },
    "Clean": {
      "DependsOn": [
        "CFNInvokePolicy",
        "HTTPSOnlyBucketPolicy",
      ],
      "Properties": {
        "Bucket": {
          "Ref": "Bucket",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "S3Clean",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3Clean",
    },
    "ClientClient": {
      "Properties": {
        "ClientName": {
          "Fn::Join": [
            "-",
            [
              "UserPool",
              {
                "Ref": "AWS::StackName",
              },
              "client",
            ],
          ],
        },
        "GenerateSecret": false,
        "UserPoolId": {
          "Ref": "UserPool",
        },
      },
      "Type": "AWS::Cognito::UserPoolClient",
    },
    "ClientDesigner": {
      "Properties": {
        "ClientName": {
          "Fn::Join": [
            "-",
            [
              "UserPool",
              {
                "Ref": "AWS::StackName",
              },
              "designer",
            ],
          ],
        },
        "GenerateSecret": false,
        "UserPoolId": {
          "Ref": "UserPool",
        },
      },
      "Type": "AWS::Cognito::UserPoolClient",
    },
    "ClientLogin": {
      "Properties": {
        "ClientId": {
          "Ref": "ClientClient",
        },
        "Domain": {
          "Ref": "CognitoDomain",
        },
        "LoginRedirectUrl": {
          "Fn::GetAtt": [
            "Urls",
            "Client",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
        "response_type": "code",
      },
      "Type": "Custom::CognitoUrl",
    },
    "ClientLoginResource": {
      "Properties": {
        "ParentId": {
          "Ref": "Login",
        },
        "PathPart": "client",
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "ClientLoginResourceGet": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W59",
              "reason": "This ApiGateway Method does not need authorization setup",
            },
          ],
        },
      },
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.location": {
                  "Fn::Join": [
                    "",
                    [
                      "'",
                      {
                        "Fn::GetAtt": [
                          "ClientLogin",
                          "loginUrl",
                        ],
                      },
                      "'",
                    ],
                  ],
                },
              },
              "StatusCode": "302",
            },
          ],
          "RequestTemplates": {
            "application/json": "{"statusCode": 302}",
          },
          "Type": "MOCK",
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.location": true,
            },
            "StatusCode": 302,
          },
        ],
        "ResourceId": {
          "Ref": "ClientLoginResource",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "CognitoDomain": {
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
        "UserPool": {
          "Ref": "UserPool",
        },
      },
      "Type": "Custom::CognitoDomain",
    },
    "CognitoLoginClient": {
      "Properties": {
        "CSS": ".logo-customizable{max-width:60%;max-height:30%}.banner-customizable{padding:25px 0px 25px 0px;background-color:#d3d3d3}.label-customizable{font-weight:410}.textDescription-customizable{padding-top:10px;padding-bottom:10px;display:block;font-size:16px}.idpDescription-customizable{padding-top:10px;padding-bottom:10px;display:block;font-size:16px}.legalText-customizable{color:#747474;font-size:11px}.submitButton-customizable{font-size:14px;font-weight:bold;margin:20px 0px 10px 0px;height:40px;width:100%;color:#fff;background-color:#337ab7}.submitButton-customizable:hover{color:#fff;background-color:#286090}.errorMessage-customizable{padding:5px;font-size:14px;width:100%;background:#f5f5f5;border:2px solid #d64958;color:#d64958}.inputField-customizable{width:100%;height:34px;color:#555;background-color:#fff;border:1px solid #ccc}.inputField-customizable:focus{border-color:#66afe9;outline:0}.idpButton-customizable{height:41px;width:100%;text-align:center;margin-bottom:15px;color:#fff;background-color:#5bc0de;border-color:#46b8da}.idpButton-customizable:hover{color:#fff;background-color:#31b0d5}.socialButton-customizable{height:40px;text-align:left;width:100%;margin-bottom:15px}.redirect-customizable{text-align:center}.passwordCheck-notValid-customizable{color:#df3312}.passwordCheck-valid-customizable{color:#19bf00}.background-customizable{background-color:#fff}",
        "ClientId": {
          "Ref": "ClientClient",
        },
        "LoginCallbackUrls": [
          {
            "Fn::GetAtt": [
              "Urls",
              "Client",
            ],
          },
        ],
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
        "UserPool": {
          "Ref": "UserPool",
        },
      },
      "Type": "Custom::CognitoLogin",
    },
    "CognitoLoginDesigner": {
      "Properties": {
        "CSS": ".logo-customizable{max-width:60%;max-height:30%}.banner-customizable{padding:25px 0px 25px 0px;background-color:#d3d3d3;margin-left:auto;margin-right:auto}.label-customizable{font-weight:410}.textDescription-customizable{padding-top:10px;padding-bottom:10px;display:block;font-size:16px}.idpDescription-customizable{padding-top:10px;padding-bottom:10px;display:block;font-size:16px}.legalText-customizable{color:#747474;font-size:11px}.submitButton-customizable{font-size:14px;font-weight:bold;margin:20px 0px 10px 0px;height:40px;width:100%;color:#fff;background-color:#337ab7}.submitButton-customizable:hover{color:#fff;background-color:#286090}.errorMessage-customizable{padding:5px;font-size:14px;width:100%;background:#f5f5f5;border:2px solid #d64958;color:#d64958}.inputField-customizable{width:100%;height:34px;color:#555;background-color:#fff;border:1px solid #ccc}.inputField-customizable:focus{border-color:#66afe9;outline:0}.idpButton-customizable{height:41px;width:100%;text-align:center;margin-bottom:15px;color:#fff;background-color:#5bc0de;border-color:#46b8da}.idpButton-customizable:hover{color:#fff;background-color:#31b0d5}.socialButton-customizable{height:40px;text-align:left;width:100%;margin-bottom:15px}.redirect-customizable{text-align:center}.passwordCheck-notValid-customizable{color:#df3312}.passwordCheck-valid-customizable{color:#19bf00}.background-customizable{background-color:#fff}",
        "ClientId": {
          "Ref": "ClientDesigner",
        },
        "LoginCallbackUrls": [
          {
            "Fn::GetAtt": [
              "Urls",
              "Designer",
            ],
          },
        ],
        "LogoutCallbackUrls": [
          {
            "Fn::GetAtt": [
              "Urls",
              "Designer",
            ],
          },
        ],
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
        "UserPool": {
          "Ref": "UserPool",
        },
      },
      "Type": "Custom::CognitoLogin",
    },
    "CommonModulesLambdaLayer": {
      "Properties": {
        "CompatibleRuntimes": [
          "nodejs",
        ],
        "Content": {
          "S3Bucket": {
            "Ref": "BootstrapBucket",
          },
          "S3Key": {
            "Fn::Sub": "\${BootstrapPrefix}/lambda/common-modules-layer.zip",
          },
          "S3ObjectVersion": {
            "Ref": "CommonModulesLayerCodeVersion",
          },
        },
        "LayerName": {
          "Fn::Join": [
            "-",
            [
              "CommonModules",
              {
                "Fn::Select": [
                  "0",
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Ref": "AWS::StackName",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::LayerVersion",
    },
    "CommonModulesLayerCodeVersion": {
      "Properties": {
        "Bucket": {
          "Ref": "BootstrapBucket",
        },
        "BuildDate": Any<String>,
        "Key": {
          "Fn::Sub": "\${BootstrapPrefix}/lambda/common-modules-layer.zip",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3Version",
    },
    "ContentDesignerOutputBucket": {
      "DependsOn": [
        "MainAccessLogBucket",
        "MainAccessLogsBucketPolicy",
      ],
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "S3_BUCKET_NO_PUBLIC_RW_ACL",
          ],
        },
      },
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedHeaders": [
                "*",
              ],
              "AllowedMethods": [
                "GET",
              ],
              "AllowedOrigins": [
                "*",
              ],
            },
          ],
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "ExpirationInDays": 1,
              "Status": "Enabled",
            },
          ],
        },
        "LoggingConfiguration": {
          "DestinationBucketName": {
            "Ref": "MainAccessLogBucket",
          },
          "LogFilePrefix": {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "MainAccessLogBucket",
                },
                "/ContentDesignerOutput/",
              ],
            ],
          },
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
    },
    "ContentDesignerOutputClean": {
      "DependsOn": [
        "CFNInvokePolicy",
      ],
      "Properties": {
        "Bucket": {
          "Ref": "ContentDesignerOutputBucket",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "S3Clean",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3Clean",
    },
    "CustomQnABotSettings": {
      "Condition": "DeprecatedSSMSettings",
      "Properties": {
        "Description": "Custom QnABot Settings - Modify to override defaults, or to add new settings",
        "Tier": "Advanced",
        "Type": "String",
        "Value": "{}",
      },
      "Type": "AWS::SSM::Parameter",
    },
    "DefaultApplicationAttributes": {
      "Properties": {
        "Attributes": {
          "ApplicationType": {
            "Fn::FindInMap": [
              "Solution",
              "Data",
              "ApplicationType",
            ],
          },
          "SolutionID": {
            "Fn::FindInMap": [
              "Solution",
              "Data",
              "ID",
            ],
          },
          "SolutionName": {
            "Fn::FindInMap": [
              "Solution",
              "Data",
              "SolutionName",
            ],
          },
          "Version": {
            "Fn::FindInMap": [
              "Solution",
              "Data",
              "Version",
            ],
          },
        },
        "Description": "Attribute group for solution information",
        "Name": {
          "Fn::Join": [
            "-",
            [
              "AttrGrp",
              {
                "Ref": "AWS::StackName",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ServiceCatalogAppRegistry::AttributeGroup",
    },
    "DefaultQnABotSettings": {
      "Condition": "DeprecatedSSMSettings",
      "Properties": {
        "Description": "Default QnABot Settings - DO NOT MODIFY",
        "Tier": "Advanced",
        "Type": "String",
        "Value": {
          "Fn::Sub": [
            "{"ENABLE_DEBUG_RESPONSES":"false","ENABLE_DEBUG_LOGGING":"false","ES_USE_KEYWORD_FILTERS":"\${ES_USE_KEYWORD_FILTERS}","ES_EXPAND_CONTRACTIONS":"{\\"you're\\":\\"you are\\",\\"I'm\\":\\"I am\\",\\"can't\\":\\"cannot\\"}","ES_KEYWORD_SYNTAX_TYPES":"NOUN,PROPN,VERB,INTJ","ES_SYNTAX_CONFIDENCE_LIMIT":0.2,"ES_MINIMUM_SHOULD_MATCH":"2<75%","ES_NO_HITS_QUESTION":"no_hits","ES_ERROR_QUESTION":"error_msg","ES_USE_FUZZY_MATCH":"false","ES_PHRASE_BOOST":4,"ES_SCORE_ANSWER_FIELD":"false","ES_SCORE_TEXT_ITEM_PASSAGES":"true","ENABLE_SENTIMENT_SUPPORT":"true","ENABLE_MULTI_LANGUAGE_SUPPORT":"false","ENABLE_CUSTOM_TERMINOLOGY":"false","MINIMUM_CONFIDENCE_SCORE":0.6,"ALT_SEARCH_KENDRA_FALLBACK_CONFIDENCE_SCORE":"HIGH","ALT_SEARCH_KENDRA_FAQ_CONFIDENCE_SCORE":"HIGH","ALT_SEARCH_KENDRA_S3_SIGNED_URLS":"true","ALT_SEARCH_KENDRA_S3_SIGNED_URL_EXPIRE_SECS":300,"ALT_SEARCH_KENDRA_MAX_DOCUMENT_COUNT":2,"ALT_SEARCH_KENDRA_TOP_ANSWER_MESSAGE":"Amazon Kendra suggested answer.","ALT_SEARCH_KENDRA_FAQ_MESSAGE":"Answer from Amazon Kendra FAQ.","ALT_SEARCH_KENDRA_ANSWER_MESSAGE":"While I did not find an exact answer, these search results from Amazon Kendra might be helpful.","ALT_SEARCH_KENDRA_RESPONSE_TYPES":"ANSWER,DOCUMENT,QUESTION_ANSWER","ALT_SEARCH_KENDRA_ABBREVIATE_MESSAGE_FOR_SSML":"true","KENDRA_FAQ_CONFIG_MAX_RETRIES":8,"KENDRA_FAQ_CONFIG_RETRY_DELAY":600,"KENDRA_FAQ_ES_FALLBACK":"true","ENABLE_KENDRA_WEB_INDEXER":"false","KENDRA_INDEXER_URLS":"","KENDRA_INDEXER_CRAWL_DEPTH":3,"KENDRA_INDEXER_CRAWL_MODE":"SUBDOMAINS","KENDRA_INDEXER_SCHEDULE":"rate(1 day)","KENDRA_INDEXED_DOCUMENTS_LANGUAGES":"en","ERRORMESSAGE":"Unfortunately I encountered an error when searching for your answer. Please ask me again later.","EMPTYMESSAGE":"You stumped me! Sadly I do not know how to answer your question.","DEFAULT_ALEXA_LAUNCH_MESSAGE":"Hello, Please ask a question","DEFAULT_ALEXA_REPROMPT":"Please either answer the question, ask another question or say Goodbye to end the conversation.","DEFAULT_ALEXA_STOP_MESSAGE":"Goodbye","SMS_HINT_REMINDER_ENABLE":"true","SMS_HINT_REMINDER":" (Feedback? Reply THUMBS UP or THUMBS DOWN. Ask HELP ME at any time)","SMS_HINT_REMINDER_INTERVAL_HRS":24,"IDENTITY_PROVIDER_JWKS_URLS":[],"ENFORCE_VERIFIED_IDENTITY":"false","NO_VERIFIED_IDENTITY_QUESTION":"no_verified_identity","ELICIT_RESPONSE_MAX_RETRIES":3,"ELICIT_RESPONSE_RETRY_MESSAGE":"Please try again.","ELICIT_RESPONSE_BOT_FAILURE_MESSAGE":"Your response was not understood. Please start again.","ELICIT_RESPONSE_DEFAULT_MSG":"Ok. ","CONNECT_IGNORE_WORDS":"","CONNECT_ENABLE_VOICE_RESPONSE_INTERRUPT":"false","CONNECT_NEXT_PROMPT_VARNAME":"connect_nextPrompt","ENABLE_REDACTING":"false","REDACTING_REGEX":"\\\\b\\\\d{4}\\\\b(?![-])|\\\\b\\\\d{9}\\\\b|\\\\b\\\\d{3}-\\\\d{2}-\\\\d{4}\\\\b","ENABLE_REDACTING_WITH_COMPREHEND":"false","COMPREHEND_REDACTING_CONFIDENCE_SCORE":0.99,"COMPREHEND_REDACTING_ENTITY_TYPES":"ADDRESS,EMAIL,SSN,PHONE,PASSWORD,BANK_ACCOUNT_NUMBER,BANK_ROUTING,CREDIT_DEBIT_NUMBER","PII_REJECTION_ENABLED":false,"PII_REJECTION_QUESTION":"pii_rejection_question","PII_REJECTION_REGEX":"\\\\b\\\\d{4}\\\\b(?![-])|\\\\b\\\\d{9}\\\\b|\\\\b\\\\d{3}-\\\\d{2}-\\\\d{4}\\\\b","PII_REJECTION_ENTITY_TYPES":"ADDRESS,EMAIL,SSN,PHONE,PASSWORD,BANK_ACCOUNT_NUMBER,BANK_ROUTING,CREDIT_DEBIT_NUMBER","PII_REJECTION_CONFIDENCE_SCORE":0.99,"DISABLE_CLOUDWATCH_LOGGING":"false","MINIMAL_ES_LOGGING":"false","S3_PUT_REQUEST_ENCRYPTION":"","BOT_ROUTER_WELCOME_BACK_MSG":"Welcome back to QnABot.","BOT_ROUTER_EXIT_MSGS":"exit,quit,goodbye,leave","RUN_LAMBDAHOOK_FROM_QUERY_STEP":"true","LAMBDA_PREPROCESS_HOOK":"","LAMBDA_POSTPROCESS_HOOK":"","SEARCH_REPLACE_QUESTION_SUBSTRINGS":"","PROTECTED_UTTERANCES":"help,help me,thumbs up,thumbs down,repeat,no_hits,no_verified_identity,reset language,detect language,english,french,spanish,german,italian,chinese,arabic,greek,repeat,can you repeat that,can you please say that again,please repeat that","EMBEDDINGS_ENABLE":"\${EMBEDDINGS_ENABLE}","EMBEDDINGS_SCORE_THRESHOLD":"\${EMBEDDINGS_SCORE_THRESHOLD}","EMBEDDINGS_SCORE_ANSWER_THRESHOLD":0.8,"EMBEDDINGS_TEXT_PASSAGE_SCORE_THRESHOLD":"\${EMBEDDINGS_TEXT_PASSAGE_SCORE_THRESHOLD}","EMBEDDINGS_MAX_TOKEN_LIMIT":"\${EMBEDDINGS_MAX_TOKEN_LIMIT}","LLM_GENERATE_QUERY_ENABLE":"\${LLM_GENERATE_QUERY_ENABLE}","LLM_GENERATE_QUERY_PROMPT_TEMPLATE":"\${LLM_GENERATE_QUERY_PROMPT_TEMPLATE}","LLM_GENERATE_QUERY_MODEL_PARAMS":"\${LLM_GENERATE_QUERY_MODEL_PARAMS}","LLM_QA_ENABLE":"\${LLM_QA_ENABLE}","LLM_QA_USE_KENDRA_RETRIEVAL_API":"\${LLM_QA_ENABLE}","LLM_QA_PROMPT_TEMPLATE":"\${LLM_QA_PROMPT_TEMPLATE}","LLM_QA_MODEL_PARAMS":"\${LLM_QA_MODEL_PARAMS}","LLM_QA_PREFIX_MESSAGE":"LLM Answer:","LLM_QA_SHOW_CONTEXT_TEXT":"true","LLM_QA_SHOW_SOURCE_LINKS":"true","LLM_CHAT_HISTORY_MAX_MESSAGES":12,"LLM_QA_NO_HITS_REGEX":"\${LLM_QA_NO_HITS_REGEX}","LLM_PROMPT_MAX_TOKEN_LIMIT":"\${LLM_PROMPT_MAX_TOKEN_LIMIT}","KNOWLEDGE_BASE_PREFIX_MESSAGE":"From Knowledge Base:","KNOWLEDGE_BASE_SHOW_REFERENCES":"true","KNOWLEDGE_BASE_S3_SIGNED_URLS":"true","KNOWLEDGE_BASE_S3_SIGNED_URL_EXPIRE_SECS":300,"KNOWLEDGE_BASE_PROMPT_TEMPLATE":"\${KNOWLEDGE_BASE_PROMPT_TEMPLATE}","KNOWLEDGE_BASE_MAX_NUMBER_OF_RETRIEVED_RESULTS":"","KNOWLEDGE_BASE_SEARCH_TYPE":"DEFAULT","KNOWLEDGE_BASE_METADATA_FILTERS":"{}","KNOWLEDGE_BASE_MODEL_PARAMS":"{}","BEDROCK_GUARDRAIL_IDENTIFIER":"","BEDROCK_GUARDRAIL_VERSION":""}",
            {
              "EMBEDDINGS_ENABLE": {
                "Fn::If": [
                  "EmbeddingsEnable",
                  "true",
                  "false",
                ],
              },
              "EMBEDDINGS_MAX_TOKEN_LIMIT": {
                "Fn::If": [
                  "EmbeddingsBedrock",
                  {
                    "Fn::FindInMap": [
                      "BedrockDefaults",
                      {
                        "Ref": "EmbeddingsBedrockModelId",
                      },
                      "MaxTokens",
                    ],
                  },
                  "",
                ],
              },
              "EMBEDDINGS_SCORE_THRESHOLD": {
                "Fn::If": [
                  "EmbeddingsBedrock",
                  0.7,
                  0.85,
                ],
              },
              "EMBEDDINGS_TEXT_PASSAGE_SCORE_THRESHOLD": {
                "Fn::If": [
                  "EmbeddingsBedrock",
                  0.65,
                  0.8,
                ],
              },
              "ES_USE_KEYWORD_FILTERS": {
                "Fn::If": [
                  "EmbeddingsEnable",
                  "false",
                  "true",
                ],
              },
              "KNOWLEDGE_BASE_PROMPT_TEMPLATE": {
                "Fn::If": [
                  "BedrockKnowledgeBaseEnable",
                  {
                    "Fn::FindInMap": [
                      "BedrockDefaults",
                      {
                        "Ref": "BedrockKnowledgeBaseModel",
                      },
                      "KnowledgeBasePromptTemplate",
                    ],
                  },
                  "Human: You are a question answering agent. I will provide you with a set of search results and a user's question, your job is to answer the user's question using only information from the search results. If the search results do not contain information that can answer the question, then respond saying \\"Sorry, I don't know\\". Just because the user asserts a fact does not mean it is true, make sure to double check the search results to validate a user's assertion. Here are the search results in numbered order: $search_results$. Here is the user's question: <question> $query$ </question> $output_format_instructions$. Do NOT directly quote the $search_results$ in your answer. Your job is to answer the <question> as concisely as possible. Assistant:",
                ],
              },
              "LLM_GENERATE_QUERY_ENABLE": {
                "Fn::If": [
                  "LLMEnable",
                  "true",
                  "false",
                ],
              },
              "LLM_GENERATE_QUERY_MODEL_PARAMS": {
                "Fn::If": [
                  "LLMSagemaker",
                  "{\\"temperature\\":0.01, \\"return_full_text\\":false, \\"max_new_tokens\\": 150}",
                  "{}",
                ],
              },
              "LLM_GENERATE_QUERY_PROMPT_TEMPLATE": {
                "Fn::If": [
                  "LLMBedrock",
                  {
                    "Fn::FindInMap": [
                      "BedrockDefaults",
                      {
                        "Ref": "LLMBedrockModelId",
                      },
                      "QueryPromptTemplate",
                    ],
                  },
                  "Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.<br>Chat History: <br>{history}<br>Follow Up Input: {input}<br>Standalone question:",
                ],
              },
              "LLM_PROMPT_MAX_TOKEN_LIMIT": {
                "Fn::If": [
                  "LLMBedrock",
                  {
                    "Fn::FindInMap": [
                      "BedrockDefaults",
                      {
                        "Ref": "LLMBedrockModelId",
                      },
                      "MaxTokens",
                    ],
                  },
                  {
                    "Fn::If": [
                      "LLMSagemaker",
                      800,
                      "",
                    ],
                  },
                ],
              },
              "LLM_QA_ENABLE": {
                "Fn::If": [
                  "LLMEnable",
                  "true",
                  "false",
                ],
              },
              "LLM_QA_MODEL_PARAMS": {
                "Fn::If": [
                  "LLMSagemaker",
                  "{\\"temperature\\":0.01, \\"return_full_text\\":false, \\"max_new_tokens\\": 150}",
                  "{}",
                ],
              },
              "LLM_QA_NO_HITS_REGEX": {
                "Fn::If": [
                  "LLMBedrock",
                  {
                    "Fn::FindInMap": [
                      "BedrockDefaults",
                      {
                        "Ref": "LLMBedrockModelId",
                      },
                      "NoHitsRegex",
                    ],
                  },
                  "Sorry,  //remove comment to enable custom no match (no_hits) when LLM does not know the answer.",
                ],
              },
              "LLM_QA_PROMPT_TEMPLATE": {
                "Fn::If": [
                  "LLMBedrock",
                  {
                    "Fn::FindInMap": [
                      "BedrockDefaults",
                      {
                        "Ref": "LLMBedrockModelId",
                      },
                      "QAPromptTemplate",
                    ],
                  },
                  "Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer. Write the answer in up to 5 complete sentences.<br><br>{context}<br><br>Question: {query}<br>Helpful Answer:",
                ],
              },
            },
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "DefaultUserPoolJwksUrl": {
      "Properties": {
        "Description": "Default QnABot Setting - DO NOT MODIFY",
        "Type": "String",
        "Value": {
          "Fn::Join": [
            "",
            [
              "https://cognito-idp.",
              {
                "Ref": "AWS::Region",
              },
              ".amazonaws.com/",
              {
                "Ref": "UserPool",
              },
              "/.well-known/jwks.json",
            ],
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "Deployment": {
      "DependsOn": [
        "AlexaSchema",
        "BotPost",
        "BotGet",
        "HealthGet",
        "rootGet",
        "QuestionsGet",
        "QuestionsDelete",
        "QuestionHead",
        "QuestionPut",
        "QuestionsOptions",
        "QuestionDelete",
        "ProxyAnyGet",
        "ProxyAnyHead",
        "FontsProxyGet",
        "DesignerLoginResourceGet",
        "ClientLoginResourceGet",
        "JobsGet",
        "testallsList",
        "testallPut",
        "testallGet",
        "testallDelete",
        "exportsList",
        "exportPut",
        "exportGet",
        "exportDelete",
        "importsList",
        "importGet",
        "importDelete",
        "ExamplesGet",
        "photosList",
        "photoGet",
        "DocumentsList",
        "ExampleGet",
        "ExampleHead",
        "ServicesGet",
        "ImagesProxyGet",
        "InvokePermissionLexBuildLambdaStart",
        "InvokePermissionLexv2BotLambda",
        "InvokePermissionUtteranceLambda",
        "InvokePermissionESQidLambda",
        "InvokePermissionESCleaningLambda",
        "InvokePermissionESProxyLambda",
        "InvokePermissionLexProxyLambda",
        "InvokePermissionS3ListLambda",
        "InvokePermissionExampleS3ListLambda",
        "InvokePermissionExampleS3ListPhotoLambda",
        "InvokePermissionSchemaLambda",
      ],
      "Properties": {
        "LexV2BotLocaleIds": {
          "Ref": "LexV2BotLocaleIds",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
        "buildDate": Any<Date>,
        "restApiId": {
          "Ref": "API",
        },
        "stage": "prod",
      },
      "Type": "Custom::ApiDeployment",
    },
    "DesignerLogin": {
      "Properties": {
        "ClientId": {
          "Ref": "ClientDesigner",
        },
        "Domain": {
          "Ref": "CognitoDomain",
        },
        "LoginRedirectUrl": {
          "Fn::GetAtt": [
            "Urls",
            "Designer",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
        "adad": "adaad",
        "response_type": "code",
      },
      "Type": "Custom::CognitoUrl",
    },
    "DesignerLoginResource": {
      "Properties": {
        "ParentId": {
          "Ref": "Login",
        },
        "PathPart": "designer",
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "DesignerLoginResourceGet": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W59",
              "reason": "This ApiGateway Method does not need authorization setup",
            },
          ],
        },
      },
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.location": {
                  "Fn::Join": [
                    "",
                    [
                      "'",
                      {
                        "Fn::GetAtt": [
                          "DesignerLogin",
                          "loginUrl",
                        ],
                      },
                      "'",
                    ],
                  ],
                },
              },
              "StatusCode": "302",
            },
          ],
          "RequestTemplates": {
            "application/json": "{"statusCode": 302}",
          },
          "Type": "MOCK",
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.location": true,
            },
            "StatusCode": 302,
          },
        ],
        "ResourceId": {
          "Ref": "DesignerLoginResource",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "DocumentationVersion": {
      "DependsOn": [
        "BotDoc",
      ],
      "Properties": {
        "Description": "",
        "DocumentationVersion": "1.0",
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::DocumentationVersion",
    },
    "Documents": {
      "Properties": {
        "ParentId": {
          "Ref": "Examples",
        },
        "PathPart": "documents",
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "DocumentsList": {
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "StatusCode": 200,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*Exception.*",
              "StatusCode": 405,
            },
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#set ($root="https://\${!context.domainName}/\${!context.stage}")

{
    "bucket":"\${AssetBucket}",
    "prefix":"examples/documents/",
    "perpage":"$input.params('perpage')",
    "token":"$input.params('token')",
    "root":"$root"
}

",
            },
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ExampleS3ListLambda",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.date": true,
            },
            "StatusCode": 200,
          },
          {
            "StatusCode": 404,
          },
          {
            "StatusCode": 405,
          },
          {
            "StatusCode": 500,
          },
        ],
        "RequestParameters": {
          "method.request.querystring.perpage": false,
          "method.request.querystring.token": false,
        },
        "ResourceId": {
          "Ref": "Documents",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "ESCFNProxyLambda": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "This lambda function does not require to have ReservedConcurrentExecutions",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "LAMBDA_CONCURRENCY_CHECK",
            "LAMBDA_INSIDE_VPC",
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "BootstrapBucket",
          },
          "S3Key": {
            "Fn::Sub": "\${BootstrapPrefix}/lambda/proxy-es.zip",
          },
          "S3ObjectVersion": {
            "Ref": "ESProxyCodeVersion",
          },
        },
        "Environment": {
          "Variables": {
            "SETTINGS_TABLE": {
              "Ref": "SettingsTable",
            },
            "SOLUTION_ID": "SO0189",
            "SOLUTION_VERSION": "vx.x.x",
          },
        },
        "Handler": "resource.handler",
        "Layers": [
          {
            "Ref": "AwsSdkLayerLambdaLayer",
          },
          {
            "Ref": "CommonModulesLambdaLayer",
          },
          {
            "Ref": "CfnLambdaLayer",
          },
          {
            "Ref": "EsProxyLambdaLayer",
          },
          {
            "Ref": "QnABotCommonLambdaLayer",
          },
        ],
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "ESCFNProxyLambdaLogGroup",
          },
        },
        "MemorySize": "1408",
        "Role": {
          "Fn::GetAtt": [
            "ESProxyLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs",
        "Tags": [
          {
            "Key": "Type",
            "Value": "CustomResource",
          },
        ],
        "Timeout": 300,
        "TracingConfig": {
          "Fn::If": [
            "XRAYEnabled",
            {
              "Mode": "Active",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SecurityGroupIds": {
                "Ref": "VPCSecurityGroupIdList",
              },
              "SubnetIds": {
                "Ref": "VPCSubnetIdList",
              },
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "ESCFNProxyLambdaLogGroup": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
            "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Sub": "/aws/lambda/\${AWS::StackName}-ESCFNProxyLambda",
              },
              {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Fn::If": [
            "LogRetentionPeriodIsNotZero",
            {
              "Ref": "LogRetentionPeriod",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "ESCleaningLambda": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "This lambda function does not require to have ReservedConcurrentExecutions",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "LAMBDA_CONCURRENCY_CHECK",
            "LAMBDA_INSIDE_VPC",
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "BootstrapBucket",
          },
          "S3Key": {
            "Fn::Sub": "\${BootstrapPrefix}/lambda/proxy-es.zip",
          },
          "S3ObjectVersion": {
            "Ref": "ESProxyCodeVersion",
          },
        },
        "Environment": {
          "Variables": {
            "ES_ADDRESS": {
              "Fn::GetAtt": [
                "ESVar",
                "ESAddress",
              ],
            },
            "ES_INDEX": {
              "Fn::GetAtt": [
                "Var",
                "QnaIndex",
              ],
            },
            "FEEDBACK_DELETE_RANGE_MINUTES": {
              "Ref": "OpenSearchDashboardsRetentionMinutes",
            },
            "METRICS_DELETE_RANGE_MINUTES": {
              "Ref": "OpenSearchDashboardsRetentionMinutes",
            },
            "SOLUTION_ID": "SO0189",
            "SOLUTION_VERSION": "vx.x.x",
          },
        },
        "Handler": "index.cleanmetrics",
        "Layers": [
          {
            "Ref": "AwsSdkLayerLambdaLayer",
          },
          {
            "Ref": "CommonModulesLambdaLayer",
          },
          {
            "Ref": "EsProxyLambdaLayer",
          },
          {
            "Ref": "QnABotCommonLambdaLayer",
          },
        ],
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "ESCleaningLambdaLogGroup",
          },
        },
        "MemorySize": "1408",
        "Role": {
          "Fn::GetAtt": [
            "ESProxyLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs",
        "Tags": [
          {
            "Key": "Type",
            "Value": "Service",
          },
        ],
        "Timeout": 300,
        "TracingConfig": {
          "Fn::If": [
            "XRAYEnabled",
            {
              "Mode": "Active",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SecurityGroupIds": {
                "Ref": "VPCSecurityGroupIdList",
              },
              "SubnetIds": {
                "Ref": "VPCSubnetIdList",
              },
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "ESCleaningLambdaLogGroup": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
            "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Sub": "/aws/lambda/\${AWS::StackName}-ESCleaningLambda",
              },
              {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Fn::If": [
            "LogRetentionPeriodIsNotZero",
            {
              "Ref": "LogRetentionPeriod",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "ESCognitoRole": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W11",
              "reason": "This IAM role requires to have * resource on its permission policy",
            },
            {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray",
            },
            {
              "id": "F38",
              "reason": "This role policy is required to have * action in its policy with PassRole action",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "IAM_NO_INLINE_POLICY_CHECK",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "opensearchservice.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "cognito-idp:DescribeUserPool",
                    "cognito-idp:CreateUserPoolClient",
                    "cognito-idp:DeleteUserPoolClient",
                    "cognito-idp:DescribeUserPoolClient",
                    "cognito-idp:AdminInitiateAuth",
                    "cognito-idp:AdminUserGlobalSignOut",
                    "cognito-idp:ListUserPoolClients",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "UserPool",
                        "Arn",
                      ],
                    },
                  ],
                },
                {
                  "Action": [
                    "cognito-identity:DescribeIdentityPool",
                    "cognito-identity:UpdateIdentityPool",
                    "cognito-identity:GetIdentityPoolRoles",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:cognito-identity:\${AWS::Region}:\${AWS::AccountId}:identitypool/*",
                    },
                  ],
                },
                {
                  "Action": [
                    "cognito-identity:SetIdentityPoolRoles",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
                {
                  "Action": "iam:PassRole",
                  "Condition": {
                    "StringLike": {
                      "iam:PassedToService": "cognito-identity.amazonaws.com",
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/\${AWS::StackName}-*",
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "AWSQnaBotESCognitoAccess",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ESInfo": {
      "Condition": "DontCreateDomain",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ESProxyLambda",
            "Arn",
          ],
        },
        "name": {
          "Ref": "OpenSearchName",
        },
      },
      "Type": "Custom::ESProxy",
    },
    "ESInfoLambda": {
      "Condition": "DontCreateDomain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "This lambda function does not require to have ReservedConcurrentExecutions",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "LAMBDA_CONCURRENCY_CHECK",
            "LAMBDA_INSIDE_VPC",
          ],
        },
      },
      "Properties": {
        "Code": {
          "ZipFile": "/** ************************************************************************************************
*   Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.                             *
*   SPDX-License-Identifier: Apache-2.0                                                            *
 ************************************************************************************************ */

const { OpenSearchClient, DescribeDomainCommand } = require('@aws-sdk/client-opensearch');

const region = process.env.AWS_REGION;
const client = new OpenSearchClient({
    customUserAgent: [
        [\`AWSSOLUTION/\${process.env.SOLUTION_ID}/\${process.env.SOLUTION_VERSION}\`],
        [\`AWSSOLUTION-CAPABILITY/\${process.env.SOLUTION_ID}-C023/\${process.env.SOLUTION_VERSION}\`]
    ],
    region,
});

const SUCCESS = 'SUCCESS';
const FAILED = 'FAILED';
const https = require('https');
const { URL } = require('url');

async function send(event, context, responseStatus, responseData, physicalResourceId, noEcho) {
    return new Promise((resolve, reject) => {
        const responseBody = JSON.stringify({
            Status: responseStatus,
            Reason: \`See the details in CloudWatch Log Stream: \${context.logStreamName}\`,
            PhysicalResourceId: physicalResourceId || context.logStreamName,
            StackId: event.StackId,
            RequestId: event.RequestId,
            LogicalResourceId: event.LogicalResourceId,
            NoEcho: noEcho || false,
            Data: responseData,
        });

        console.log('Response body:\\n', responseBody);

        const parsedUrl = new URL(event.ResponseURL);

        const options = {
            hostname: parsedUrl.hostname,
            port: 443,
            path: parsedUrl.pathname + parsedUrl.search,
            method: 'PUT',
            headers: {
                'content-type': '',
                'content-length': responseBody.length,
            },
        };

        const request = https.request(options, (response) => {
            console.log(\`Status code: \${response.statusCode}\`);
            console.log(\`Status message: \${response.statusMessage}\`);
            response.on('end', () => {
                resolve();
            });
        });

        request.on('error', (error) => {
            console.log(\`send(..) failed executing https.request(..): \${error}\`);
            reject(error);
        });

        request.write(responseBody);
        request.end();
    });
}

exports.handler = async function (event, context) {
    console.log(JSON.stringify(event, null, 2));

    if (event.RequestType !== 'Delete') {
        const describeDomainCmd = new DescribeDomainCommand({
            DomainName: event.ResourceProperties.name,
        });
        try {
            const info = await client.send(describeDomainCmd);
            await send(event, context, SUCCESS, {
                Name: info.DomainStatus.DomainName,
                Arn: info.DomainStatus.ARN,
                Endpoint: info.DomainStatus.Endpoints,
            });
        } catch (e) {
            console.log(e);
            await send(event, context, FAILED);
        }
    } else {
        await send(event, context, SUCCESS);
    }
    context.done();
};
",
        },
        "Handler": "index.handler",
        "Layers": [
          {
            "Ref": "AwsSdkLayerLambdaLayer",
          },
        ],
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "ESInfoLambdaLogGroup",
          },
        },
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "ESProxyLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs",
        "Tags": [
          {
            "Key": "Type",
            "Value": "CustomResource",
          },
        ],
        "Timeout": 300,
        "TracingConfig": {
          "Fn::If": [
            "XRAYEnabled",
            {
              "Mode": "Active",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SecurityGroupIds": {
                "Ref": "VPCSecurityGroupIdList",
              },
              "SubnetIds": {
                "Ref": "VPCSubnetIdList",
              },
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "ESInfoLambdaLogGroup": {
      "Condition": "DontCreateDomain",
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
            "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Sub": "/aws/lambda/\${AWS::StackName}-ESInfoLambda",
              },
              {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Fn::If": [
            "LogRetentionPeriodIsNotZero",
            {
              "Ref": "LogRetentionPeriod",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "ESLoggingLambda": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "This lambda function does not require to have ReservedConcurrentExecutions",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "LAMBDA_CONCURRENCY_CHECK",
            "LAMBDA_INSIDE_VPC",
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "BootstrapBucket",
          },
          "S3Key": {
            "Fn::Sub": "\${BootstrapPrefix}/lambda/proxy-es.zip",
          },
          "S3ObjectVersion": {
            "Ref": "ESProxyCodeVersion",
          },
        },
        "Environment": {
          "Variables": {
            "FIREHOSE_NAME": {
              "Ref": "GeneralKinesisFirehose",
            },
            "SOLUTION_ID": "SO0189",
            "SOLUTION_VERSION": "vx.x.x",
          },
        },
        "Handler": "index.logging",
        "Layers": [
          {
            "Ref": "AwsSdkLayerLambdaLayer",
          },
          {
            "Ref": "CommonModulesLambdaLayer",
          },
          {
            "Ref": "EsProxyLambdaLayer",
          },
          {
            "Ref": "QnABotCommonLambdaLayer",
          },
        ],
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "ESLoggingLambdaLogGroup",
          },
        },
        "MemorySize": "1408",
        "Role": {
          "Fn::GetAtt": [
            "ESLoggingLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs",
        "Tags": [
          {
            "Key": "Type",
            "Value": "Logging",
          },
        ],
        "Timeout": 300,
        "TracingConfig": {
          "Fn::If": [
            "XRAYEnabled",
            {
              "Mode": "Active",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SecurityGroupIds": {
                "Ref": "VPCSecurityGroupIdList",
              },
              "SubnetIds": {
                "Ref": "VPCSubnetIdList",
              },
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "ESLoggingLambdaLogGroup": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
            "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Sub": "/aws/lambda/\${AWS::StackName}-ESLoggingLambda",
              },
              {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Fn::If": [
            "LogRetentionPeriodIsNotZero",
            {
              "Ref": "LogRetentionPeriod",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "ESLoggingLambdaRole": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W11",
              "reason": "This IAM role requires to have * resource on its permission policy",
            },
            {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "IAM_NO_INLINE_POLICY_CHECK",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
                {
                  "Action": [
                    "ec2:CreateNetworkInterface",
                    "ec2:AssignPrivateIpAddresses",
                    "ec2:UnassignPrivateIpAddresses",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterface",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "lambdaVPCAccessExecutionRole",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "xray:PutTraceSegments",
                    "xray:PutTelemetryRecords",
                    "xray:GetSamplingRules",
                    "xray:GetSamplingTargets",
                    "xray:GetSamplingStatisticSummaries",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*",
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "xrayDaemonWriteAccess",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "lambda:InvokeFunction",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:lambda:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":function:qna-*",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:lambda:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":function:QNA-*",
                        ],
                      ],
                    },
                  ],
                },
                {
                  "Action": [
                    "comprehend:DetectPiiEntities",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*",
                  ],
                },
                {
                  "Action": [
                    "firehose:PutRecord",
                    "firehose:PutRecordBatch",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "GeneralKinesisFirehose",
                        "Arn",
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaGeneralKinesisFirehoseQNALambda",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ESProxyCodeVersion": {
      "Properties": {
        "Bucket": {
          "Ref": "BootstrapBucket",
        },
        "BuildDate": Any<String>,
        "Key": {
          "Fn::Sub": "\${BootstrapPrefix}/lambda/proxy-es.zip",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3Version",
    },
    "ESProxyLambda": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "This lambda function does not require to have ReservedConcurrentExecutions",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "LAMBDA_CONCURRENCY_CHECK",
            "LAMBDA_INSIDE_VPC",
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "BootstrapBucket",
          },
          "S3Key": {
            "Fn::Sub": "\${BootstrapPrefix}/lambda/proxy-es.zip",
          },
          "S3ObjectVersion": {
            "Ref": "ESProxyCodeVersion",
          },
        },
        "Environment": {
          "Variables": {
            "EMBEDDINGS_API": {
              "Ref": "EmbeddingsApi",
            },
            "EMBEDDINGS_LAMBDA_ARN": {
              "Ref": "EmbeddingsLambdaArn",
            },
            "ES_ADDRESS": {
              "Fn::GetAtt": [
                "ESVar",
                "ESAddress",
              ],
            },
            "ES_INDEX": {
              "Fn::GetAtt": [
                "Var",
                "QnaIndex",
              ],
            },
            "ES_TYPE": {
              "Fn::GetAtt": [
                "Var",
                "QnAType",
              ],
            },
            "SETTINGS_TABLE": {
              "Ref": "SettingsTable",
            },
            "SOLUTION_ID": "SO0189",
            "SOLUTION_VERSION": "vx.x.x",
          },
        },
        "Handler": "index.handler",
        "Layers": [
          {
            "Ref": "AwsSdkLayerLambdaLayer",
          },
          {
            "Ref": "CommonModulesLambdaLayer",
          },
          {
            "Ref": "EsProxyLambdaLayer",
          },
          {
            "Ref": "QnABotCommonLambdaLayer",
          },
        ],
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "ESProxyLambdaLogGroup",
          },
        },
        "MemorySize": "1408",
        "Role": {
          "Fn::GetAtt": [
            "ESProxyLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs",
        "Tags": [
          {
            "Key": "Type",
            "Value": "Service",
          },
        ],
        "Timeout": 300,
        "TracingConfig": {
          "Fn::If": [
            "XRAYEnabled",
            {
              "Mode": "Active",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SecurityGroupIds": {
                "Ref": "VPCSecurityGroupIdList",
              },
              "SubnetIds": {
                "Ref": "VPCSubnetIdList",
              },
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "ESProxyLambdaLogGroup": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
            "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Sub": "/aws/lambda/\${AWS::StackName}-ESProxyLambdaLogGroup",
              },
              {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Fn::If": [
            "LogRetentionPeriodIsNotZero",
            {
              "Ref": "LogRetentionPeriod",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "ESProxyLambdaRole": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W11",
              "reason": "This IAM role requires to have * resource on its permission policy",
            },
            {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray",
            },
            {
              "id": "W76",
              "reason": "This role is required to have high SPCM",
            },
            {
              "id": "F3",
              "reason": "This role policy is required to have * action in its policy",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "IAM_NO_INLINE_POLICY_CHECK",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Ref": "QueryPolicy",
          },
        ],
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
                {
                  "Action": [
                    "ec2:CreateNetworkInterface",
                    "ec2:AssignPrivateIpAddresses",
                    "ec2:UnassignPrivateIpAddresses",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterface",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "lambdaVPCAccessExecutionRole",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "xray:PutTraceSegments",
                    "xray:PutTelemetryRecords",
                    "xray:GetSamplingRules",
                    "xray:GetSamplingTargets",
                    "xray:GetSamplingStatisticSummaries",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*",
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "xrayDaemonWriteAccess",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "translate:TranslateText",
                    "translate:GetTerminology",
                    "translate:ListTerminologies",
                    "comprehend:DetectDominantLanguage",
                    "cloudwatch:GetMetricStatistics",
                    "cloudwatch:ListMetrics",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "translateReadOnly",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "polly:SynthesizeSpeech",
                    "logs:DescribeLogGroups",
                    "cloudwatch:DescribeAlarms",
                    "kms:DescribeKey",
                    "s3:GetBucketLocation",
                    "lambda:GetPolicy",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:kms:\${AWS::Region}:\${AWS::AccountId}:key/*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:polly:\${AWS::Region}:\${AWS::AccountId}:lexicon/*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lambda:\${AWS::Region}:\${AWS::AccountId}:function:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:cloudwatch:\${AWS::Region}:\${AWS::AccountId}:alarm:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:s3:::*",
                    },
                  ],
                },
                {
                  "Action": [
                    "s3:ListAllMyBuckets",
                    "lambda:ListFunctions",
                    "cloudwatch:DescribeAlarmsForMetric",
                    "kms:ListAliases",
                    "iam:ListRoles",
                    "cloudwatch:GetMetricStatistics",
                    "kendra:ListIndices",
                    "polly:DescribeVoices",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
                {
                  "Action": "lex:*",
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:intent:*:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:slottype:*:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot:*:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot-channel:*:*",
                    },
                  ],
                },
                {
                  "Action": [
                    "lex:CreateUploadUrl",
                    "lex:ListBuiltInSlotTypes",
                    "lex:ListBots",
                    "lex:ListBuiltInIntents",
                    "lex:ListImports",
                    "lex:ListExports",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
                {
                  "Action": "lex:*",
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot-alias/*/*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot-alias/*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot/*",
                    },
                  ],
                },
                {
                  "Action": "lex:*",
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:intent:*:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:slottype:*:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot:*:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot-channel:*:*",
                    },
                  ],
                },
                {
                  "Action": [
                    "lex:CreateUploadUrl",
                    "lex:ListBuiltInSlotTypes",
                    "lex:ListBots",
                    "lex:ListBuiltInIntents",
                    "lex:ListImports",
                    "lex:ListExports",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
                {
                  "Action": "lex:*",
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot-alias/*/*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot/*",
                    },
                  ],
                },
                {
                  "Action": [
                    "lambda:AddPermission",
                    "lambda:RemovePermission",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "lambda:Principal": "lex.amazonaws.com",
                    },
                  },
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": "arn:\${AWS::Partition}:lambda:\${AWS::Region}:\${AWS::AccountId}:function:AmazonLex*",
                  },
                },
                {
                  "Action": [
                    "iam:GetRole",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
                    "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels",
                    "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
                    "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*",
                  ],
                },
                {
                  "Action": [
                    "iam:CreateServiceLinkedRole",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "iam:AWSServiceName": "lex.amazonaws.com",
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
                  ],
                },
                {
                  "Action": [
                    "iam:CreateServiceLinkedRole",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "iam:AWSServiceName": "channels.lex.amazonaws.com",
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels",
                  ],
                },
                {
                  "Action": [
                    "iam:CreateServiceLinkedRole",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "iam:AWSServiceName": "lexv2.amazonaws.com",
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
                  ],
                },
                {
                  "Action": [
                    "iam:CreateServiceLinkedRole",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "iam:AWSServiceName": "channels.lexv2.amazonaws.com",
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*",
                  ],
                },
                {
                  "Action": [
                    "iam:DeleteServiceLinkedRole",
                    "iam:GetServiceLinkedRoleDeletionStatus",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
                    "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels",
                    "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
                    "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*",
                  ],
                },
                {
                  "Action": [
                    "iam:PassRole",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "iam:PassedToService": [
                        "lex.amazonaws.com",
                      ],
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
                  ],
                },
                {
                  "Action": [
                    "iam:PassRole",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "iam:PassedToService": [
                        "lexv2.amazonaws.com",
                      ],
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
                  ],
                },
                {
                  "Action": [
                    "iam:PassRole",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "iam:PassedToService": [
                        "channels.lexv2.amazonaws.com",
                      ],
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*",
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "AWSQnaBotLexFullAccess",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "ssm:GetParameter",
                    "ssm:GetParameters",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Fn::Sub": "\${AWS::Partition}:",
                          },
                          "ssm:",
                          {
                            "Fn::Sub": "\${AWS::Region}:",
                          },
                          {
                            "Fn::Sub": "\${AWS::AccountId}:",
                          },
                          "parameter/",
                          {
                            "Ref": "DefaultUserPoolJwksUrl",
                          },
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "ParamStorePolicy",
          },
          {
            "Fn::If": [
              "EmbeddingsEnable",
              {
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Fn::If": [
                        "EmbeddingsLambdaArn",
                        {
                          "Action": [
                            "lambda:InvokeFunction",
                          ],
                          "Effect": "Allow",
                          "Resource": [
                            {
                              "Ref": "EmbeddingsLambdaArn",
                            },
                          ],
                        },
                        {
                          "Ref": "AWS::NoValue",
                        },
                      ],
                    },
                    {
                      "Fn::If": [
                        "EmbeddingsBedrock",
                        {
                          "Action": [
                            "bedrock:InvokeModel",
                          ],
                          "Effect": "Allow",
                          "Resource": [
                            {
                              "Fn::If": [
                                "EmbeddingsBedrock",
                                {
                                  "Fn::Sub": [
                                    "arn:\${AWS::Partition}:bedrock:\${AWS::Region}::foundation-model/\${ModelId}",
                                    {
                                      "ModelId": {
                                        "Fn::FindInMap": [
                                          "BedrockDefaults",
                                          {
                                            "Ref": "EmbeddingsBedrockModelId",
                                          },
                                          "ModelID",
                                        ],
                                      },
                                    },
                                  ],
                                },
                                {
                                  "Ref": "AWS::NoValue",
                                },
                              ],
                            },
                          ],
                        },
                        {
                          "Ref": "AWS::NoValue",
                        },
                      ],
                    },
                  ],
                  "Version": "2012-10-17",
                },
                "PolicyName": "EmbeddingsPolicy",
              },
              {
                "Ref": "AWS::NoValue",
              },
            ],
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "s3:GetObject",
                    "s3:ListBucket",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:s3:::QNA*/*",
                    "arn:aws:s3:::qna*/*",
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "S3QNABucketReadAccess",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "dynamodb:Scan",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "SettingsTable",
                        "Arn",
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "SettingsTableReadAccess",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ESQidLambda": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "This lambda function does not require to have ReservedConcurrentExecutions",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "LAMBDA_CONCURRENCY_CHECK",
            "LAMBDA_INSIDE_VPC",
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "BootstrapBucket",
          },
          "S3Key": {
            "Fn::Sub": "\${BootstrapPrefix}/lambda/proxy-es.zip",
          },
          "S3ObjectVersion": {
            "Ref": "ESProxyCodeVersion",
          },
        },
        "Environment": {
          "Variables": {
            "ES_ADDRESS": {
              "Fn::GetAtt": [
                "ESVar",
                "ESAddress",
              ],
            },
            "ES_INDEX": {
              "Fn::GetAtt": [
                "Var",
                "QnaIndex",
              ],
            },
            "SOLUTION_ID": "SO0189",
            "SOLUTION_VERSION": "vx.x.x",
          },
        },
        "Handler": "index.qid",
        "Layers": [
          {
            "Ref": "AwsSdkLayerLambdaLayer",
          },
          {
            "Ref": "CommonModulesLambdaLayer",
          },
          {
            "Ref": "EsProxyLambdaLayer",
          },
          {
            "Ref": "QnABotCommonLambdaLayer",
          },
        ],
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "ESQidLambdaLogGroup",
          },
        },
        "MemorySize": "1408",
        "Role": {
          "Fn::GetAtt": [
            "ESProxyLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs",
        "Tags": [
          {
            "Key": "Type",
            "Value": "Service",
          },
        ],
        "Timeout": 300,
        "TracingConfig": {
          "Fn::If": [
            "XRAYEnabled",
            {
              "Mode": "Active",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SecurityGroupIds": {
                "Ref": "VPCSecurityGroupIdList",
              },
              "SubnetIds": {
                "Ref": "VPCSubnetIdList",
              },
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "ESQidLambdaLogGroup": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
            "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Sub": "/aws/lambda/\${AWS::StackName}-ESQidLambda",
              },
              {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Fn::If": [
            "LogRetentionPeriodIsNotZero",
            {
              "Ref": "LogRetentionPeriod",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "ESQueryLambda": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "This lambda function does not require to have ReservedConcurrentExecutions",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "LAMBDA_CONCURRENCY_CHECK",
            "LAMBDA_INSIDE_VPC",
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "BootstrapBucket",
          },
          "S3Key": {
            "Fn::Sub": "\${BootstrapPrefix}/lambda/proxy-es.zip",
          },
          "S3ObjectVersion": {
            "Ref": "ESProxyCodeVersion",
          },
        },
        "Environment": {
          "Variables": {
            "Fn::If": [
              "BuildExamples",
              {
                "EXTCreateRecentTopicsResponse": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.EXTCreateRecentTopicsResponse",
                  ],
                },
                "EXTCustomJSHook": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.EXTCustomJSHook",
                  ],
                },
                "EXTCustomPYHook": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.EXTCustomPYHook",
                  ],
                },
                "ExampleJSLambdaQuiz": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.ExampleJSLambdaQuiz",
                  ],
                },
                "ExampleJSLambdahook": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.ExampleJSLambdahook",
                  ],
                },
                "ExamplePYTHONLambdaBotBroker": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.ExamplePYTHONLambdaBotBroker",
                  ],
                },
                "ExamplePYTHONLambdaConnectCallback": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.ExamplePYTHONLambdaConnectCallback",
                  ],
                },
                "ExamplePYTHONLambdaFeedback": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.ExamplePYTHONLambdaFeedback",
                  ],
                },
                "ExamplePYTHONLambdaNext": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.ExamplePYTHONLambdaNext",
                  ],
                },
                "ExamplePYTHONLambdaPrevious": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.ExamplePYTHONLambdaPrevious",
                  ],
                },
                "ExamplePYTHONLambdahello": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.ExamplePYTHONLambdahello",
                  ],
                },
                "SETTINGS_TABLE": {
                  "Ref": "SettingsTable",
                },
                "SOLUTION_ID": "SO0189",
                "SOLUTION_VERSION": "vx.x.x",
              },
              {
                "SOLUTION_ID": "SO0189",
                "SOLUTION_VERSION": "vx.x.x",
              },
            ],
          },
        },
        "Handler": "index.query",
        "Layers": [
          {
            "Ref": "AwsSdkLayerLambdaLayer",
          },
          {
            "Ref": "CommonModulesLambdaLayer",
          },
          {
            "Ref": "EsProxyLambdaLayer",
          },
          {
            "Ref": "QnABotCommonLambdaLayer",
          },
        ],
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "ESQueryLambdaLogGroup",
          },
        },
        "MemorySize": "1408",
        "Role": {
          "Fn::GetAtt": [
            "ESProxyLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs",
        "Tags": [
          {
            "Key": "Type",
            "Value": "Query",
          },
        ],
        "Timeout": 300,
        "TracingConfig": {
          "Fn::If": [
            "XRAYEnabled",
            {
              "Mode": "Active",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SecurityGroupIds": {
                "Ref": "VPCSecurityGroupIdList",
              },
              "SubnetIds": {
                "Ref": "VPCSubnetIdList",
              },
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "ESQueryLambdaLogGroup": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
            "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Sub": "/aws/lambda/\${AWS::StackName}-ESQueryLambda",
              },
              {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Fn::If": [
            "LogRetentionPeriodIsNotZero",
            {
              "Ref": "LogRetentionPeriod",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "ESVar": {
      "Properties": {
        "ESAddress": {
          "Fn::If": [
            "CreateDomain",
            {
              "Fn::GetAtt": [
                "OpensearchDomain",
                "DomainEndpoint",
              ],
            },
            {
              "Fn::GetAtt": [
                "ESInfo",
                "Endpoint",
              ],
            },
          ],
        },
        "ESArn": {
          "Fn::If": [
            "CreateDomain",
            {
              "Fn::GetAtt": [
                "OpensearchDomain",
                "DomainArn",
              ],
            },
            {
              "Fn::GetAtt": [
                "ESInfo",
                "Arn",
              ],
            },
          ],
        },
        "ESDomain": {
          "Fn::If": [
            "CreateDomain",
            {
              "Ref": "OpensearchDomain",
            },
            {
              "Ref": "OpenSearchName",
            },
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
      },
      "Type": "Custom::Variable",
    },
    "ESWarmerCodeVersion": {
      "Properties": {
        "Bucket": {
          "Ref": "BootstrapBucket",
        },
        "BuildDate": Any<String>,
        "Key": {
          "Fn::Sub": "\${BootstrapPrefix}/lambda/warmer.zip",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3Version",
    },
    "ESWarmerLambda": {
      "DependsOn": [
        "ESWarmerCodeVersion",
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "This lambda function does not require to have ReservedConcurrentExecutions",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "LAMBDA_CONCURRENCY_CHECK",
            "LAMBDA_INSIDE_VPC",
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "BootstrapBucket",
          },
          "S3Key": {
            "Fn::Sub": "\${BootstrapPrefix}/lambda/warmer.zip",
          },
          "S3ObjectVersion": {
            "Ref": "ESWarmerCodeVersion",
          },
        },
        "Environment": {
          "Variables": {
            "REPEAT_COUNT": "4",
            "SETTINGS_TABLE": {
              "Ref": "SettingsTable",
            },
            "SOLUTION_ID": "SO0189",
            "SOLUTION_VERSION": "vx.x.x",
            "TARGET_INDEX": {
              "Fn::GetAtt": [
                "Var",
                "QnaIndex",
              ],
            },
            "TARGET_PATH": "_search",
            "TARGET_URL": {
              "Fn::GetAtt": [
                "ESVar",
                "ESAddress",
              ],
            },
          },
        },
        "Handler": "index.warmer",
        "Layers": [
          {
            "Ref": "AwsSdkLayerLambdaLayer",
          },
          {
            "Ref": "CommonModulesLambdaLayer",
          },
          {
            "Ref": "EsProxyLambdaLayer",
          },
          {
            "Ref": "QnABotCommonLambdaLayer",
          },
        ],
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "ESWarmerLambdaLogGroup",
          },
        },
        "MemorySize": "512",
        "Role": {
          "Fn::GetAtt": [
            "WarmerLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs",
        "Tags": [
          {
            "Key": "Type",
            "Value": "Warmer",
          },
        ],
        "Timeout": 300,
        "TracingConfig": {
          "Fn::If": [
            "XRAYEnabled",
            {
              "Mode": "Active",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SecurityGroupIds": {
                "Ref": "VPCSecurityGroupIdList",
              },
              "SubnetIds": {
                "Ref": "VPCSubnetIdList",
              },
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "ESWarmerLambdaLogGroup": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
            "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Sub": "/aws/lambda/\${AWS::StackName}-ESWarmerLambda",
              },
              {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Fn::If": [
            "LogRetentionPeriodIsNotZero",
            {
              "Ref": "LogRetentionPeriod",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "ESWarmerRule": {
      "Properties": {
        "ScheduleExpression": "rate(1 minute)",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "ESWarmerLambda",
                "Arn",
              ],
            },
            "Id": "ESWarmerScheduler",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "ESWarmerRuleInvokeLambdaPermission": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ESWarmerLambda",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "ESWarmerRule",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "EsProxyLambdaLayer": {
      "Properties": {
        "CompatibleRuntimes": [
          "nodejs",
        ],
        "Content": {
          "S3Bucket": {
            "Ref": "BootstrapBucket",
          },
          "S3Key": {
            "Fn::Sub": "\${BootstrapPrefix}/lambda/es-proxy-layer.zip",
          },
          "S3ObjectVersion": {
            "Ref": "EsProxyLayerCodeVersion",
          },
        },
        "LayerName": {
          "Fn::Join": [
            "-",
            [
              "EsProxy",
              {
                "Fn::Select": [
                  "0",
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Ref": "AWS::StackName",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::LayerVersion",
    },
    "EsProxyLayerCodeVersion": {
      "Properties": {
        "Bucket": {
          "Ref": "BootstrapBucket",
        },
        "BuildDate": Any<String>,
        "Key": {
          "Fn::Sub": "\${BootstrapPrefix}/lambda/es-proxy-layer.zip",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3Version",
    },
    "Example": {
      "Properties": {
        "ParentId": {
          "Ref": "Documents",
        },
        "PathPart": "{proxy+}",
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "ExampleGet": {
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Credentials": {
            "Fn::GetAtt": [
              "S3AccessRole",
              "Arn",
            ],
          },
          "IntegrationHttpMethod": "GET",
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type",
              },
              "StatusCode": 200,
            },
            {
              "ResponseTemplates": {
                "application/xml": "{"error":"Not Found"}",
              },
              "SelectionPattern": "403",
              "StatusCode": 404,
            },
          ],
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy",
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":s3:path/",
                {
                  "Ref": "AssetBucket",
                },
                "/examples/documents/{proxy}",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.content-type": false,
            },
            "StatusCode": 200,
          },
          {
            "StatusCode": 400,
          },
          {
            "StatusCode": 404,
          },
        ],
        "RequestParameters": {
          "method.request.path.proxy": false,
        },
        "ResourceId": {
          "Ref": "Example",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "ExampleHead": {
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "HEAD",
        "Integration": {
          "Credentials": {
            "Fn::GetAtt": [
              "S3AccessRole",
              "Arn",
            ],
          },
          "IntegrationHttpMethod": "HEAD",
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type",
              },
              "StatusCode": 200,
            },
            {
              "ResponseTemplates": {
                "application/xml": "{"error":"Not Found"}",
              },
              "SelectionPattern": "403",
              "StatusCode": 404,
            },
          ],
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy",
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":s3:path/",
                {
                  "Ref": "AssetBucket",
                },
                "/examples/documents/{proxy}",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.content-type": false,
            },
            "StatusCode": 200,
          },
          {
            "StatusCode": 400,
          },
          {
            "StatusCode": 404,
          },
        ],
        "RequestParameters": {
          "method.request.path.proxy": false,
        },
        "ResourceId": {
          "Ref": "Example",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "ExampleS3ListLambda": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "This lambda function does not require to have ReservedConcurrentExecutions",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "LAMBDA_CONCURRENCY_CHECK",
            "LAMBDA_INSIDE_VPC",
          ],
        },
      },
      "Properties": {
        "Code": {
          "ZipFile": "/** ************************************************************************************************
*   Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.                             *
*   SPDX-License-Identifier: Apache-2.0                                                            *
 ************************************************************************************************ */

const { S3Client, ListObjectsCommand } = require('@aws-sdk/client-s3');
const customSdkConfig = require('sdk-config/customSdkConfig');
const region = process.env.AWS_REGION;
const s3 = new S3Client(customSdkConfig('C018', { region }));

exports.photos = (event, context, callback) => {
    console.log('Received event:', JSON.stringify(event, null, 2));

    return s3.send(new ListObjectsCommand({
        Bucket: event.bucket,
        Prefix: event.prefix,
        MaxKeys: event.perpage || 100,
        Marker: event.token || null,
    }))
        .then((x) => {
            console.log('s3 response for photos:', JSON.stringify(x, null, 2));
            const photos = x?.Contents?.map((value) => {
                const key = value.Key.split('/').pop();
                return \`\${event.root}/examples/photos/\${key}\`;
            }, []);
            callback(null, {
                token: x.NextMarker,
                photos,
            });
        })
        .catch((e) => callback(JSON.stringify({
            type: '[InternalServiceError]',
            data: e,
        })));
};

exports.documents = (event, context, callback) => {
    console.log('Received event:', JSON.stringify(event, null, 2));

    return s3.send(new ListObjectsCommand({
        Bucket: event.bucket,
        Prefix: event.prefix,
        MaxKeys: event.perpage || 100,
        Marker: event.token || null,
    }))
        .then((x) => {
            console.log('s3 response for documents:', JSON.stringify(x, null, 2));
            const examples = x?.Contents?.reduce((accum, value) => {
                let key = value.Key.split('/').pop().split('.');
                const ext = key.length > 1 ? key.pop() : 'txt';
                key = key[0];
                const href = \`\${event.root}/examples/documents/\${key}.\${ext}\`;
                if (!accum[key]) {
                    accum[key] = { id: key };
                }
                if (ext === 'json') {
                    accum[key].document = { href };
                } else {
                    accum[key].description = { href };
                }
                return accum;
            }, []);

            callback(null, {
                token: x.NextMarker,
                examples: examples ? Object.keys(examples).map((x) => examples[x]) : [],
            });
        })
        .catch((e) => callback(JSON.stringify({
            type: '[InternalServiceError]',
            data: e,
        })));
};
",
        },
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0189",
            "SOLUTION_VERSION": "vx.x.x",
          },
        },
        "Handler": "index.documents",
        "Layers": [
          {
            "Ref": "AwsSdkLayerLambdaLayer",
          },
        ],
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "ExampleS3ListLambdaLogGroup",
          },
        },
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "S3ListLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs",
        "Tags": [
          {
            "Key": "Type",
            "Value": "Api",
          },
        ],
        "Timeout": 300,
        "TracingConfig": {
          "Fn::If": [
            "XRAYEnabled",
            {
              "Mode": "Active",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SecurityGroupIds": {
                "Ref": "VPCSecurityGroupIdList",
              },
              "SubnetIds": {
                "Ref": "VPCSubnetIdList",
              },
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "ExampleS3ListLambdaLogGroup": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
            "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Sub": "/aws/lambda/\${AWS::StackName}-ExampleS3ListLambda",
              },
              {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Fn::If": [
            "LogRetentionPeriodIsNotZero",
            {
              "Ref": "LogRetentionPeriod",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "ExampleS3ListPhotoLambda": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "This lambda function does not require to have ReservedConcurrentExecutions",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "LAMBDA_CONCURRENCY_CHECK",
            "LAMBDA_INSIDE_VPC",
          ],
        },
      },
      "Properties": {
        "Code": {
          "ZipFile": "/** ************************************************************************************************
*   Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.                             *
*   SPDX-License-Identifier: Apache-2.0                                                            *
 ************************************************************************************************ */

const { S3Client, ListObjectsCommand } = require('@aws-sdk/client-s3');
const customSdkConfig = require('sdk-config/customSdkConfig');
const region = process.env.AWS_REGION;
const s3 = new S3Client(customSdkConfig('C018', { region }));

exports.photos = (event, context, callback) => {
    console.log('Received event:', JSON.stringify(event, null, 2));

    return s3.send(new ListObjectsCommand({
        Bucket: event.bucket,
        Prefix: event.prefix,
        MaxKeys: event.perpage || 100,
        Marker: event.token || null,
    }))
        .then((x) => {
            console.log('s3 response for photos:', JSON.stringify(x, null, 2));
            const photos = x?.Contents?.map((value) => {
                const key = value.Key.split('/').pop();
                return \`\${event.root}/examples/photos/\${key}\`;
            }, []);
            callback(null, {
                token: x.NextMarker,
                photos,
            });
        })
        .catch((e) => callback(JSON.stringify({
            type: '[InternalServiceError]',
            data: e,
        })));
};

exports.documents = (event, context, callback) => {
    console.log('Received event:', JSON.stringify(event, null, 2));

    return s3.send(new ListObjectsCommand({
        Bucket: event.bucket,
        Prefix: event.prefix,
        MaxKeys: event.perpage || 100,
        Marker: event.token || null,
    }))
        .then((x) => {
            console.log('s3 response for documents:', JSON.stringify(x, null, 2));
            const examples = x?.Contents?.reduce((accum, value) => {
                let key = value.Key.split('/').pop().split('.');
                const ext = key.length > 1 ? key.pop() : 'txt';
                key = key[0];
                const href = \`\${event.root}/examples/documents/\${key}.\${ext}\`;
                if (!accum[key]) {
                    accum[key] = { id: key };
                }
                if (ext === 'json') {
                    accum[key].document = { href };
                } else {
                    accum[key].description = { href };
                }
                return accum;
            }, []);

            callback(null, {
                token: x.NextMarker,
                examples: examples ? Object.keys(examples).map((x) => examples[x]) : [],
            });
        })
        .catch((e) => callback(JSON.stringify({
            type: '[InternalServiceError]',
            data: e,
        })));
};
",
        },
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0189",
            "SOLUTION_VERSION": "vx.x.x",
          },
        },
        "Handler": "index.photos",
        "Layers": [
          {
            "Ref": "AwsSdkLayerLambdaLayer",
          },
        ],
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "ExampleS3ListPhotoLambdaLogGroup",
          },
        },
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "S3ListLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs",
        "Tags": [
          {
            "Key": "Type",
            "Value": "Api",
          },
        ],
        "Timeout": 300,
        "TracingConfig": {
          "Fn::If": [
            "XRAYEnabled",
            {
              "Mode": "Active",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SecurityGroupIds": {
                "Ref": "VPCSecurityGroupIdList",
              },
              "SubnetIds": {
                "Ref": "VPCSubnetIdList",
              },
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "ExampleS3ListPhotoLambdaLogGroup": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
            "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Sub": "/aws/lambda/\${AWS::StackName}-ExampleS3ListPhotoLambda",
              },
              {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Fn::If": [
            "LogRetentionPeriodIsNotZero",
            {
              "Ref": "LogRetentionPeriod",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "Examples": {
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "API",
            "RootResourceId",
          ],
        },
        "PathPart": "examples",
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "ExamplesGet": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W59",
              "reason": "This ApiGateway Method does not need authorization setup",
            },
          ],
        },
      },
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($root="https://\${!context.domainName}/\${!context.stage}")


{
    "_links":{
        "documents":{
            "href":"$root/examples/documents"
        },
        "photos":{
            "href":"$root/examples/photos"
        }
    }
}

",
                },
              },
              "StatusCode": "200",
            },
          ],
          "RequestTemplates": {
            "application/json": "{"statusCode": 200}",
          },
          "Type": "MOCK",
        },
        "MethodResponses": [
          {
            "StatusCode": 200,
          },
        ],
        "ResourceId": {
          "Ref": "Examples",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "ExamplesStack": {
      "Condition": "BuildExamples",
      "Properties": {
        "Parameters": {
          "ApiUrlName": {
            "Fn::GetAtt": [
              "ApiUrl",
              "Name",
            ],
          },
          "AssetBucket": {
            "Ref": "AssetBucket",
          },
          "AwsSdkLayerLambdaLayer": {
            "Ref": "AwsSdkLayerLambdaLayer",
          },
          "BootstrapBucket": {
            "Ref": "BootstrapBucket",
          },
          "BootstrapPrefix": {
            "Ref": "BootstrapPrefix",
          },
          "CFNLambda": {
            "Fn::GetAtt": [
              "CFNLambda",
              "Arn",
            ],
          },
          "CFNLambdaRole": {
            "Fn::GetAtt": [
              "CFNLambdaRole",
              "Arn",
            ],
          },
          "ESAddress": {
            "Fn::GetAtt": [
              "ESVar",
              "ESAddress",
            ],
          },
          "FeedbackKinesisFirehose": {
            "Fn::GetAtt": [
              "FeedbackKinesisFirehose",
              "Arn",
            ],
          },
          "FeedbackKinesisFirehoseName": {
            "Ref": "FeedbackKinesisFirehose",
          },
          "FulfillmentLambdaRole": {
            "Ref": "FulfillmentLambdaRole",
          },
          "Index": {
            "Fn::GetAtt": [
              "Var",
              "QnaIndex",
            ],
          },
          "InstallLexResponseBots": {
            "Ref": "InstallLexResponseBots",
          },
          "LogRetentionPeriod": {
            "Ref": "LogRetentionPeriod",
          },
          "QIDLambdaArn": {
            "Fn::GetAtt": [
              "ESQidLambda",
              "Arn",
            ],
          },
          "QnAType": {
            "Fn::GetAtt": [
              "Var",
              "QnAType",
            ],
          },
          "QuizType": {
            "Fn::GetAtt": [
              "Var",
              "QuizType",
            ],
          },
          "S3Clean": {
            "Fn::GetAtt": [
              "S3Clean",
              "Arn",
            ],
          },
          "VPCSecurityGroupIdList": {
            "Fn::Join": [
              ",",
              {
                "Ref": "VPCSecurityGroupIdList",
              },
            ],
          },
          "VPCSubnetIdList": {
            "Fn::Join": [
              ",",
              {
                "Ref": "VPCSubnetIdList",
              },
            ],
          },
          "XraySetting": {
            "Ref": "XraySetting",
          },
        },
        "TemplateURL": {
          "Fn::Sub": "https://\${BootstrapBucket}.s3.\${AWS::Region}.amazonaws.com/\${BootstrapPrefix}/templates/examples.json",
        },
      },
      "Type": "AWS::CloudFormation::Stack",
    },
    "ExportBucket": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "MainAccessLogBucket",
        "MainAccessLogsBucketPolicy",
      ],
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "S3_BUCKET_NO_PUBLIC_RW_ACL",
          ],
        },
      },
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedHeaders": [
                "*",
              ],
              "AllowedMethods": [
                "GET",
              ],
              "AllowedOrigins": [
                "*",
              ],
            },
          ],
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "NoncurrentVersionExpirationInDays": 1,
              "Status": "Enabled",
            },
            {
              "AbortIncompleteMultipartUpload": {
                "DaysAfterInitiation": 1,
              },
              "Status": "Enabled",
            },
          ],
        },
        "LoggingConfiguration": {
          "DestinationBucketName": {
            "Ref": "MainAccessLogBucket",
          },
          "LogFilePrefix": {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "MainAccessLogBucket",
                },
                "/Export/",
              ],
            ],
          },
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "ExportStack": {
      "Properties": {
        "Parameters": {
          "Api": {
            "Ref": "API",
          },
          "ApiDeploymentId": {
            "Ref": "Deployment",
          },
          "ApiRootResourceId": {
            "Fn::GetAtt": [
              "API",
              "RootResourceId",
            ],
          },
          "AwsSdkLayerLambdaLayer": {
            "Ref": "AwsSdkLayerLambdaLayer",
          },
          "BootstrapBucket": {
            "Ref": "BootstrapBucket",
          },
          "BootstrapPrefix": {
            "Ref": "BootstrapPrefix",
          },
          "CFNInvokePolicy": {
            "Ref": "CFNInvokePolicy",
          },
          "CFNLambda": {
            "Fn::GetAtt": [
              "CFNLambda",
              "Arn",
            ],
          },
          "ContentDesignerOutputBucket": {
            "Ref": "ContentDesignerOutputBucket",
          },
          "EsEndpoint": {
            "Fn::GetAtt": [
              "ESVar",
              "ESAddress",
            ],
          },
          "EsProxyLambda": {
            "Fn::GetAtt": [
              "ESProxyLambda",
              "Arn",
            ],
          },
          "ExportBucket": {
            "Ref": "ExportBucket",
          },
          "KendraFaqIndexId": {
            "Ref": "KendraFaqIndexId",
          },
          "KendraWebPageIndexId": {
            "Ref": "KendraWebPageIndexId",
          },
          "LexV2BotAlias": {
            "Fn::GetAtt": [
              "LexV2Bot",
              "botAlias",
            ],
          },
          "LexV2BotAliasId": {
            "Fn::GetAtt": [
              "LexV2Bot",
              "botAliasId",
            ],
          },
          "LexV2BotId": {
            "Fn::GetAtt": [
              "LexV2Bot",
              "botId",
            ],
          },
          "LexV2BotLocaleIds": {
            "Fn::GetAtt": [
              "LexV2Bot",
              "botLocaleIds",
            ],
          },
          "LexV2BotName": {
            "Fn::GetAtt": [
              "LexV2Bot",
              "botName",
            ],
          },
          "LexVersion": "V2",
          "LogRetentionPeriod": {
            "Ref": "LogRetentionPeriod",
          },
          "QnABotCommonLambdaLayer": {
            "Ref": "QnABotCommonLambdaLayer",
          },
          "S3Clean": {
            "Fn::GetAtt": [
              "S3Clean",
              "Arn",
            ],
          },
          "SettingsTable": {
            "Ref": "SettingsTable",
          },
          "Stage": {
            "Ref": "Stage",
          },
          "VPCSecurityGroupIdList": {
            "Fn::Join": [
              ",",
              {
                "Ref": "VPCSecurityGroupIdList",
              },
            ],
          },
          "VPCSubnetIdList": {
            "Fn::Join": [
              ",",
              {
                "Ref": "VPCSubnetIdList",
              },
            ],
          },
          "VarIndex": {
            "Fn::GetAtt": [
              "Var",
              "QnaIndex",
            ],
          },
          "XraySetting": {
            "Ref": "XraySetting",
          },
        },
        "TemplateURL": {
          "Fn::Sub": "https://\${BootstrapBucket}.s3.\${AWS::Region}.amazonaws.com/\${BootstrapPrefix}/templates/export.json",
        },
      },
      "Type": "AWS::CloudFormation::Stack",
    },
    "FeedbackIndex": {
      "DependsOn": [
        "OpensearchDomain",
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ESCFNProxyLambda",
            "Arn",
          ],
        },
        "create": {
          "body": {
            "Fn::Sub": "{"settings":{}}",
          },
          "endpoint": {
            "Fn::GetAtt": [
              "ESVar",
              "ESAddress",
            ],
          },
          "index": {
            "Fn::Sub": "\${Var.FeedbackIndex}",
          },
        },
      },
      "Type": "Custom::ESProxy",
    },
    "FeedbackKinesisFirehose": {
      "DependsOn": [
        "FeedbackKinesisFirehoseStreamS3",
        "FeedbackKinesisFirehoseStreamOpenSearch",
        "FirehoseESS3Role",
      ],
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "KINESIS_FIREHOSE_SPLUNK_DESTINATION_CONFIGURATION_NO_PLAINTEXT_PASSWORD",
            "KINESIS_FIREHOSE_REDSHIFT_DESTINATION_CONFIGURATION_NO_PLAINTEXT_PASSWORD",
          ],
        },
      },
      "Properties": {
        "AmazonopensearchserviceDestinationConfiguration": {
          "BufferingHints": {
            "IntervalInSeconds": 60,
            "SizeInMBs": 5,
          },
          "CloudWatchLoggingOptions": {
            "Enabled": true,
            "LogGroupName": {
              "Ref": "FeedbackKinesisFirehoseLogGroup",
            },
            "LogStreamName": {
              "Ref": "FeedbackKinesisFirehoseStreamOpenSearch",
            },
          },
          "DomainARN": {
            "Fn::GetAtt": [
              "ESVar",
              "ESArn",
            ],
          },
          "IndexName": {
            "Fn::Sub": "\${Var.FeedbackIndex}",
          },
          "IndexRotationPeriod": "NoRotation",
          "RetryOptions": {
            "DurationInSeconds": 300,
          },
          "RoleARN": {
            "Fn::GetAtt": [
              "FirehoseESS3Role",
              "Arn",
            ],
          },
          "S3BackupMode": "AllDocuments",
          "S3Configuration": {
            "BucketARN": {
              "Fn::GetAtt": [
                "MetricsBucket",
                "Arn",
              ],
            },
            "BufferingHints": {
              "IntervalInSeconds": 60,
              "SizeInMBs": 5,
            },
            "CloudWatchLoggingOptions": {
              "Enabled": true,
              "LogGroupName": {
                "Ref": "FeedbackKinesisFirehoseLogGroup",
              },
              "LogStreamName": {
                "Ref": "FeedbackKinesisFirehoseStreamS3",
              },
            },
            "CompressionFormat": "UNCOMPRESSED",
            "Prefix": "feedback/",
            "RoleARN": {
              "Fn::GetAtt": [
                "FirehoseESS3Role",
                "Arn",
              ],
            },
          },
          "TypeName": "",
          "VpcConfiguration": {
            "Fn::If": [
              "VPCEnabled",
              {
                "RoleARN": {
                  "Fn::GetAtt": [
                    "FirehoseESS3Role",
                    "Arn",
                  ],
                },
                "SecurityGroupIds": {
                  "Ref": "VPCSecurityGroupIdList",
                },
                "SubnetIds": {
                  "Ref": "VPCSubnetIdList",
                },
              },
              {
                "Ref": "AWS::NoValue",
              },
            ],
          },
        },
        "DeliveryStreamEncryptionConfigurationInput": {
          "KeyType": "AWS_OWNED_CMK",
        },
        "DeliveryStreamType": "DirectPut",
      },
      "Type": "AWS::KinesisFirehose::DeliveryStream",
    },
    "FeedbackKinesisFirehoseLogGroup": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W86",
              "reason": "LogGroup is encrypted by default.",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
            "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Sub": "/aws/kinesisfirehose/\${AWS::StackName}-FeedbackKinesisFirehose",
              },
              {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Fn::If": [
            "LogRetentionPeriodIsNotZero",
            {
              "Ref": "LogRetentionPeriod",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "FeedbackKinesisFirehoseStreamOpenSearch": {
      "DependsOn": [
        "FeedbackKinesisFirehoseLogGroup",
      ],
      "Properties": {
        "LogGroupName": {
          "Ref": "FeedbackKinesisFirehoseLogGroup",
        },
        "LogStreamName": "OpenSearchDestinationDelivery",
      },
      "Type": "AWS::Logs::LogStream",
    },
    "FeedbackKinesisFirehoseStreamS3": {
      "DependsOn": [
        "FeedbackKinesisFirehoseLogGroup",
      ],
      "Properties": {
        "LogGroupName": {
          "Ref": "FeedbackKinesisFirehoseLogGroup",
        },
        "LogStreamName": "S3BackupDelivery",
      },
      "Type": "AWS::Logs::LogStream",
    },
    "FirehoseESS3Role": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W11",
              "reason": "This IAM role requires to have * resource on its permission policy",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "IAM_NO_INLINE_POLICY_CHECK",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "firehose.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "s3:AbortMultipartUpload",
                    "s3:GetBucketLocation",
                    "s3:GetObject",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads",
                    "s3:PutObject",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "MetricsBucket",
                        "Arn",
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::GetAtt": [
                              "MetricsBucket",
                              "Arn",
                            ],
                          },
                          "/*",
                        ],
                      ],
                    },
                  ],
                  "Sid": "FirehoseS3DeliveryPermissions",
                },
                {
                  "Action": [
                    "lambda:InvokeFunction",
                    "lambda:GetFunctionConfiguration",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:lambda:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":function:%FIREHOSE_DEFAULT_FUNCTION%:%FIREHOSE_DEFAULT_VERSION%",
                        ],
                      ],
                    },
                  ],
                  "Sid": "FirehoseLambdaPermissions",
                },
                {
                  "Action": [
                    "es:DescribeDomain",
                    "es:DescribeDomains",
                    "es:DescribeDomainConfig",
                    "es:ESHttpPost",
                    "es:ESHttpPut",
                    "es:ESHttpGet",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "ESVar",
                        "ESArn",
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Fn::GetAtt": [
                              "ESVar",
                              "ESArn",
                            ],
                          },
                          "/*",
                        ],
                      ],
                    },
                  ],
                  "Sid": "FirehoseOpenSearchDestinationPermissions",
                },
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/kinesisfirehose/*",
                        ],
                      ],
                    },
                  ],
                  "Sid": "FirehoseLogsPermissions",
                },
                {
                  "Action": [
                    "ec2:DescribeVpcs",
                    "ec2:DescribeVpcAttribute",
                    "ec2:DescribeSubnets",
                    "ec2:DescribeSecurityGroups",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:CreateNetworkInterface",
                    "ec2:CreateNetworkInterfacePermission",
                    "ec2:DeleteNetworkInterface",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                  "Sid": "FireHoseVPCConfiguration",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "QnAFirehose",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "Fonts": {
      "Properties": {
        "ParentId": {
          "Ref": "Static",
        },
        "PathPart": "fonts",
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "FontsProxy": {
      "Properties": {
        "ParentId": {
          "Ref": "Fonts",
        },
        "PathPart": "{proxy+}",
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "FontsProxyGet": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W59",
              "reason": "This ApiGateway Method does not need authorization setup",
            },
          ],
        },
      },
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Credentials": {
            "Fn::GetAtt": [
              "S3AccessRole",
              "Arn",
            ],
          },
          "IntegrationHttpMethod": "GET",
          "IntegrationResponses": [
            {
              "ContentHandling": "CONVERT_TO_BINARY",
              "ResponseParameters": {
                "method.response.header.api-stage": "context.stage",
                "method.response.header.content-type": "integration.response.header.Content-Type",
              },
              "StatusCode": 200,
            },
            {
              "ResponseTemplates": {
                "application/xml": "{"error":"Not found"}",
              },
              "SelectionPattern": "403",
              "StatusCode": 404,
            },
          ],
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy",
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":s3:path/",
                {
                  "Ref": "Bucket",
                },
                "/fonts/{proxy}",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.api-stage": false,
              "method.response.header.content-type": false,
            },
            "StatusCode": 200,
          },
          {
            "StatusCode": 400,
          },
          {
            "StatusCode": 404,
          },
        ],
        "RequestParameters": {
          "method.request.path.proxy": false,
        },
        "ResourceId": {
          "Ref": "FontsProxy",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "FulfillmentCodeVersion": {
      "Properties": {
        "Bucket": {
          "Ref": "BootstrapBucket",
        },
        "BuildDate": Any<String>,
        "Key": {
          "Fn::Sub": "\${BootstrapPrefix}/lambda/fulfillment.zip",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3Version",
    },
    "FulfillmentLambda": {
      "DependsOn": "FulfillmentCodeVersion",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "This Lambda Function is not required to be inside VPC",
            },
            {
              "id": "W92",
              "reason": "This lambda function does not require to have ReservedConcurrentExecutions",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "LAMBDA_CONCURRENCY_CHECK",
            "LAMBDA_INSIDE_VPC",
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "BootstrapBucket",
          },
          "S3Key": {
            "Fn::Sub": "\${BootstrapPrefix}/lambda/fulfillment.zip",
          },
          "S3ObjectVersion": {
            "Ref": "FulfillmentCodeVersion",
          },
        },
        "Environment": {
          "Variables": {
            "Fn::If": [
              "BuildExamples",
              {
                "DEFAULT_USER_POOL_JWKS_PARAM": {
                  "Ref": "DefaultUserPoolJwksUrl",
                },
                "DYNAMODB_USERSTABLE": {
                  "Ref": "UsersTable",
                },
                "EMBEDDINGS_API": {
                  "Ref": "EmbeddingsApi",
                },
                "EMBEDDINGS_LAMBDA_ARN": {
                  "Ref": "EmbeddingsLambdaArn",
                },
                "ES_ADDRESS": {
                  "Fn::GetAtt": [
                    "ESVar",
                    "ESAddress",
                  ],
                },
                "ES_INDEX": {
                  "Fn::GetAtt": [
                    "Var",
                    "QnaIndex",
                  ],
                },
                "ES_SERVICE_PROXY": {
                  "Ref": "ESProxyLambda",
                },
                "ES_SERVICE_QID": {
                  "Ref": "ESQidLambda",
                },
                "ES_TYPE": {
                  "Fn::GetAtt": [
                    "Var",
                    "QnAType",
                  ],
                },
                "EXTCreateRecentTopicsResponse": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.EXTCreateRecentTopicsResponse",
                  ],
                },
                "EXTCustomJSHook": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.EXTCustomJSHook",
                  ],
                },
                "EXTCustomPYHook": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.EXTCustomPYHook",
                  ],
                },
                "ExampleJSLambdaQuiz": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.ExampleJSLambdaQuiz",
                  ],
                },
                "ExampleJSLambdahook": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.ExampleJSLambdahook",
                  ],
                },
                "ExamplePYTHONLambdaBotBroker": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.ExamplePYTHONLambdaBotBroker",
                  ],
                },
                "ExamplePYTHONLambdaConnectCallback": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.ExamplePYTHONLambdaConnectCallback",
                  ],
                },
                "ExamplePYTHONLambdaFeedback": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.ExamplePYTHONLambdaFeedback",
                  ],
                },
                "ExamplePYTHONLambdaNext": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.ExamplePYTHONLambdaNext",
                  ],
                },
                "ExamplePYTHONLambdaPrevious": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.ExamplePYTHONLambdaPrevious",
                  ],
                },
                "ExamplePYTHONLambdahello": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.ExamplePYTHONLambdahello",
                  ],
                },
                "LAMBDA_DEFAULT_QUERY": {
                  "Ref": "ESQueryLambda",
                },
                "LAMBDA_LOG": {
                  "Ref": "ESLoggingLambda",
                },
                "LLM_API": {
                  "Ref": "LLMApi",
                },
                "LLM_LAMBDA_ARN": {
                  "Ref": "LLMLambdaArn",
                },
                "QNAAge": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.QNAAge",
                  ],
                },
                "QNAAgeNoConfirm": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.QNAAgeNoConfirm",
                  ],
                },
                "QNADate": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.QNADate",
                  ],
                },
                "QNADateNoConfirm": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.QNADateNoConfirm",
                  ],
                },
                "QNADayOfWeek": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.QNADayOfWeek",
                  ],
                },
                "QNAEmailAddress": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.QNAEmailAddress",
                  ],
                },
                "QNAMonth": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.QNAMonth",
                  ],
                },
                "QNAMonthNoConfirm": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.QNAMonthNoConfirm",
                  ],
                },
                "QNAName": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.QNAName",
                  ],
                },
                "QNANumber": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.QNANumber",
                  ],
                },
                "QNANumberNoConfirm": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.QNANumberNoConfirm",
                  ],
                },
                "QNAPhoneNumber": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.QNAPhoneNumber",
                  ],
                },
                "QNAPhoneNumberNoConfirm": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.QNAPhoneNumberNoConfirm",
                  ],
                },
                "QNAPin": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.QNAPin",
                  ],
                },
                "QNAPinNoConfirm": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.QNAPinNoConfirm",
                  ],
                },
                "QNASocialSecurity": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.QNASocialSecurity",
                  ],
                },
                "QNATime": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.QNATime",
                  ],
                },
                "QNAWage": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.QNAWage",
                  ],
                },
                "QNAYesNo": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.QNAYesNo",
                  ],
                },
                "QNAYesNoExit": {
                  "Fn::GetAtt": [
                    "ExamplesStack",
                    "Outputs.QNAYesNoExit",
                  ],
                },
                "SETTINGS_TABLE": {
                  "Ref": "SettingsTable",
                },
                "SOLUTION_ID": "SO0189",
                "SOLUTION_VERSION": "vx.x.x",
              },
              {
                "DEFAULT_USER_POOL_JWKS_PARAM": {
                  "Ref": "DefaultUserPoolJwksUrl",
                },
                "DYNAMODB_USERSTABLE": {
                  "Ref": "UsersTable",
                },
                "EMBEDDINGS_API": {
                  "Ref": "EmbeddingsApi",
                },
                "EMBEDDINGS_LAMBDA_ARN": {
                  "Ref": "EmbeddingsLambdaArn",
                },
                "ES_ADDRESS": {
                  "Fn::GetAtt": [
                    "ESVar",
                    "ESAddress",
                  ],
                },
                "ES_INDEX": {
                  "Fn::GetAtt": [
                    "Var",
                    "QnaIndex",
                  ],
                },
                "ES_SERVICE_PROXY": {
                  "Ref": "ESProxyLambda",
                },
                "ES_SERVICE_QID": {
                  "Ref": "ESQidLambda",
                },
                "ES_TYPE": {
                  "Fn::GetAtt": [
                    "Var",
                    "QnAType",
                  ],
                },
                "LAMBDA_DEFAULT_QUERY": {
                  "Ref": "ESQueryLambda",
                },
                "LAMBDA_LOG": {
                  "Ref": "ESLoggingLambda",
                },
                "LLM_API": {
                  "Ref": "LLMApi",
                },
                "LLM_LAMBDA_ARN": {
                  "Ref": "LLMLambdaArn",
                },
                "SETTINGS_TABLE": {
                  "Ref": "SettingsTable",
                },
                "SOLUTION_ID": "SO0189",
                "SOLUTION_VERSION": "vx.x.x",
              },
            ],
          },
        },
        "Handler": "index.handler",
        "Layers": [
          {
            "Ref": "AwsSdkLayerLambdaLayer",
          },
          {
            "Ref": "CommonModulesLambdaLayer",
          },
          {
            "Ref": "EsProxyLambdaLayer",
          },
          {
            "Ref": "QnABotCommonLambdaLayer",
          },
        ],
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "FulfillmentLambdaLogGroup",
          },
        },
        "MemorySize": 1408,
        "Role": {
          "Fn::GetAtt": [
            "FulfillmentLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs",
        "Tags": [
          {
            "Key": "Type",
            "Value": "Fulfillment",
          },
        ],
        "Timeout": 300,
        "TracingConfig": {
          "Mode": {
            "Fn::If": [
              "XRAYEnabled",
              "Active",
              "PassThrough",
            ],
          },
        },
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SecurityGroupIds": {
                "Ref": "VPCSecurityGroupIdList",
              },
              "SubnetIds": {
                "Ref": "VPCSubnetIdList",
              },
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "FulfillmentLambdaAliaslive": {
      "DependsOn": "FulfillmentLambdaVersionGenerator",
      "Properties": {
        "FunctionName": {
          "Ref": "FulfillmentLambda",
        },
        "FunctionVersion": {
          "Fn::GetAtt": [
            "FulfillmentLambdaVersionGenerator",
            "Version",
          ],
        },
        "Name": "live",
        "ProvisionedConcurrencyConfig": {
          "Fn::If": [
            "CreateConcurrency",
            {
              "ProvisionedConcurrentExecutions": {
                "Ref": "FulfillmentConcurrency",
              },
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Alias",
    },
    "FulfillmentLambdaLogGroup": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
            "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Sub": "/aws/lambda/\${AWS::StackName}-FulfillmentLambda",
              },
              {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Fn::If": [
            "LogRetentionPeriodIsNotZero",
            {
              "Ref": "LogRetentionPeriod",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "FulfillmentLambdaRole": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W11",
              "reason": "This IAM role requires to have * resource on its permission policy",
            },
            {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "IAM_NO_INLINE_POLICY_CHECK",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Ref": "QueryPolicy",
          },
        ],
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
                {
                  "Action": [
                    "ec2:CreateNetworkInterface",
                    "ec2:AssignPrivateIpAddresses",
                    "ec2:UnassignPrivateIpAddresses",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterface",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "lambdaVPCAccessExecutionRole",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "xray:PutTraceSegments",
                    "xray:PutTelemetryRecords",
                    "xray:GetSamplingRules",
                    "xray:GetSamplingTargets",
                    "xray:GetSamplingStatisticSummaries",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*",
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "xrayDaemonWriteAccess",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "translate:TranslateText",
                    "translate:GetTerminology",
                    "translate:ListTerminologies",
                    "comprehend:DetectDominantLanguage",
                    "cloudwatch:GetMetricStatistics",
                    "cloudwatch:ListMetrics",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "translateReadOnly",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "comprehend:DetectDominantLanguage",
                    "comprehend:DetectEntities",
                    "comprehend:DetectKeyPhrases",
                    "comprehend:DetectPiiEntities",
                    "comprehend:ContainsPiiEntities",
                    "comprehend:DetectSentiment",
                    "comprehend:DetectSyntax",
                    "comprehend:DescribeEntityRecognizer",
                    "comprehend:ListEntityRecognizers",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "AWSQnaBotComprehendReadOnly",
          },
          {
            "Fn::If": [
              "StreamingEnabled",
              {
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": [
                        "execute-api:Invoke",
                        "execute-api:ManageConnections",
                      ],
                      "Effect": "Allow",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Fn::Sub": "\${AWS::Partition}",
                              },
                              ":execute-api:",
                              {
                                "Fn::Sub": "\${AWS::Region}",
                              },
                              ":",
                              {
                                "Fn::Sub": "\${AWS::AccountId}",
                              },
                              ":",
                              {
                                "Fn::GetAtt": [
                                  "StreamingStack",
                                  "Outputs.StreamingWebSocketApiId",
                                ],
                              },
                              "/Prod/*",
                            ],
                          ],
                        },
                      ],
                    },
                    {
                      "Action": [
                        "dynamodb:GetItem",
                      ],
                      "Effect": "Allow",
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "StreamingStack",
                            "Outputs.StreamingDynamoDbTableArn",
                          ],
                        },
                      ],
                    },
                  ],
                  "Version": "2012-10-17",
                },
                "PolicyName": "StreamingPermissions",
              },
              {
                "Ref": "AWS::NoValue",
              },
            ],
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "ssm:GetParameter",
                    "ssm:GetParameters",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:ssm:",
                          {
                            "Fn::Sub": "\${AWS::Region}:",
                          },
                          {
                            "Fn::Sub": "\${AWS::AccountId}:",
                          },
                          "parameter/",
                          {
                            "Ref": "DefaultUserPoolJwksUrl",
                          },
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "ParamStorePolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "UsersTable",
                        "Arn",
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "DynamoDBPolicy",
          },
          {
            "Fn::If": [
              "BedrockEnable",
              {
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": [
                        "bedrock:InvokeModel",
                        "bedrock:InvokeModelWithResponseStream",
                      ],
                      "Effect": "Allow",
                      "Resource": [
                        {
                          "Fn::If": [
                            "EmbeddingsBedrock",
                            {
                              "Fn::Sub": [
                                "arn:\${AWS::Partition}:bedrock:\${AWS::Region}::foundation-model/\${ModelId}",
                                {
                                  "ModelId": {
                                    "Fn::FindInMap": [
                                      "BedrockDefaults",
                                      {
                                        "Ref": "EmbeddingsBedrockModelId",
                                      },
                                      "ModelID",
                                    ],
                                  },
                                },
                              ],
                            },
                            {
                              "Ref": "AWS::NoValue",
                            },
                          ],
                        },
                        {
                          "Fn::If": [
                            "LLMBedrock",
                            {
                              "Fn::Sub": [
                                "arn:\${AWS::Partition}:bedrock:\${AWS::Region}::foundation-model/\${ModelId}",
                                {
                                  "ModelId": {
                                    "Fn::FindInMap": [
                                      "BedrockDefaults",
                                      {
                                        "Ref": "LLMBedrockModelId",
                                      },
                                      "ModelID",
                                    ],
                                  },
                                },
                              ],
                            },
                            {
                              "Ref": "AWS::NoValue",
                            },
                          ],
                        },
                        {
                          "Fn::If": [
                            "BedrockKnowledgeBaseEnable",
                            {
                              "Fn::Sub": [
                                "arn:\${AWS::Partition}:bedrock:\${AWS::Region}::foundation-model/\${ModelId}",
                                {
                                  "ModelId": {
                                    "Fn::FindInMap": [
                                      "BedrockDefaults",
                                      {
                                        "Ref": "BedrockKnowledgeBaseModel",
                                      },
                                      "ModelID",
                                    ],
                                  },
                                },
                              ],
                            },
                            {
                              "Ref": "AWS::NoValue",
                            },
                          ],
                        },
                      ],
                    },
                    {
                      "Action": [
                        "bedrock:ApplyGuardrail",
                      ],
                      "Effect": "Allow",
                      "Resource": [
                        {
                          "Fn::Sub": "arn:\${AWS::Partition}:bedrock:\${AWS::Region}:\${AWS::AccountId}:guardrail/*",
                        },
                      ],
                      "Sid": "ApplyGuardrailsToLLMBedrock",
                    },
                  ],
                  "Version": "2012-10-17",
                },
                "PolicyName": "BedrockInvokeModelAccess",
              },
              {
                "Ref": "AWS::NoValue",
              },
            ],
          },
          {
            "Fn::If": [
              "BedrockKnowledgeBaseEnable",
              {
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": [
                        "bedrock:Retrieve",
                        "bedrock:RetrieveAndGenerate",
                      ],
                      "Effect": "Allow",
                      "Resource": {
                        "Fn::Sub": "arn:\${AWS::Partition}:bedrock:\${AWS::Region}:\${AWS::AccountId}:knowledge-base/\${BedrockKnowledgeBaseId}",
                      },
                    },
                    {
                      "Action": [
                        "bedrock:ApplyGuardrail",
                      ],
                      "Effect": "Allow",
                      "Resource": [
                        {
                          "Fn::Sub": "arn:\${AWS::Partition}:bedrock:\${AWS::Region}:\${AWS::AccountId}:guardrail/*",
                        },
                      ],
                      "Sid": "ApplyGuardrailsToKnowledgeBase",
                    },
                  ],
                  "Version": "2012-10-17",
                },
                "PolicyName": "BedrockKnowledgeBaseAccess",
              },
              {
                "Ref": "AWS::NoValue",
              },
            ],
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "s3:GetObject",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:s3:::QNA*/*",
                    "arn:aws:s3:::qna*/*",
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "S3QNABucketReadAccess",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "dynamodb:Scan",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "SettingsTable",
                        "Arn",
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "SettingsTableReadAccess",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "FulfillmentLambdaVersionGenerator": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "FulfillmentLambda",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
        "Triggers": {
          "EmbeddingsTrigger": [
            {
              "Ref": "EmbeddingsApi",
            },
            {
              "Ref": "EmbeddingsLambdaArn",
            },
          ],
          "FulfillmentCodeVersionTrigger": [
            {
              "Ref": "FulfillmentCodeVersion",
            },
          ],
          "LayersTrigger": [
            {
              "Ref": "AwsSdkLayerLambdaLayer",
            },
            {
              "Ref": "CommonModulesLambdaLayer",
            },
            {
              "Ref": "EsProxyLambdaLayer",
            },
            {
              "Ref": "QnABotCommonLambdaLayer",
            },
          ],
          "QASummarizeTrigger": [
            {
              "Ref": "LLMApi",
            },
            {
              "Ref": "LLMLambdaArn",
            },
          ],
        },
      },
      "Type": "Custom::LambdaVersion",
    },
    "GeneralKinesisFirehose": {
      "DependsOn": [
        "GeneralKinesisFirehoseStreamOpenSearch",
        "GeneralKinesisFirehoseStreamS3",
        "FirehoseESS3Role",
      ],
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "KINESIS_FIREHOSE_REDSHIFT_DESTINATION_CONFIGURATION_NO_PLAINTEXT_PASSWORD",
            "KINESIS_FIREHOSE_SPLUNK_DESTINATION_CONFIGURATION_NO_PLAINTEXT_PASSWORD",
          ],
        },
      },
      "Properties": {
        "AmazonopensearchserviceDestinationConfiguration": {
          "BufferingHints": {
            "IntervalInSeconds": 60,
            "SizeInMBs": 5,
          },
          "CloudWatchLoggingOptions": {
            "Enabled": true,
            "LogGroupName": {
              "Ref": "GeneralKinesisFirehoseLogGroup",
            },
            "LogStreamName": {
              "Ref": "GeneralKinesisFirehoseStreamOpenSearch",
            },
          },
          "DomainARN": {
            "Fn::GetAtt": [
              "ESVar",
              "ESArn",
            ],
          },
          "IndexName": {
            "Fn::Sub": "\${Var.MetricsIndex}",
          },
          "IndexRotationPeriod": "NoRotation",
          "RetryOptions": {
            "DurationInSeconds": 300,
          },
          "RoleARN": {
            "Fn::GetAtt": [
              "FirehoseESS3Role",
              "Arn",
            ],
          },
          "S3BackupMode": "AllDocuments",
          "S3Configuration": {
            "BucketARN": {
              "Fn::GetAtt": [
                "MetricsBucket",
                "Arn",
              ],
            },
            "BufferingHints": {
              "IntervalInSeconds": 60,
              "SizeInMBs": 5,
            },
            "CloudWatchLoggingOptions": {
              "Enabled": true,
              "LogGroupName": {
                "Ref": "GeneralKinesisFirehoseLogGroup",
              },
              "LogStreamName": {
                "Ref": "GeneralKinesisFirehoseStreamS3",
              },
            },
            "CompressionFormat": "UNCOMPRESSED",
            "Prefix": "metrics/",
            "RoleARN": {
              "Fn::GetAtt": [
                "FirehoseESS3Role",
                "Arn",
              ],
            },
          },
          "TypeName": "",
          "VpcConfiguration": {
            "Fn::If": [
              "VPCEnabled",
              {
                "RoleARN": {
                  "Fn::GetAtt": [
                    "FirehoseESS3Role",
                    "Arn",
                  ],
                },
                "SecurityGroupIds": {
                  "Ref": "VPCSecurityGroupIdList",
                },
                "SubnetIds": {
                  "Ref": "VPCSubnetIdList",
                },
              },
              {
                "Ref": "AWS::NoValue",
              },
            ],
          },
        },
        "DeliveryStreamEncryptionConfigurationInput": {
          "KeyType": "AWS_OWNED_CMK",
        },
        "DeliveryStreamType": "DirectPut",
      },
      "Type": "AWS::KinesisFirehose::DeliveryStream",
    },
    "GeneralKinesisFirehoseLogGroup": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W86",
              "reason": "LogGroup is encrypted by default.",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
            "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Sub": "/aws/kinesisfirehose/\${AWS::StackName}-GeneralKinesisFirehose",
              },
              {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Fn::If": [
            "LogRetentionPeriodIsNotZero",
            {
              "Ref": "LogRetentionPeriod",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "GeneralKinesisFirehoseStreamOpenSearch": {
      "Properties": {
        "LogGroupName": {
          "Ref": "GeneralKinesisFirehoseLogGroup",
        },
        "LogStreamName": "OpenSearchDestinationDelivery",
      },
      "Type": "AWS::Logs::LogStream",
    },
    "GeneralKinesisFirehoseStreamS3": {
      "Properties": {
        "LogGroupName": {
          "Ref": "GeneralKinesisFirehoseLogGroup",
        },
        "LogStreamName": "S3BackupDelivery",
      },
      "Type": "AWS::Logs::LogStream",
    },
    "HTTPSOnlyAssetBucketPolicy": {
      "Properties": {
        "Bucket": {
          "Ref": "AssetBucket",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "AssetBucket",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "AssetBucket",
                          "Arn",
                        ],
                      },
                    ],
                  ],
                },
              ],
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "HTTPSOnlyBucketPolicy": {
      "Properties": {
        "Bucket": {
          "Ref": "Bucket",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "Bucket",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "Bucket",
                          "Arn",
                        ],
                      },
                    ],
                  ],
                },
              ],
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "HTTPSOnlyBuildStatusBucketPolicy": {
      "Metadata": {
        "aws:cdk:path": "serverless-bot-framework/CloudfrontStaticWebsite/CloudFrontToS3/S3LoggingBucket/Policy/Resource",
      },
      "Properties": {
        "Bucket": {
          "Ref": "BuildStatusBucket",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "BuildStatusBucket",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "BuildStatusBucket",
                          "Arn",
                        ],
                      },
                    ],
                  ],
                },
              ],
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "HTTPSOnlyContentDesignerOutputBucketPolicy": {
      "Properties": {
        "Bucket": {
          "Ref": "ContentDesignerOutputBucket",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ContentDesignerOutputBucket",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ContentDesignerOutputBucket",
                          "Arn",
                        ],
                      },
                    ],
                  ],
                },
              ],
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "HTTPSOnlyExportBucketPolicy": {
      "Properties": {
        "Bucket": {
          "Ref": "ExportBucket",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ExportBucket",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ExportBucket",
                          "Arn",
                        ],
                      },
                    ],
                  ],
                },
              ],
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "HTTPSOnlyImportBucketPolicy": {
      "Properties": {
        "Bucket": {
          "Ref": "ImportBucket",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ImportBucket",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ImportBucket",
                          "Arn",
                        ],
                      },
                    ],
                  ],
                },
              ],
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "HTTPSOnlyMetricBucketsPolicy": {
      "Properties": {
        "Bucket": {
          "Ref": "MetricsBucket",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "MetricsBucket",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "MetricsBucket",
                          "Arn",
                        ],
                      },
                    ],
                  ],
                },
              ],
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "HTTPSOnlyTestAllBucketPolicy": {
      "Properties": {
        "Bucket": {
          "Ref": "TestAllBucket",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "TestAllBucket",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "TestAllBucket",
                          "Arn",
                        ],
                      },
                    ],
                  ],
                },
              ],
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "Health": {
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "API",
            "RootResourceId",
          ],
        },
        "PathPart": "health",
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "HealthGet": {
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "{"status":"health"}

",
                },
              },
              "StatusCode": 200,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*Exception.*",
              "StatusCode": 405,
            },
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "{
    "endpoint":"\${ESVar.ESAddress}",
    "method":"GET",
    "path":"/_cluster/health"
}

",
            },
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ESProxyLambda",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.date": true,
            },
            "StatusCode": 200,
          },
          {
            "StatusCode": 404,
          },
          {
            "StatusCode": 405,
          },
          {
            "StatusCode": 500,
          },
        ],
        "ResourceId": {
          "Ref": "Health",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "IdPool": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W57",
              "reason": "This IdentityPool has proper restrictions for unauthenticated users",
            },
          ],
        },
      },
      "Properties": {
        "AllowUnauthenticatedIdentities": true,
        "CognitoIdentityProviders": [
          {
            "ClientId": {
              "Ref": "ClientDesigner",
            },
            "ProviderName": {
              "Fn::GetAtt": [
                "UserPool",
                "ProviderName",
              ],
            },
            "ServerSideTokenCheck": true,
          },
          {
            "ClientId": {
              "Ref": "ClientClient",
            },
            "ProviderName": {
              "Fn::GetAtt": [
                "UserPool",
                "ProviderName",
              ],
            },
            "ServerSideTokenCheck": true,
          },
        ],
        "IdentityPoolName": {
          "Fn::Join": [
            "-",
            [
              "QnaBotIdPool",
              {
                "Ref": "AWS::StackName",
              },
            ],
          ],
        },
      },
      "Type": "AWS::Cognito::IdentityPool",
    },
    "Images": {
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "API",
            "RootResourceId",
          ],
        },
        "PathPart": "images",
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "ImagesProxy": {
      "Properties": {
        "ParentId": {
          "Ref": "Images",
        },
        "PathPart": "{proxy+}",
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "ImagesProxyGet": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W59",
              "reason": "This ApiGateway Method does not need authorization setup",
            },
          ],
        },
      },
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Credentials": {
            "Fn::GetAtt": [
              "S3AccessRole",
              "Arn",
            ],
          },
          "IntegrationHttpMethod": "GET",
          "IntegrationResponses": [
            {
              "ContentHandling": "CONVERT_TO_BINARY",
              "ResponseParameters": {
                "method.response.header.api-stage": "context.stage",
                "method.response.header.content-type": "integration.response.header.Content-Type",
              },
              "StatusCode": 200,
            },
            {
              "ResponseTemplates": {
                "application/xml": "{"error":"Not found"}",
              },
              "SelectionPattern": "403",
              "StatusCode": 404,
            },
          ],
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy",
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":s3:path/",
                {
                  "Ref": "Bucket",
                },
                "/assets/{proxy}",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.api-stage": false,
              "method.response.header.content-type": false,
            },
            "StatusCode": 200,
          },
          {
            "StatusCode": 400,
          },
          {
            "StatusCode": 404,
          },
        ],
        "RequestParameters": {
          "method.request.path.proxy": false,
        },
        "ResourceId": {
          "Ref": "ImagesProxy",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "ImportBucket": {
      "DependsOn": [
        "MainAccessLogBucket",
        "MainAccessLogsBucketPolicy",
      ],
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "S3_BUCKET_NO_PUBLIC_RW_ACL",
          ],
        },
      },
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedHeaders": [
                "*",
              ],
              "AllowedMethods": [
                "PUT",
              ],
              "AllowedOrigins": [
                "*",
              ],
            },
          ],
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "ExpirationInDays": 1,
              "Status": "Enabled",
            },
          ],
        },
        "LoggingConfiguration": {
          "DestinationBucketName": {
            "Ref": "MainAccessLogBucket",
          },
          "LogFilePrefix": {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "MainAccessLogBucket",
                },
                "/Import/",
              ],
            ],
          },
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
    },
    "ImportStack": {
      "DependsOn": [
        "PreUpgradeExport",
      ],
      "Properties": {
        "Parameters": {
          "AwsSdkLayerLambdaLayer": {
            "Ref": "AwsSdkLayerLambdaLayer",
          },
          "BootstrapBucket": {
            "Ref": "BootstrapBucket",
          },
          "BootstrapPrefix": {
            "Ref": "BootstrapPrefix",
          },
          "CFNInvokePolicy": {
            "Ref": "CFNInvokePolicy",
          },
          "CFNLambda": {
            "Fn::GetAtt": [
              "CFNLambda",
              "Arn",
            ],
          },
          "CommonModulesLambdaLayer": {
            "Ref": "CommonModulesLambdaLayer",
          },
          "ContentDesignerOutputBucket": {
            "Ref": "ContentDesignerOutputBucket",
          },
          "EmbeddingsApi": {
            "Ref": "EmbeddingsApi",
          },
          "EmbeddingsBedrockModelId": {
            "Fn::FindInMap": [
              "BedrockDefaults",
              {
                "Ref": "EmbeddingsBedrockModelId",
              },
              "ModelID",
            ],
          },
          "EmbeddingsLambdaArn": {
            "Ref": "EmbeddingsLambdaArn",
          },
          "EmbeddingsLambdaDimensions": {
            "Ref": "EmbeddingsLambdaDimensions",
          },
          "EsArn": {
            "Fn::GetAtt": [
              "ESVar",
              "ESArn",
            ],
          },
          "EsEndpoint": {
            "Fn::GetAtt": [
              "ESVar",
              "ESAddress",
            ],
          },
          "EsProxyLambda": {
            "Fn::GetAtt": [
              "ESProxyLambda",
              "Arn",
            ],
          },
          "EsProxyLambdaLayer": {
            "Ref": "EsProxyLambdaLayer",
          },
          "ExportBucket": {
            "Ref": "ExportBucket",
          },
          "FeedbackIndex": {
            "Fn::GetAtt": [
              "Var",
              "FeedbackIndex",
            ],
          },
          "ImportBucket": {
            "Ref": "ImportBucket",
          },
          "LogRetentionPeriod": {
            "Ref": "LogRetentionPeriod",
          },
          "MetricsIndex": {
            "Fn::GetAtt": [
              "Var",
              "MetricsIndex",
            ],
          },
          "QnABotCommonLambdaLayer": {
            "Ref": "QnABotCommonLambdaLayer",
          },
          "S3Clean": {
            "Fn::GetAtt": [
              "S3Clean",
              "Arn",
            ],
          },
          "SettingsTable": {
            "Ref": "SettingsTable",
          },
          "VPCSecurityGroupIdList": {
            "Fn::Join": [
              ",",
              {
                "Ref": "VPCSecurityGroupIdList",
              },
            ],
          },
          "VPCSubnetIdList": {
            "Fn::Join": [
              ",",
              {
                "Ref": "VPCSubnetIdList",
              },
            ],
          },
          "VarIndex": {
            "Fn::GetAtt": [
              "Var",
              "QnaIndex",
            ],
          },
          "XraySetting": {
            "Ref": "XraySetting",
          },
        },
        "TemplateURL": {
          "Fn::Sub": "https://\${BootstrapBucket}.s3.\${AWS::Region}.amazonaws.com/\${BootstrapPrefix}/templates/import.json",
        },
      },
      "Type": "AWS::CloudFormation::Stack",
    },
    "Index": {
      "DependsOn": [
        "OpensearchDomain",
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ESCFNProxyLambda",
            "Arn",
          ],
        },
        "create": {
          "body": {
            "Fn::Sub": [
              "{"settings":{"number_of_shards":"1","index.knn":true,"analysis":{"filter":{"english_stop":{"type":"stop","stopwords":"_english_"},"english_keywords":{"type":"keyword_marker","keywords":["example"]},"english_stemmer":{"type":"stemmer","language":"english"},"english_possessive_stemmer":{"type":"stemmer","language":"possessive_english"},"arabic_stop":{"type":"stop","stopwords":"_arabic_"},"arabic_stemmer":{"type":"stemmer","language":"arabic"},"arabic_keywords":{"type":"keyword_marker","keywords":["مثال"]},"armenian_stop":{"type":"stop","stopwords":"_armenian_"},"armenian_keywords":{"type":"keyword_marker","keywords":["օրինակ"]},"armenian_stemmer":{"type":"stemmer","language":"armenian"},"basque_stop":{"type":"stop","stopwords":"_basque_"},"basque_keywords":{"type":"keyword_marker","keywords":["Adibidez"]},"basque_stemmer":{"type":"stemmer","language":"basque"},"bengali_stop":{"type":"stop","stopwords":"_bengali_"},"bengali_keywords":{"type":"keyword_marker","keywords":["উদাহরণ"]},"bengali_stemmer":{"type":"stemmer","language":"bengali"},"brazilian_stop":{"type":"stop","stopwords":"_brazilian_"},"brazilian_keywords":{"type":"keyword_marker","keywords":["exemplo"]},"brazilian_stemmer":{"type":"stemmer","language":"brazilian"},"bulgarian_stop":{"type":"stop","stopwords":"_bulgarian_"},"bulgarian_keywords":{"type":"keyword_marker","keywords":["пример"]},"bulgarian_stemmer":{"type":"stemmer","language":"bulgarian"},"catalan_elision":{"type":"elision","articles_case":true,"articles":["d","l","m","n","s","t"]},"catalan_stop":{"type":"stop","stopwords":"_catalan_"},"catalan_keywords":{"type":"keyword_marker","keywords":["example"]},"catalan_stemmer":{"type":"stemmer","language":"catalan"},"czech_stop":{"type":"stop","stopwords":"_czech_"},"czech_keywords":{"type":"keyword_marker","keywords":["příklad"]},"czech_stemmer":{"type":"stemmer","language":"czech"},"danish_stop":{"type":"stop","stopwords":"_danish_"},"danish_keywords":{"type":"keyword_marker","keywords":["eksempel"]},"danish_stemmer":{"type":"stemmer","language":"danish"},"dutch_stop":{"type":"stop","stopwords":"_dutch_"},"dutch_stemmer":{"type":"stemmer","language":"dutch"},"dutch_keywords":{"type":"keyword_marker","keywords":["voorbeeld"]},"dutch_override":{"type":"stemmer_override","rules":["fiets=>fiets","bromfiets=>bromfiets","ei=>eier","kind=>kinder"]},"estonian_stop":{"type":"stop","stopwords":"_estonian_"},"estonian_keywords":{"type":"keyword_marker","keywords":["näide"]},"estonian_stemmer":{"type":"stemmer","language":"estonian"},"finnish_stop":{"type":"stop","stopwords":"_finnish_"},"finnish_stemmer":{"type":"stemmer","language":"finnish"},"finnish_keywords":{"type":"keyword_marker","keywords":["esimerkki"]},"french_elision":{"type":"elision","articles_case":true,"articles":["l","m","t","qu","n","s","j","d","c","jusqu","quoiqu","lorsqu","puisqu"]},"french_stop":{"type":"stop","stopwords":"_french_"},"french_keywords":{"type":"keyword_marker","keywords":["Example"]},"french_stemmer":{"type":"stemmer","language":"light_french"},"galician_stop":{"type":"stop","stopwords":"_galician_"},"galician_keywords":{"type":"keyword_marker","keywords":["exemplo"]},"galician_stemmer":{"type":"stemmer","language":"galician"},"german_stop":{"type":"stop","stopwords":"_german_"},"german_stemmer":{"type":"stemmer","language":"light_german"},"german_keywords":{"type":"keyword_marker","keywords":["Beispiel"]},"greek_stop":{"type":"stop","stopwords":"_greek_"},"greek_lowercase":{"type":"lowercase","language":"greek"},"greek_keywords":{"type":"keyword_marker","keywords":["παράδειγμα"]},"greek_stemmer":{"type":"stemmer","language":"greek"},"hindi_stop":{"type":"stop","stopwords":"_hindi_"},"hindi_stemmer":{"type":"stemmer","language":"hindi"},"hindi_keywords":{"type":"keyword_marker","keywords":["उदाहरण"]},"hungarian_stop":{"type":"stop","stopwords":"_hungarian_"},"hungarian_keywords":{"type":"keyword_marker","keywords":["példa"]},"hungarian_stemmer":{"type":"stemmer","language":"hungarian"},"indonesian_stop":{"type":"stop","stopwords":"_indonesian_"},"indonesian_keywords":{"type":"keyword_marker","keywords":["contoh"]},"indonesian_stemmer":{"type":"stemmer","language":"indonesian"},"irish_hyphenation":{"type":"stop","stopwords":["h","n","t"],"ignore_case":true},"irish_elision":{"type":"elision","articles":["d","m","b"],"articles_case":true},"irish_stop":{"type":"stop","stopwords":"_irish_"},"irish_keywords":{"type":"keyword_marker","keywords":["sampla"]},"irish_lowercase":{"type":"lowercase","language":"irish"},"irish_stemmer":{"type":"stemmer","language":"irish"},"italian_elision":{"type":"elision","articles":["c","l","all","dall","dell","nell","sull","coll","pell","gl","agl","dagl","degl","negl","sugl","un","m","t","s","v","d"],"articles_case":true},"italian_stop":{"type":"stop","stopwords":"_italian_"},"italian_stemmer":{"type":"stemmer","language":"light_italian"},"italian_keywords":{"type":"keyword_marker","keywords":["esempio"]},"latvian_stop":{"type":"stop","stopwords":"_latvian_"},"latvian_keywords":{"type":"keyword_marker","keywords":["piemērs"]},"latvian_stemmer":{"type":"stemmer","language":"latvian"},"lithuanian_stop":{"type":"stop","stopwords":"_lithuanian_"},"lithuanian_keywords":{"type":"keyword_marker","keywords":["pavyzdys"]},"lithuanian_stemmer":{"type":"stemmer","language":"lithuanian"},"norwegian_stop":{"type":"stop","stopwords":"_norwegian_"},"norwegian_keywords":{"type":"keyword_marker","keywords":["eksempel"]},"norwegian_stemmer":{"type":"stemmer","language":"norwegian"},"portuguese_stop":{"type":"stop","stopwords":"_portuguese_"},"portuguese_keywords":{"type":"keyword_marker","keywords":["exemplo"]},"portuguese_stemmer":{"type":"stemmer","language":"light_portuguese"},"romanian_stop":{"type":"stop","stopwords":"_romanian_"},"romanian_keywords":{"type":"keyword_marker","keywords":["exemplu"]},"romanian_stemmer":{"type":"stemmer","language":"romanian"},"russian_stop":{"type":"stop","stopwords":"_russian_"},"russian_stemmer":{"type":"stemmer","language":"russian"},"russian_keywords":{"type":"keyword_marker","keywords":["пример"]},"sorani_stop":{"type":"stop","stopwords":"_sorani_"},"sorani_keywords":{"type":"keyword_marker","keywords":["mînak"]},"sorani_stemmer":{"type":"stemmer","language":"sorani"},"spanish_stop":{"type":"stop","stopwords":"_spanish_"},"spanish_stemmer":{"type":"stemmer","language":"light_spanish"},"spanish_keywords":{"type":"keyword_marker","keywords":["ejemplo"]},"swedish_stop":{"type":"stop","stopwords":"_swedish_"},"swedish_keywords":{"type":"keyword_marker","keywords":["exempel"]},"swedish_stemmer":{"type":"stemmer","language":"swedish"},"turkish_stop":{"type":"stop","stopwords":"_turkish_"},"turkish_lowercase":{"type":"lowercase","language":"turkish"},"turkish_keywords":{"type":"keyword_marker","keywords":["örnek"]},"turkish_stemmer":{"type":"stemmer","language":"turkish"},"thai_stop":{"type":"stop","stopwords":"_thai_"}},"analyzer":{"rebuilt_English":{"type":"custom","tokenizer":"standard","filter":["english_possessive_stemmer","lowercase","english_stop","english_keywords","english_stemmer"]},"rebuilt_English_unique":{"type":"custom","tokenizer":"standard","filter":["english_possessive_stemmer","lowercase","english_stop","english_keywords","english_stemmer","unique"]},"rebuilt_Arabic":{"tokenizer":"standard","filter":["lowercase","decimal_digit","arabic_stop","arabic_normalization","arabic_keywords","arabic_stemmer"]},"rebuilt_Armenian":{"tokenizer":"standard","filter":["lowercase","armenian_stop","armenian_keywords","armenian_stemmer"]},"rebuilt_Basque":{"tokenizer":"standard","filter":["lowercase","basque_stop","basque_keywords","basque_stemmer"]},"rebuilt_Bengali":{"tokenizer":"standard","filter":["lowercase","decimal_digit","bengali_keywords","indic_normalization","bengali_normalization","bengali_stop","bengali_stemmer"]},"rebuilt_Brazilian":{"tokenizer":"standard","filter":["lowercase","brazilian_stop","brazilian_keywords","brazilian_stemmer"]},"rebuilt_Bulgarian":{"tokenizer":"standard","filter":["lowercase","bulgarian_stop","bulgarian_keywords","bulgarian_stemmer"]},"rebuilt_Catalan":{"tokenizer":"standard","filter":["catalan_elision","lowercase","catalan_stop","catalan_keywords","catalan_stemmer"]},"rebuilt_Czech":{"tokenizer":"standard","filter":["lowercase","czech_stop","czech_keywords","czech_stemmer"]},"rebuilt_Danish":{"tokenizer":"standard","filter":["lowercase","danish_stop","danish_keywords","danish_stemmer"]},"rebuilt_Dutch":{"tokenizer":"standard","filter":["lowercase","dutch_stop","dutch_keywords","dutch_override","dutch_stemmer"]},"rebuilt_Estonian":{"tokenizer":"standard","filter":["lowercase","estonian_stop","estonian_keywords","estonian_stemmer"]},"rebuilt_Finnish":{"tokenizer":"standard","filter":["lowercase","finnish_stop","finnish_keywords","finnish_stemmer"]},"rebuilt_French":{"tokenizer":"standard","filter":["french_elision","lowercase","french_stop","french_keywords","french_stemmer"]},"rebuilt_Galician":{"tokenizer":"standard","filter":["lowercase","galician_stop","galician_keywords","galician_stemmer"]},"rebuilt_German":{"tokenizer":"standard","filter":["lowercase","german_stop","german_keywords","german_normalization","german_stemmer"]},"rebuilt_Greek":{"tokenizer":"standard","filter":["greek_lowercase","greek_stop","greek_keywords","greek_stemmer"]},"rebuilt_Hindi":{"tokenizer":"standard","filter":["lowercase","decimal_digit","hindi_keywords","indic_normalization","hindi_normalization","hindi_stop","hindi_stemmer"]},"rebuilt_Hungarian":{"tokenizer":"standard","filter":["lowercase","hungarian_stop","hungarian_keywords","hungarian_stemmer"]},"rebuilt_Indonesian":{"tokenizer":"standard","filter":["lowercase","indonesian_stop","indonesian_keywords","indonesian_stemmer"]},"rebuilt_Irish":{"tokenizer":"standard","filter":["irish_hyphenation","irish_elision","irish_lowercase","irish_stop","irish_keywords","irish_stemmer"]},"rebuilt_Italian":{"tokenizer":"standard","filter":["italian_elision","lowercase","italian_stop","italian_keywords","italian_stemmer"]},"rebuilt_Latvian":{"tokenizer":"standard","filter":["lowercase","latvian_stop","latvian_keywords","latvian_stemmer"]},"rebuilt_Lithuanian":{"tokenizer":"standard","filter":["lowercase","lithuanian_stop","lithuanian_keywords","lithuanian_stemmer"]},"rebuilt_Norwegian":{"tokenizer":"standard","filter":["lowercase","norwegian_stop","norwegian_keywords","norwegian_stemmer"]},"rebuilt_Portuguese":{"tokenizer":"standard","filter":["lowercase","portuguese_stop","portuguese_keywords","portuguese_stemmer"]},"rebuilt_Romanian":{"tokenizer":"standard","filter":["lowercase","romanian_stop","romanian_keywords","romanian_stemmer"]},"rebuilt_Russian":{"tokenizer":"standard","filter":["lowercase","russian_stop","russian_keywords","russian_stemmer"]},"rebuilt_Sorani":{"tokenizer":"standard","filter":["sorani_normalization","lowercase","decimal_digit","sorani_stop","sorani_keywords","sorani_stemmer"]},"rebuilt_Spanish":{"tokenizer":"standard","filter":["lowercase","spanish_stop","spanish_keywords","spanish_stemmer"]},"rebuilt_Swedish":{"tokenizer":"standard","filter":["lowercase","swedish_stop","swedish_keywords","swedish_stemmer"]},"rebuilt_Turkish":{"tokenizer":"standard","filter":["apostrophe","turkish_lowercase","turkish_stop","turkish_keywords","turkish_stemmer"]},"rebuilt_Thai":{"tokenizer":"thai","filter":["lowercase","decimal_digit","thai_stop"]}}}},"mappings":{"properties":{"qid":{"type":"keyword"},"quniqueterms":{"type":"text","analyzer":"rebuilt_\${Language}"},"questions":{"type":"nested","properties":{"q":{"type":"text","analyzer":"rebuilt_\${Language}"},"q_vector":{"type":"knn_vector","dimension":"\${EmbeddingsDimensions}","method":{"name":"hnsw","space_type":"cosinesimil","engine":"nmslib"}}}},"a":{"type":"text","analyzer":"rebuilt_\${Language}"},"a_vector":{"type":"knn_vector","dimension":"\${EmbeddingsDimensions}","method":{"name":"hnsw","space_type":"cosinesimil","engine":"nmslib"}},"t":{"type":"text","analyzer":"whitespace"},"r":{"properties":{"imageUrl":{"type":"keyword"},"title":{"type":"text"}}},"l":{"type":"keyword"},"passage":{"type":"text","analyzer":"rebuilt_\${Language}"},"passage_vector":{"type":"knn_vector","dimension":"\${EmbeddingsDimensions}","method":{"name":"hnsw","space_type":"cosinesimil","engine":"nmslib"}},"question":{"type":"text","analyzer":"rebuilt_\${Language}"},"incorrectAnswers":{"type":"text","analyzer":"rebuilt_\${Language}"},"correctAnswers":{"type":"text","analyzer":"rebuilt_\${Language}"}}}}",
              {
                "EmbeddingsDimensions": {
                  "Fn::If": [
                    "EmbeddingsEnable",
                    {
                      "Fn::If": [
                        "EmbeddingsLambda",
                        {
                          "Ref": "EmbeddingsLambdaDimensions",
                        },
                        {
                          "Fn::If": [
                            "EmbeddingsBedrock",
                            {
                              "Fn::FindInMap": [
                                "BedrockDefaults",
                                {
                                  "Ref": "EmbeddingsBedrockModelId",
                                },
                                "EmbeddingsDimensions",
                              ],
                            },
                            "INVALID EMBEDDINGS API - Cannot determine dimensions",
                          ],
                        },
                      ],
                    },
                    "1",
                  ],
                },
              },
            ],
          },
          "endpoint": {
            "Fn::GetAtt": [
              "ESVar",
              "ESAddress",
            ],
          },
          "index": {
            "Fn::Sub": "\${Var.QnaIndex}",
          },
        },
      },
      "Type": "Custom::ESProxy",
    },
    "InfoVar": {
      "Properties": {
        "BuildDate": Any<Date>,
        "BuildDateString": Any<String>,
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
        "Version": Any<String>,
      },
      "Type": "Custom::Variable",
    },
    "InvokePermissionESCleaningLambda": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ESCleaningLambda",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "InvokePermissionESProxyLambda": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ESProxyLambda",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "InvokePermissionESQidLambda": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ESQidLambda",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "InvokePermissionExampleS3ListLambda": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ExampleS3ListLambda",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "InvokePermissionExampleS3ListPhotoLambda": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ExampleS3ListPhotoLambda",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "InvokePermissionLexBuildLambda": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LexBuildLambda",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "InvokePermissionLexBuildLambdaPoll": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LexBuildLambdaPoll",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "InvokePermissionLexBuildLambdaStart": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LexBuildLambdaStart",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "InvokePermissionLexProxyLambda": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LexProxyLambda",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "InvokePermissionLexStatusLambda": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LexStatusLambda",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "InvokePermissionLexv2BotLambda": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "Lexv2BotLambda",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "InvokePermissionS3ListLambda": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "S3ListLambda",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "InvokePermissionSchemaLambda": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SchemaLambda",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "InvokePermissionUtteranceLambda": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "UtteranceLambda",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "InvokePolicy": {
      "Properties": {
        "PolicyDocument": {
          "Fn::If": [
            "BuildExamples",
            {
              "Statement": [
                {
                  "Action": [
                    "lambda:InvokeFunction",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:lambda:*:*:function:qna-*",
                    "arn:aws:lambda:*:*:function:QNA-*",
                    {
                      "Fn::GetAtt": [
                        "ESQueryLambda",
                        "Arn",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "ESProxyLambda",
                        "Arn",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "ESLoggingLambda",
                        "Arn",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "ESQidLambda",
                        "Arn",
                      ],
                    },
                    {
                      "Fn::If": [
                        "EmbeddingsLambdaArn",
                        {
                          "Ref": "EmbeddingsLambdaArn",
                        },
                        {
                          "Ref": "AWS::NoValue",
                        },
                      ],
                    },
                    {
                      "Fn::If": [
                        "LLMLambdaArn",
                        {
                          "Ref": "LLMLambdaArn",
                        },
                        {
                          "Ref": "AWS::NoValue",
                        },
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "ExamplesStack",
                        "Outputs.ExampleJSLambdaQuiz",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "ExamplesStack",
                        "Outputs.ExampleJSLambdahook",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "ExamplesStack",
                        "Outputs.ExamplePYTHONLambdaBotBroker",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "ExamplesStack",
                        "Outputs.ExamplePYTHONLambdaConnectCallback",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "ExamplesStack",
                        "Outputs.ExamplePYTHONLambdaFeedback",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "ExamplesStack",
                        "Outputs.ExamplePYTHONLambdaNext",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "ExamplesStack",
                        "Outputs.ExamplePYTHONLambdaPrevious",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "ExamplesStack",
                        "Outputs.ExamplePYTHONLambdahello",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "ExamplesStack",
                        "Outputs.EXTCreateRecentTopicsResponse",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "ExamplesStack",
                        "Outputs.EXTCustomJSHook",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "ExamplesStack",
                        "Outputs.EXTCustomPYHook",
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            {
              "Statement": [
                {
                  "Action": [
                    "lambda:InvokeFunction",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:lambda:*:*:function:qna-*",
                    "arn:aws:lambda:*:*:function:QNA-*",
                    {
                      "Fn::GetAtt": [
                        "ESQueryLambda",
                        "Arn",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "ESProxyLambda",
                        "Arn",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "ESLoggingLambda",
                        "Arn",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "ESQidLambda",
                        "Arn",
                      ],
                    },
                    {
                      "Fn::If": [
                        "EmbeddingsLambdaArn",
                        {
                          "Ref": "EmbeddingsLambdaArn",
                        },
                        {
                          "Ref": "AWS::NoValue",
                        },
                      ],
                    },
                    {
                      "Fn::If": [
                        "LLMLambdaArn",
                        {
                          "Ref": "LLMLambdaArn",
                        },
                        {
                          "Ref": "AWS::NoValue",
                        },
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
          ],
        },
        "Roles": [
          {
            "Ref": "FulfillmentLambdaRole",
          },
        ],
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "Jobs": {
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "API",
            "RootResourceId",
          ],
        },
        "PathPart": "jobs",
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "JobsGet": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W59",
              "reason": "This ApiGateway Method does not need authorization setup",
            },
          ],
        },
      },
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($root="https://\${!context.domainName}/\${!context.stage}")

{
    "_links":{
        "imports":{
            "href":"$root/jobs/imports",
            "bucket":"\${ImportBucket}",
            "uploadPrefix":"data/",
            "statusPrefix":"Status/"
        },
        "exports":{
            "href":"$root/jobs/exports"
        },
        "testall":{
            "href":"$root/jobs/testall",
            "bucket":"\${TestAllBucket}",
            "statusPrefix":"Status/"
        }
    }
}

",
                },
              },
              "StatusCode": "200",
            },
          ],
          "RequestTemplates": {
            "application/json": "{"statusCode": 200}",
          },
          "Type": "MOCK",
        },
        "MethodResponses": [
          {
            "StatusCode": 200,
          },
        ],
        "ResourceId": {
          "Ref": "Jobs",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "LexAccessPolicy": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W13",
              "reason": "This policy is required to have * resource",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "lex:RecognizeText",
                "lex:RecognizeUtterance",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:*",
                },
              ],
            },
            {
              "Action": [
                "polly:SynthesizeSpeech",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Sub": "arn:\${AWS::Partition}:polly:\${AWS::Region}:\${AWS::AccountId}:*",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "Roles": {
          "Fn::If": [
            "Public",
            [
              {
                "Ref": "AdminRole",
              },
              {
                "Ref": "UnauthenticatedRole",
              },
              {
                "Ref": "UserRole",
              },
            ],
            [
              {
                "Ref": "AdminRole",
              },
              {
                "Ref": "UserRole",
              },
            ],
          ],
        },
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "LexBotPolicy": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "IAM_POLICY_NON_COMPLIANT_ARN",
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "lex:RecognizeText",
              ],
              "Effect": "Allow",
              "Resource": [
                "arn:aws:lex:*:*:bot:QNA*",
                "arn:aws:lex:*:*:bot*",
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "Roles": [
          {
            "Ref": "FulfillmentLambdaRole",
          },
        ],
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "LexBuildCodeVersion": {
      "Properties": {
        "Bucket": {
          "Ref": "BootstrapBucket",
        },
        "BuildDate": Any<String>,
        "Key": {
          "Fn::Sub": "\${BootstrapPrefix}/lambda/lex-build.zip",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3Version",
    },
    "LexBuildInvokePolicy": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "lambda:InvokeFunction",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "LexBuildLambda",
                    "Arn",
                  ],
                },
                {
                  "Fn::GetAtt": [
                    "LexBuildLambdaPoll",
                    "Arn",
                  ],
                },
                {
                  "Fn::GetAtt": [
                    "Lexv2BotLambda",
                    "Arn",
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "Roles": [
          {
            "Ref": "LexBuildLambdaRole",
          },
        ],
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "LexBuildLambda": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "This lambda function does not require to have ReservedConcurrentExecutions",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "LAMBDA_CONCURRENCY_CHECK",
            "LAMBDA_INSIDE_VPC",
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "BootstrapBucket",
          },
          "S3Key": {
            "Fn::Sub": "\${BootstrapPrefix}/lambda/lex-build.zip",
          },
          "S3ObjectVersion": {
            "Ref": "LexBuildCodeVersion",
          },
        },
        "Environment": {
          "Variables": {
            "ADDRESS": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Fn::GetAtt": [
                      "ESVar",
                      "ESAddress",
                    ],
                  },
                ],
              ],
            },
            "INDEX": {
              "Fn::GetAtt": [
                "Var",
                "index",
              ],
            },
            "LEXV2_BUILD_LAMBDA": {
              "Ref": "Lexv2BotLambda",
            },
            "LEXV2_STATUS_KEY": "lexV2status.json",
            "POLL_LAMBDA": {
              "Fn::GetAtt": [
                "LexBuildLambdaPoll",
                "Arn",
              ],
            },
            "SOLUTION_ID": "SO0189",
            "SOLUTION_VERSION": "vx.x.x",
            "STATUS_BUCKET": {
              "Ref": "BuildStatusBucket",
            },
            "UTTERANCE_BUCKET": {
              "Ref": "AssetBucket",
            },
            "UTTERANCE_KEY": "default-utterances.json",
          },
        },
        "Handler": "index.handler",
        "Layers": [
          {
            "Ref": "AwsSdkLayerLambdaLayer",
          },
          {
            "Ref": "CommonModulesLambdaLayer",
          },
        ],
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "LexBuildLambdaLogGroup",
          },
        },
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "LexBuildLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs",
        "Tags": [
          {
            "Key": "Type",
            "Value": "Api",
          },
        ],
        "Timeout": 900,
        "TracingConfig": {
          "Fn::If": [
            "XRAYEnabled",
            {
              "Mode": "Active",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SecurityGroupIds": {
                "Ref": "VPCSecurityGroupIdList",
              },
              "SubnetIds": {
                "Ref": "VPCSubnetIdList",
              },
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "LexBuildLambdaLogGroup": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
            "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Sub": "/aws/lambda/\${AWS::StackName}-LexBuildLambda",
              },
              {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Fn::If": [
            "LogRetentionPeriodIsNotZero",
            {
              "Ref": "LogRetentionPeriod",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "LexBuildLambdaPoll": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "This lambda function does not require to have ReservedConcurrentExecutions",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "LAMBDA_CONCURRENCY_CHECK",
            "LAMBDA_INSIDE_VPC",
          ],
        },
      },
      "Properties": {
        "Code": {
          "ZipFile": "/** ************************************************************************************************
*   Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.                             *
*   SPDX-License-Identifier: Apache-2.0                                                            *
 ************************************************************************************************ */

const { LambdaClient, InvokeCommand } = require('@aws-sdk/client-lambda');
const { LexModelBuildingServiceClient, GetBotCommand } = require('@aws-sdk/client-lex-model-building-service');
const { S3Client, GetObjectCommand, PutObjectCommand } = require('@aws-sdk/client-s3');
const customSdkConfig = require('sdk-config/customSdkConfig');

const region = process.env.AWS_REGION;
const lambda = new LambdaClient(customSdkConfig('C001', { region }));
const lex = new LexModelBuildingServiceClient(customSdkConfig('C001', { region }));
const s3 = new S3Client(customSdkConfig('C001', { region }));

const invokeLambda = async function invokeLambda(event) {
    return new Promise((res, rej) => {
        setTimeout(async () => {
            const params = {
                FunctionName: process.env.AWS_LAMBDA_FUNCTION_NAME,
                InvocationType: 'Event',
                Payload: JSON.stringify(event),
            };
            const invokeCmd = new InvokeCommand(params);
            await lambda.send(invokeCmd)
                .then((result) => {
                    res(result);
                })
                .catch((e) => {
                    console.log(e);
                    rej(e);
                });
        }, 2000);
    });
};

exports.handler = async function (event, context, callback) {
    try {
        const getObjCmd = new GetObjectCommand({
            Bucket: process.env.STATUS_BUCKET,
            Key: process.env.STATUS_KEY,
        });
        const s3Response = await s3.send(getObjCmd);
        const readableStream = Buffer.concat(await s3Response.Body.toArray());
        const status = JSON.parse(readableStream);

        const getBotCmd = new GetBotCommand({
            name: process.env.BOT_NAME,
            versionOrAlias: '$LATEST',
        });
        const lexResponse = await lex.send(getBotCmd);

        status.status = lexResponse.status;

        if (lexResponse.status === 'BUILDING') {
            await invokeLambda(event);
        }

        const params = {
            Bucket: process.env.STATUS_BUCKET,
            Key: process.env.STATUS_KEY,
            Body: JSON.stringify(status),
        };
        const putObjectCmd = new PutObjectCommand(params);
        await s3.send(putObjectCmd);
    } catch (error) {
        console.log('An error occurred in master lex-build: ', error);
        throw new Error(error.message);
    }
};
",
        },
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0189",
            "SOLUTION_VERSION": "vx.x.x",
            "STATUS_BUCKET": {
              "Ref": "BuildStatusBucket",
            },
          },
        },
        "Handler": "index.handler",
        "Layers": [
          {
            "Ref": "AwsSdkLayerLambdaLayer",
          },
          {
            "Ref": "CommonModulesLambdaLayer",
          },
        ],
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "LexBuildLambdaPollLogGroup",
          },
        },
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "LexBuildLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs",
        "Tags": [
          {
            "Key": "Type",
            "Value": "Api",
          },
        ],
        "Timeout": 900,
        "TracingConfig": {
          "Fn::If": [
            "XRAYEnabled",
            {
              "Mode": "Active",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SecurityGroupIds": {
                "Ref": "VPCSecurityGroupIdList",
              },
              "SubnetIds": {
                "Ref": "VPCSubnetIdList",
              },
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "LexBuildLambdaPollLogGroup": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
            "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Sub": "/aws/lambda/\${AWS::StackName}-LexBuildLambdaPoll",
              },
              {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Fn::If": [
            "LogRetentionPeriodIsNotZero",
            {
              "Ref": "LogRetentionPeriod",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "LexBuildLambdaRole": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W11",
              "reason": "This IAM role requires to have * resource on its permission policy",
            },
            {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray",
            },
            {
              "id": "W76",
              "reason": "This role is required to have high SPCM",
            },
            {
              "id": "F3",
              "reason": "This role policy is required to have * action in its policy",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "IAM_NO_INLINE_POLICY_CHECK",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Ref": "QueryPolicy",
          },
        ],
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
                {
                  "Action": [
                    "ec2:CreateNetworkInterface",
                    "ec2:AssignPrivateIpAddresses",
                    "ec2:UnassignPrivateIpAddresses",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterface",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "lambdaVPCAccessExecutionRole",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "xray:PutTraceSegments",
                    "xray:PutTelemetryRecords",
                    "xray:GetSamplingRules",
                    "xray:GetSamplingTargets",
                    "xray:GetSamplingStatisticSummaries",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*",
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "xrayDaemonWriteAccess",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "polly:SynthesizeSpeech",
                    "logs:DescribeLogGroups",
                    "cloudwatch:DescribeAlarms",
                    "kms:DescribeKey",
                    "s3:GetBucketLocation",
                    "lambda:GetPolicy",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:kms:\${AWS::Region}:\${AWS::AccountId}:key/*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:polly:\${AWS::Region}:\${AWS::AccountId}:lexicon/*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lambda:\${AWS::Region}:\${AWS::AccountId}:function:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:cloudwatch:\${AWS::Region}:\${AWS::AccountId}:alarm:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:s3:::*",
                    },
                  ],
                },
                {
                  "Action": [
                    "s3:ListAllMyBuckets",
                    "lambda:ListFunctions",
                    "cloudwatch:DescribeAlarmsForMetric",
                    "kms:ListAliases",
                    "iam:ListRoles",
                    "cloudwatch:GetMetricStatistics",
                    "kendra:ListIndices",
                    "polly:DescribeVoices",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
                {
                  "Action": "lex:*",
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:intent:*:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:slottype:*:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot:*:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot-channel:*:*",
                    },
                  ],
                },
                {
                  "Action": [
                    "lex:CreateUploadUrl",
                    "lex:ListBuiltInSlotTypes",
                    "lex:ListBots",
                    "lex:ListBuiltInIntents",
                    "lex:ListImports",
                    "lex:ListExports",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
                {
                  "Action": "lex:*",
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot-alias/*/*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot-alias/*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot/*",
                    },
                  ],
                },
                {
                  "Action": "lex:*",
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:intent:*:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:slottype:*:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot:*:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot-channel:*:*",
                    },
                  ],
                },
                {
                  "Action": [
                    "lex:CreateUploadUrl",
                    "lex:ListBuiltInSlotTypes",
                    "lex:ListBots",
                    "lex:ListBuiltInIntents",
                    "lex:ListImports",
                    "lex:ListExports",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
                {
                  "Action": "lex:*",
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot-alias/*/*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot/*",
                    },
                  ],
                },
                {
                  "Action": [
                    "lambda:AddPermission",
                    "lambda:RemovePermission",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "lambda:Principal": "lex.amazonaws.com",
                    },
                  },
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": "arn:\${AWS::Partition}:lambda:\${AWS::Region}:\${AWS::AccountId}:function:AmazonLex*",
                  },
                },
                {
                  "Action": [
                    "iam:GetRole",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
                    "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels",
                    "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
                    "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*",
                  ],
                },
                {
                  "Action": [
                    "iam:CreateServiceLinkedRole",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "iam:AWSServiceName": "lex.amazonaws.com",
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
                  ],
                },
                {
                  "Action": [
                    "iam:CreateServiceLinkedRole",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "iam:AWSServiceName": "channels.lex.amazonaws.com",
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels",
                  ],
                },
                {
                  "Action": [
                    "iam:CreateServiceLinkedRole",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "iam:AWSServiceName": "lexv2.amazonaws.com",
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
                  ],
                },
                {
                  "Action": [
                    "iam:CreateServiceLinkedRole",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "iam:AWSServiceName": "channels.lexv2.amazonaws.com",
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*",
                  ],
                },
                {
                  "Action": [
                    "iam:DeleteServiceLinkedRole",
                    "iam:GetServiceLinkedRoleDeletionStatus",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
                    "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels",
                    "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
                    "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*",
                  ],
                },
                {
                  "Action": [
                    "iam:PassRole",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "iam:PassedToService": [
                        "lex.amazonaws.com",
                      ],
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
                  ],
                },
                {
                  "Action": [
                    "iam:PassRole",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "iam:PassedToService": [
                        "lexv2.amazonaws.com",
                      ],
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
                  ],
                },
                {
                  "Action": [
                    "iam:PassRole",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "iam:PassedToService": [
                        "channels.lexv2.amazonaws.com",
                      ],
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*",
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "AWSQnaBotLexFullAccess",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "s3:Get*",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::\${AssetBucket}*",
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::\${BuildStatusBucket}*",
                    },
                  ],
                },
                {
                  "Action": [
                    "s3:Put*",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::\${BuildStatusBucket}*",
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "AssetBucketAccess",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LexBuildLambdaStart": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "This lambda function does not require to have ReservedConcurrentExecutions",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "LAMBDA_CONCURRENCY_CHECK",
            "LAMBDA_INSIDE_VPC",
          ],
        },
      },
      "Properties": {
        "Code": {
          "ZipFile": "/** ************************************************************************************************
*   Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.                             *
*   SPDX-License-Identifier: Apache-2.0                                                            *
 ************************************************************************************************ */

const { LambdaClient, InvokeCommand } = require('@aws-sdk/client-lambda');
const { S3Client, PutObjectCommand } = require('@aws-sdk/client-s3');
const customSdkConfig = require('sdk-config/customSdkConfig');

const region = process.env.AWS_REGION;
const lambda = new LambdaClient(customSdkConfig('C002', { region }));
const s3 = new S3Client(customSdkConfig('C022', { region }));
const crypto = require('crypto');

exports.handler = async function (event, context, callback) {
    const token = crypto.randomBytes(16).toString('base64');
    const bucket = process.env.STATUS_BUCKET;
    const lexV2StatusFile = process.env.LEXV2_STATUS_KEY;
    const functionName = process.env.BUILD_FUNCTION;
    const body = JSON.stringify({ status: 'Starting', token });

    console.log('Initializing ', bucket, lexV2StatusFile);
    const params = {
        Bucket: bucket,
        Key: lexV2StatusFile,
        Body: body,
    };
    const putObjectCmdV2 = new PutObjectCommand(params);
    await s3.send(putObjectCmdV2);

    // The BUILD_FUNCTION takes care of rebuilding Lex V2 bot
    console.log('Invoking ', functionName);
    const invokeParams = {
        FunctionName: functionName,
        InvocationType: 'Event',
        Payload: '{}',
    };
    const invokeCmd = new InvokeCommand(invokeParams);
    await lambda.send(invokeCmd);
    callback(null, { token });
};
",
        },
        "Environment": {
          "Variables": {
            "BUILD_FUNCTION": {
              "Fn::GetAtt": [
                "LexBuildLambda",
                "Arn",
              ],
            },
            "LEXV2_STATUS_KEY": "lexV2status.json",
            "SOLUTION_ID": "SO0189",
            "SOLUTION_VERSION": "vx.x.x",
            "STATUS_BUCKET": {
              "Ref": "BuildStatusBucket",
            },
          },
        },
        "Handler": "index.handler",
        "Layers": [
          {
            "Ref": "AwsSdkLayerLambdaLayer",
          },
          {
            "Ref": "CommonModulesLambdaLayer",
          },
        ],
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "LexBuildLambdaStartLogGroup",
          },
        },
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "LexBuildLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs",
        "Tags": [
          {
            "Key": "Type",
            "Value": "Api",
          },
        ],
        "Timeout": 900,
        "TracingConfig": {
          "Fn::If": [
            "XRAYEnabled",
            {
              "Mode": "Active",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SecurityGroupIds": {
                "Ref": "VPCSecurityGroupIdList",
              },
              "SubnetIds": {
                "Ref": "VPCSubnetIdList",
              },
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "LexBuildLambdaStartLogGroup": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
            "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Sub": "/aws/lambda/\${AWS::StackName}-LexBuildLambdaStart",
              },
              {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Fn::If": [
            "LogRetentionPeriodIsNotZero",
            {
              "Ref": "LogRetentionPeriod",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "LexProxyLambda": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "This lambda function does not require to have ReservedConcurrentExecutions",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "LAMBDA_CONCURRENCY_CHECK",
            "LAMBDA_INSIDE_VPC",
          ],
        },
      },
      "Properties": {
        "Code": {
          "ZipFile": "/** ************************************************************************************************
*   Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.                             *
*   SPDX-License-Identifier: Apache-2.0                                                            *
 ************************************************************************************************ */

const { LexModelBuildingService } = require('@aws-sdk/client-lex-model-building-service');
const customSdkConfig = require('sdk-config/customSdkConfig');
const region = process.env.AWS_REGION;
const lex = new LexModelBuildingService(customSdkConfig('C001', { region }));

exports.handler = (event, context, callback) => {
    console.log('Received event:', JSON.stringify(event, null, 2));
    lex[event.fnc](event.params)
        .then((x) => {
            console.log(\`Response: \${JSON.stringify(x, null, 2)}\`);
            callback(null, x);
        })
        .catch((y) => {
            console.log(\`Error: \${y}\`);
            callback(JSON.stringify({
                type: '[InternalServiceError]',
                data: y,
            }));
        });
};
",
        },
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0189",
            "SOLUTION_VERSION": "vx.x.x",
          },
        },
        "Handler": "index.handler",
        "Layers": [
          {
            "Ref": "AwsSdkLayerLambdaLayer",
          },
          {
            "Ref": "CommonModulesLambdaLayer",
          },
        ],
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "LexProxyLambdaLogGroup",
          },
        },
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "LexProxyLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs",
        "Tags": [
          {
            "Key": "Type",
            "Value": "Api",
          },
        ],
        "Timeout": 300,
        "TracingConfig": {
          "Fn::If": [
            "XRAYEnabled",
            {
              "Mode": "Active",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SecurityGroupIds": {
                "Ref": "VPCSecurityGroupIdList",
              },
              "SubnetIds": {
                "Ref": "VPCSubnetIdList",
              },
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "LexProxyLambdaLogGroup": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
            "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Sub": "/aws/lambda/\${AWS::StackName}-LexProxyLambda",
              },
              {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Fn::If": [
            "LogRetentionPeriodIsNotZero",
            {
              "Ref": "LogRetentionPeriod",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "LexProxyLambdaRole": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W11",
              "reason": "This IAM role requires to have * resource on its permission policy",
            },
            {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray",
            },
            {
              "id": "W76",
              "reason": "This role is required to have high SPCM",
            },
            {
              "id": "F3",
              "reason": "This role policy is required to have * action in its policy",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "IAM_NO_INLINE_POLICY_CHECK",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
                {
                  "Action": [
                    "ec2:CreateNetworkInterface",
                    "ec2:AssignPrivateIpAddresses",
                    "ec2:UnassignPrivateIpAddresses",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterface",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "lambdaVPCAccessExecutionRole",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "polly:SynthesizeSpeech",
                    "logs:DescribeLogGroups",
                    "cloudwatch:DescribeAlarms",
                    "kms:DescribeKey",
                    "s3:GetBucketLocation",
                    "lambda:GetPolicy",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:kms:\${AWS::Region}:\${AWS::AccountId}:key/*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:polly:\${AWS::Region}:\${AWS::AccountId}:lexicon/*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lambda:\${AWS::Region}:\${AWS::AccountId}:function:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:cloudwatch:\${AWS::Region}:\${AWS::AccountId}:alarm:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:s3:::*",
                    },
                  ],
                },
                {
                  "Action": [
                    "s3:ListAllMyBuckets",
                    "lambda:ListFunctions",
                    "cloudwatch:DescribeAlarmsForMetric",
                    "kms:ListAliases",
                    "iam:ListRoles",
                    "cloudwatch:GetMetricStatistics",
                    "kendra:ListIndices",
                    "polly:DescribeVoices",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
                {
                  "Action": "lex:*",
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:intent:*:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:slottype:*:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot:*:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot-channel:*:*",
                    },
                  ],
                },
                {
                  "Action": [
                    "lex:CreateUploadUrl",
                    "lex:ListBuiltInSlotTypes",
                    "lex:ListBots",
                    "lex:ListBuiltInIntents",
                    "lex:ListImports",
                    "lex:ListExports",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
                {
                  "Action": "lex:*",
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot-alias/*/*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot-alias/*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot/*",
                    },
                  ],
                },
                {
                  "Action": "lex:*",
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:intent:*:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:slottype:*:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot:*:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot-channel:*:*",
                    },
                  ],
                },
                {
                  "Action": [
                    "lex:CreateUploadUrl",
                    "lex:ListBuiltInSlotTypes",
                    "lex:ListBots",
                    "lex:ListBuiltInIntents",
                    "lex:ListImports",
                    "lex:ListExports",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
                {
                  "Action": "lex:*",
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot-alias/*/*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot/*",
                    },
                  ],
                },
                {
                  "Action": [
                    "lambda:AddPermission",
                    "lambda:RemovePermission",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "lambda:Principal": "lex.amazonaws.com",
                    },
                  },
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": "arn:\${AWS::Partition}:lambda:\${AWS::Region}:\${AWS::AccountId}:function:AmazonLex*",
                  },
                },
                {
                  "Action": [
                    "iam:GetRole",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
                    "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels",
                    "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
                    "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*",
                  ],
                },
                {
                  "Action": [
                    "iam:CreateServiceLinkedRole",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "iam:AWSServiceName": "lex.amazonaws.com",
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
                  ],
                },
                {
                  "Action": [
                    "iam:CreateServiceLinkedRole",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "iam:AWSServiceName": "channels.lex.amazonaws.com",
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels",
                  ],
                },
                {
                  "Action": [
                    "iam:CreateServiceLinkedRole",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "iam:AWSServiceName": "lexv2.amazonaws.com",
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
                  ],
                },
                {
                  "Action": [
                    "iam:CreateServiceLinkedRole",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "iam:AWSServiceName": "channels.lexv2.amazonaws.com",
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*",
                  ],
                },
                {
                  "Action": [
                    "iam:DeleteServiceLinkedRole",
                    "iam:GetServiceLinkedRoleDeletionStatus",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
                    "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels",
                    "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
                    "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*",
                  ],
                },
                {
                  "Action": [
                    "iam:PassRole",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "iam:PassedToService": [
                        "lex.amazonaws.com",
                      ],
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
                  ],
                },
                {
                  "Action": [
                    "iam:PassRole",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "iam:PassedToService": [
                        "lexv2.amazonaws.com",
                      ],
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
                  ],
                },
                {
                  "Action": [
                    "iam:PassRole",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "iam:PassedToService": [
                        "channels.lexv2.amazonaws.com",
                      ],
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*",
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "AWSQnaBotLexFullAccess",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "xray:PutTraceSegments",
                    "xray:PutTelemetryRecords",
                    "xray:GetSamplingRules",
                    "xray:GetSamplingTargets",
                    "xray:GetSamplingStatisticSummaries",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*",
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "xrayDaemonWriteAccess",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "s3:Get*",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::\${BuildStatusBucket}*",
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "Access",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LexStatusLambda": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "This lambda function does not require to have ReservedConcurrentExecutions",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "LAMBDA_CONCURRENCY_CHECK",
            "LAMBDA_INSIDE_VPC",
          ],
        },
      },
      "Properties": {
        "Code": {
          "ZipFile": "/** ************************************************************************************************
*   Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.                             *
*   SPDX-License-Identifier: Apache-2.0                                                            *
 ************************************************************************************************ */

const { LexModelsV2Client, DescribeBotCommand } = require('@aws-sdk/client-lex-models-v2');
const { S3Client, GetObjectCommand } = require('@aws-sdk/client-s3');
const customSdkConfig = require('sdk-config/customSdkConfig');
const region = process.env.AWS_REGION;
const s3 = new S3Client(customSdkConfig('C022', { region }));
const lexv2 = new LexModelsV2Client(customSdkConfig('C002', { region }));


function getStatusResponse(response, build) {
    const botStatus = (response.botStatus == 'Available') ? 'READY' : response.botStatus;

    const statusResponse = {
        lambdaArn: process.env.FULFILLMENT_FUNCTION_ARN,
        lambdaRole: process.env.FULFILLMENT_FUNCTION_ROLE,
        botversion: 'live',
        lexV2botname: process.env.LEXV2_BOT_NAME || 'LEX V2 Bot not installed',
        lexV2botid: process.env.LEXV2_BOT_ID || 'LEX V2 Bot not installed',
        lexV2botalias: process.env.LEXV2_BOT_ALIAS || 'LEX V2 Bot not installed',
        lexV2botaliasid: process.env.LEXV2_BOT_ALIAS_ID || 'LEX V2 Bot not installed',
        lexV2intent: process.env.LEXV2_INTENT || 'LEX V2 Bot not installed',
        lexV2intentFallback: process.env.LEXV2_INTENT_FALLBACK || 'LEX V2 Bot not installed',
        lexV2localeids: process.env.LEXV2_BOT_LOCALE_IDS || 'LEX V2 Bot not installed',
        status: botStatus,
        build,
    };
    return statusResponse;
}

exports.handler = async (event, context, callback) => {
    console.log('Received event:', JSON.stringify(event, null, 2));

    const bucket = process.env.STATUS_BUCKET;
    const lexV2StatusFile = process.env.LEXV2_STATUS_KEY;
    let build = { status: 'READY', token: 'token' };
    let response;

    try {
        const getObjCmd = new GetObjectCommand({ Bucket: bucket, Key: lexV2StatusFile });
        response = await s3.send(getObjCmd);
        const readableStreamV2 = Buffer.concat(await response.Body.toArray());
        build = JSON.parse(readableStreamV2);
    } catch (e) {
        console.log('Unable to read S3 lex bot status file - perhaps it doesn\\'t yet exist. Returning READY');
    }

    const describeBotCmd = new DescribeBotCommand({
        botId: process.env.LEXV2_BOT_ID,
    });
    response = await lexv2.send(describeBotCmd);
    const statusResponse = getStatusResponse(response, build);
    return statusResponse;
};
",
        },
        "Environment": {
          "Variables": {
            "FULFILLMENT_FUNCTION_ARN": {
              "Fn::Join": [
                ":",
                [
                  {
                    "Fn::GetAtt": [
                      "FulfillmentLambda",
                      "Arn",
                    ],
                  },
                  "live",
                ],
              ],
            },
            "FULFILLMENT_FUNCTION_ROLE": {
              "Ref": "FulfillmentLambdaRole",
            },
            "LEXV2_BOT_ALIAS": {
              "Fn::GetAtt": [
                "LexV2Bot",
                "botAlias",
              ],
            },
            "LEXV2_BOT_ALIAS_ID": {
              "Fn::GetAtt": [
                "LexV2Bot",
                "botAliasId",
              ],
            },
            "LEXV2_BOT_ID": {
              "Fn::GetAtt": [
                "LexV2Bot",
                "botId",
              ],
            },
            "LEXV2_BOT_LOCALE_IDS": {
              "Fn::GetAtt": [
                "LexV2Bot",
                "botLocaleIds",
              ],
            },
            "LEXV2_BOT_NAME": {
              "Fn::GetAtt": [
                "LexV2Bot",
                "botName",
              ],
            },
            "LEXV2_INTENT": {
              "Fn::GetAtt": [
                "LexV2Bot",
                "botIntent",
              ],
            },
            "LEXV2_INTENT_FALLBACK": {
              "Fn::GetAtt": [
                "LexV2Bot",
                "botIntentFallback",
              ],
            },
            "LEXV2_STATUS_KEY": "lexV2status.json",
            "SOLUTION_ID": "SO0189",
            "SOLUTION_VERSION": "vx.x.x",
            "STATUS_BUCKET": {
              "Ref": "BuildStatusBucket",
            },
          },
        },
        "Handler": "index.handler",
        "Layers": [
          {
            "Ref": "AwsSdkLayerLambdaLayer",
          },
        ],
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "LexStatusLambdaLogGroup",
          },
        },
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "LexProxyLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs",
        "Tags": [
          {
            "Key": "Type",
            "Value": "Api",
          },
        ],
        "Timeout": 300,
        "TracingConfig": {
          "Fn::If": [
            "XRAYEnabled",
            {
              "Mode": "Active",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SecurityGroupIds": {
                "Ref": "VPCSecurityGroupIdList",
              },
              "SubnetIds": {
                "Ref": "VPCSubnetIdList",
              },
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "LexStatusLambdaLogGroup": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
            "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Sub": "/aws/lambda/\${AWS::StackName}-LexStatusLambda",
              },
              {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Fn::If": [
            "LogRetentionPeriodIsNotZero",
            {
              "Ref": "LogRetentionPeriod",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "LexV2Bot": {
      "Properties": {
        "BuildDate": Any<String>,
        "ServiceToken": {
          "Fn::GetAtt": [
            "Lexv2BotLambda",
            "Arn",
          ],
        },
        "description": "QnABot LexV2 Botx.x.x - v1",
        "localIds": {
          "Ref": "LexV2BotLocaleIds",
        },
        "utterances": [
          "dummy utterance",
        ],
      },
      "Type": "Custom::LexV2Bot",
    },
    "LexV2BotLambdaLogGroup": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
            "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Sub": "/aws/lambda/\${AWS::StackName}-LexV2BotLambda",
              },
              {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Fn::If": [
            "LogRetentionPeriodIsNotZero",
            {
              "Ref": "LogRetentionPeriod",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "Lexv2BotCodeVersion": {
      "Properties": {
        "Bucket": {
          "Ref": "BootstrapBucket",
        },
        "BuildDate": Any<String>,
        "Key": {
          "Fn::Sub": "\${BootstrapPrefix}/lambda/lexv2-build.zip",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3Version",
    },
    "Lexv2BotLambda": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "This lambda function does not require to have ReservedConcurrentExecutions",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "LAMBDA_CONCURRENCY_CHECK",
            "LAMBDA_INSIDE_VPC",
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "BootstrapBucket",
          },
          "S3Key": {
            "Fn::Sub": "\${BootstrapPrefix}/lambda/lexv2-build.zip",
          },
          "S3ObjectVersion": {
            "Ref": "Lexv2BotCodeVersion",
          },
        },
        "Environment": {
          "Variables": {
            "FULFILLMENT_LAMBDA_ARN": {
              "Fn::Join": [
                ":",
                [
                  {
                    "Fn::GetAtt": [
                      "FulfillmentLambda",
                      "Arn",
                    ],
                  },
                  "live",
                ],
              ],
            },
            "LOCALES": {
              "Ref": "LexV2BotLocaleIds",
            },
            "PYTHONPATH": "/var/task/py_modules:/var/runtime:/opt/python",
            "SOLUTION_ID": "SO0189",
            "SOLUTION_VERSION": "vx.x.x",
            "STACKNAME": {
              "Ref": "AWS::StackName",
            },
          },
        },
        "Handler": "handler.handler",
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "LexV2BotLambdaLogGroup",
          },
        },
        "MemorySize": "1024",
        "Role": {
          "Fn::GetAtt": [
            "Lexv2BotLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "python",
        "Tags": [
          {
            "Key": "Type",
            "Value": "Api",
          },
        ],
        "Timeout": 900,
        "TracingConfig": {
          "Fn::If": [
            "XRAYEnabled",
            {
              "Mode": "Active",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SecurityGroupIds": {
                "Ref": "VPCSecurityGroupIdList",
              },
              "SubnetIds": {
                "Ref": "VPCSubnetIdList",
              },
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "Lexv2BotLambdaRole": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W11",
              "reason": "This IAM role requires to have * resource on its permission policy",
            },
            {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray",
            },
            {
              "id": "W76",
              "reason": "This role is required to have high SPCM",
            },
            {
              "id": "F3",
              "reason": "This role policy is required to have * action in its policy",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "IAM_NO_INLINE_POLICY_CHECK",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Ref": "QueryPolicy",
          },
        ],
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
                {
                  "Action": [
                    "ec2:CreateNetworkInterface",
                    "ec2:AssignPrivateIpAddresses",
                    "ec2:UnassignPrivateIpAddresses",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterface",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "lambdaVPCAccessExecutionRole",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "xray:PutTraceSegments",
                    "xray:PutTelemetryRecords",
                    "xray:GetSamplingRules",
                    "xray:GetSamplingTargets",
                    "xray:GetSamplingStatisticSummaries",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*",
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "xrayDaemonWriteAccess",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "polly:SynthesizeSpeech",
                    "logs:DescribeLogGroups",
                    "cloudwatch:DescribeAlarms",
                    "kms:DescribeKey",
                    "s3:GetBucketLocation",
                    "lambda:GetPolicy",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:kms:\${AWS::Region}:\${AWS::AccountId}:key/*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:polly:\${AWS::Region}:\${AWS::AccountId}:lexicon/*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lambda:\${AWS::Region}:\${AWS::AccountId}:function:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:cloudwatch:\${AWS::Region}:\${AWS::AccountId}:alarm:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:s3:::*",
                    },
                  ],
                },
                {
                  "Action": [
                    "s3:ListAllMyBuckets",
                    "lambda:ListFunctions",
                    "cloudwatch:DescribeAlarmsForMetric",
                    "kms:ListAliases",
                    "iam:ListRoles",
                    "cloudwatch:GetMetricStatistics",
                    "kendra:ListIndices",
                    "polly:DescribeVoices",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
                {
                  "Action": "lex:*",
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:intent:*:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:slottype:*:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot:*:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot-channel:*:*",
                    },
                  ],
                },
                {
                  "Action": [
                    "lex:CreateUploadUrl",
                    "lex:ListBuiltInSlotTypes",
                    "lex:ListBots",
                    "lex:ListBuiltInIntents",
                    "lex:ListImports",
                    "lex:ListExports",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
                {
                  "Action": "lex:*",
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot-alias/*/*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot-alias/*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot/*",
                    },
                  ],
                },
                {
                  "Action": "lex:*",
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:intent:*:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:slottype:*:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot:*:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot:*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot-channel:*:*",
                    },
                  ],
                },
                {
                  "Action": [
                    "lex:CreateUploadUrl",
                    "lex:ListBuiltInSlotTypes",
                    "lex:ListBots",
                    "lex:ListBuiltInIntents",
                    "lex:ListImports",
                    "lex:ListExports",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
                {
                  "Action": "lex:*",
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot-alias/*/*",
                    },
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:lex:\${AWS::Region}:\${AWS::AccountId}:bot/*",
                    },
                  ],
                },
                {
                  "Action": [
                    "lambda:AddPermission",
                    "lambda:RemovePermission",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "lambda:Principal": "lex.amazonaws.com",
                    },
                  },
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": "arn:\${AWS::Partition}:lambda:\${AWS::Region}:\${AWS::AccountId}:function:AmazonLex*",
                  },
                },
                {
                  "Action": [
                    "iam:GetRole",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
                    "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels",
                    "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
                    "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*",
                  ],
                },
                {
                  "Action": [
                    "iam:CreateServiceLinkedRole",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "iam:AWSServiceName": "lex.amazonaws.com",
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
                  ],
                },
                {
                  "Action": [
                    "iam:CreateServiceLinkedRole",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "iam:AWSServiceName": "channels.lex.amazonaws.com",
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels",
                  ],
                },
                {
                  "Action": [
                    "iam:CreateServiceLinkedRole",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "iam:AWSServiceName": "lexv2.amazonaws.com",
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
                  ],
                },
                {
                  "Action": [
                    "iam:CreateServiceLinkedRole",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "iam:AWSServiceName": "channels.lexv2.amazonaws.com",
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*",
                  ],
                },
                {
                  "Action": [
                    "iam:DeleteServiceLinkedRole",
                    "iam:GetServiceLinkedRoleDeletionStatus",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
                    "arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels",
                    "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
                    "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*",
                  ],
                },
                {
                  "Action": [
                    "iam:PassRole",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "iam:PassedToService": [
                        "lex.amazonaws.com",
                      ],
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots",
                  ],
                },
                {
                  "Action": [
                    "iam:PassRole",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "iam:PassedToService": [
                        "lexv2.amazonaws.com",
                      ],
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
                  ],
                },
                {
                  "Action": [
                    "iam:PassRole",
                  ],
                  "Condition": {
                    "StringEquals": {
                      "iam:PassedToService": [
                        "channels.lexv2.amazonaws.com",
                      ],
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*",
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "AWSQnaBotLexFullAccess",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "iam:GetRole",
                    "iam:DeleteRole",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
                  ],
                },
                {
                  "Action": [
                    "iam:CreateServiceLinkedRole",
                  ],
                  "Condition": {
                    "StringLike": {
                      "iam:AWSServiceName": "lexv2.amazonaws.com",
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
                  ],
                },
                {
                  "Action": [
                    "iam:PassRole",
                  ],
                  "Condition": {
                    "StringLike": {
                      "iam:PassedToService": [
                        "lexv2.amazonaws.com",
                      ],
                    },
                  },
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*",
                  ],
                },
                {
                  "Action": [
                    "translate:TranslateText",
                    "comprehend:DetectDominantLanguage",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LexV2ServiceLinkedRole",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "s3:Get*",
                    "s3:Put*",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::\${BuildStatusBucket}*",
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "BuildStatusBucketAccess",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "Login": {
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "API",
            "RootResourceId",
          ],
        },
        "PathPart": "pages",
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "MainAccessLogBucket": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W35",
              "reason": "Access logging is not required for this Bucket.",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "S3_BUCKET_NO_PUBLIC_RW_ACL",
          ],
        },
      },
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "MainAccessLogsBucketPolicy": {
      "DependsOn": "MainAccessLogBucket",
      "Properties": {
        "Bucket": {
          "Ref": "MainAccessLogBucket",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:PutObject",
              "Condition": {
                "ArnLike": {
                  "aws:SourceArn": "arn:aws:s3:::*",
                },
                "Bool": {
                  "aws:SecureTransport": "true",
                },
                "StringEquals": {
                  "aws:SourceAccount": {
                    "Ref": "AWS::AccountId",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "logging.s3.amazonaws.com",
              },
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "MainAccessLogBucket",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "MainAccessLogBucket",
                          "Arn",
                        ],
                      },
                    ],
                  ],
                },
              ],
              "Sid": "S3ServerAccessLogsPolicy",
            },
            {
              "Action": "*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "MainAccessLogBucket",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "MainAccessLogBucket",
                          "Arn",
                        ],
                      },
                    ],
                  ],
                },
              ],
              "Sid": "HttpsOnly",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "MessageLambda": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "This lambda function does not require to have ReservedConcurrentExecutions",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "LAMBDA_CONCURRENCY_CHECK",
            "LAMBDA_INSIDE_VPC",
          ],
        },
      },
      "Properties": {
        "Code": {
          "ZipFile": "/** ************************************************************************************************
*   Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.                             *
*   SPDX-License-Identifier: Apache-2.0                                                            *
 ************************************************************************************************ */

exports.handler = (event, context, callback) => {
    console.log('Received event:', JSON.stringify(event, null, 2));
    const approvedDomain = process.env.APPROVED_DOMAIN;

    if (approvedDomain) {
        const regex = new RegExp(\`^[A-Za-z0-9._%+-]+@\${approvedDomain}$\`);
        if (event.request.userAttributes.email.match(regex)) {
            event.response.emailSubject = subject;
            event.response.emailMessage = message(
                event.request.codeParameter,
                event.request.usernameParameter,
            );
            context.done(null, event);
        } else {
            const error = new Error('EMAIL_DOMAIN_DENIED_ERR');
            context.done(error, event);
        }
    } else {
        event.response.emailSubject = subject;
        event.response.emailMessage = message(event.request.codeParameter);
        context.done(null, event);
    }
};

const subject = 'QnABot Signup Verification Code';
function message(code, name) {
    return \`Hello, Your QnABot verification code is: \${code}\`;
}
",
        },
        "Environment": {
          "Variables": {
            "APPROVED_DOMAIN": {
              "Fn::If": [
                "Domain",
                {
                  "Ref": "ApprovedDomain",
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Layers": [
          {
            "Ref": "AwsSdkLayerLambdaLayer",
          },
        ],
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "MessageLambdaLogGroup",
          },
        },
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "SignupLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs",
        "Tags": [
          {
            "Key": "Type",
            "Value": "Cognito",
          },
        ],
        "Timeout": 300,
        "TracingConfig": {
          "Fn::If": [
            "XRAYEnabled",
            {
              "Mode": "Active",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SecurityGroupIds": {
                "Ref": "VPCSecurityGroupIdList",
              },
              "SubnetIds": {
                "Ref": "VPCSubnetIdList",
              },
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "MessageLambdaLogGroup": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
            "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Sub": "/aws/lambda/\${AWS::StackName}-MessageLambda",
              },
              {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Fn::If": [
            "LogRetentionPeriodIsNotZero",
            {
              "Ref": "LogRetentionPeriod",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "MessagePermision": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "MessageLambda",
            "Arn",
          ],
        },
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "UserPool",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "MetricsBucket": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "MainAccessLogBucket",
        "MainAccessLogsBucketPolicy",
      ],
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "S3_BUCKET_NO_PUBLIC_RW_ACL",
          ],
        },
      },
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "LoggingConfiguration": {
          "DestinationBucketName": {
            "Ref": "MainAccessLogBucket",
          },
          "LogFilePrefix": {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "MainAccessLogBucket",
                },
                "/Metrics/",
              ],
            ],
          },
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": [
          {
            "Key": "Use",
            "Value": "Metrics",
          },
        ],
        "VersioningConfiguration": {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
    },
    "MetricsBucketClean": {
      "DependsOn": [
        "CFNInvokePolicy",
        "HTTPSOnlyMetricBucketsPolicy",
      ],
      "Properties": {
        "Bucket": {
          "Ref": "MetricsBucket",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "S3Clean",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3Clean",
    },
    "MetricsIndex": {
      "DependsOn": [
        "OpensearchDomain",
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ESCFNProxyLambda",
            "Arn",
          ],
        },
        "create": {
          "body": {
            "Fn::Sub": "{"settings":{"index.mapping.total_fields.limit":2000}}",
          },
          "endpoint": {
            "Fn::GetAtt": [
              "ESVar",
              "ESAddress",
            ],
          },
          "index": {
            "Fn::Sub": "\${Var.MetricsIndex}",
          },
        },
      },
      "Type": "Custom::ESProxy",
    },
    "OpenSearchCognitoAccessUpdates": {
      "Condition": "FGACEnabled",
      "DependsOn": [
        "OpensearchDomain",
        "Index",
        "FeedbackIndex",
        "MetricsIndex",
        "ESCognitoRole",
        "OpenSearchLogGroupResourcePolicy",
      ],
      "Properties": {
        "AccessPolicies": {
          "Statement": [
            {
              "Action": [
                "es:ESHttp*",
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::GetAtt": [
                      "ESProxyLambdaRole",
                      "Arn",
                    ],
                  },
                ],
              },
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ESVar",
                          "ESArn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "AdvancedSecurityOptions": {
          "AnonymousAuthEnabled": false,
          "Enabled": true,
          "InternalUserDatabaseEnabled": false,
          "MasterUserOptions": {
            "MasterUserARN": {
              "Fn::GetAtt": [
                "ESProxyLambdaRole",
                "Arn",
              ],
            },
          },
        },
        "DomainName": {
          "Fn::GetAtt": [
            "ESVar",
            "ESDomain",
          ],
        },
        "LogPublishingOptions": {
          "AUDIT_LOGS": {
            "CloudWatchLogsLogGroupArn": {
              "Fn::GetAtt": [
                "OpenSearchLogGroup",
                "Arn",
              ],
            },
            "Enabled": true,
          },
          "ES_APPLICATION_LOGS": {
            "CloudWatchLogsLogGroupArn": {
              "Fn::GetAtt": [
                "OpenSearchLogGroup",
                "Arn",
              ],
            },
            "Enabled": true,
          },
          "INDEX_SLOW_LOGS": {
            "CloudWatchLogsLogGroupArn": {
              "Fn::GetAtt": [
                "OpenSearchLogGroup",
                "Arn",
              ],
            },
            "Enabled": true,
          },
          "SEARCH_SLOW_LOGS": {
            "CloudWatchLogsLogGroupArn": {
              "Fn::GetAtt": [
                "OpenSearchLogGroup",
                "Arn",
              ],
            },
            "Enabled": true,
          },
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
      },
      "Type": "Custom::OpenSearchUpdates",
    },
    "OpenSearchDashboardsClient": {
      "Properties": {
        "DomainName": {
          "Fn::GetAtt": [
            "ESVar",
            "ESDomain",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
        "UserPool": {
          "Ref": "UserPool",
        },
      },
      "Type": "Custom::ESCognitoClient",
    },
    "OpenSearchDashboardsIdPool": {
      "Properties": {
        "AllowUnauthenticatedIdentities": false,
        "IdentityPoolName": {
          "Fn::Join": [
            "-",
            [
              "OpenSearchDashboardsIdPool",
              {
                "Ref": "AWS::StackName",
              },
            ],
          ],
        },
      },
      "Type": "AWS::Cognito::IdentityPool",
    },
    "OpenSearchDashboardsRole": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "IAM_NO_INLINE_POLICY_CHECK",
            "CFN_NO_EXPLICIT_RESOURCE_NAMES",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringEquals": {
                  "cognito-identity.amazonaws.com:aud": {
                    "Ref": "OpenSearchDashboardsIdPool",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Federated": "cognito-identity.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "es:ESHttp*",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Sub": "\${ESVar.ESArn}/*",
                  },
                  "Sid": "CognitoAuth",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "OpenSearchDashboardsAccessPolicy",
          },
        ],
        "RoleName": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::Select": [
                  "0",
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          2,
                          {
                            "Fn::Split": [
                              "/",
                              {
                                "Ref": "AWS::StackId",
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                ],
              },
              "-OpenSearchDashboardsRole",
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "OpenSearchDashboardsRoleAttachment": {
      "Properties": {
        "DomainName": {
          "Fn::GetAtt": [
            "ESVar",
            "ESDomain",
          ],
        },
        "IdentityPoolId": {
          "Ref": "OpenSearchDashboardsIdPool",
        },
        "RoleMappings": [
          {
            "AmbiguousRoleResolution": "Deny",
            "ClientId": {
              "Fn::GetAtt": [
                "OpenSearchDashboardsClient",
                "ClientId",
              ],
            },
            "RulesConfiguration": {
              "Rules": [
                {
                  "Claim": "cognito:groups",
                  "MatchType": "Contains",
                  "RoleARN": {
                    "Fn::GetAtt": [
                      "OpenSearchDashboardsRole",
                      "Arn",
                    ],
                  },
                  "Value": "Admin",
                },
              ],
            },
            "Type": "Rules",
            "UserPool": {
              "Ref": "UserPool",
            },
          },
        ],
        "Roles": {
          "authenticated": {
            "Fn::GetAtt": [
              "UserRole",
              "Arn",
            ],
          },
          "unauthenticated": {
            "Fn::GetAtt": [
              "UnauthenticatedRole",
              "Arn",
            ],
          },
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
      },
      "Type": "Custom::CognitoRole",
    },
    "OpenSearchLogGroup": {
      "Condition": "FGACEnabled",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W86",
              "reason": "LogGroup is encrypted by default.",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
            "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "/aws/opensearch/\${AWS::StackName}-\${ESVar.ESDomain}",
        },
        "RetentionInDays": {
          "Fn::If": [
            "LogRetentionPeriodIsNotZero",
            {
              "Ref": "LogRetentionPeriod",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "OpenSearchLogGroupResourcePolicy": {
      "Condition": "FGACEnabled",
      "DependsOn": [
        "OpenSearchLogGroup",
      ],
      "Properties": {
        "PolicyDocument": "{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"opensearchservice.amazonaws.com"},"Action":["logs:PutLogEvents","logs:CreateLogStream"],"Resource":["arn:*:logs:*:*:log-group:/aws/opensearch/*"]}]}",
        "PolicyName": {
          "Fn::Sub": "\${AWS::StackName}-AWSQnaBotOpenSearchLogResourcePolicy",
        },
      },
      "Type": "AWS::Logs::ResourcePolicy",
    },
    "OpensearchDashboards": {
      "DependsOn": [
        "Index",
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ESCFNProxyLambda",
            "Arn",
          ],
        },
        "create": {
          "body": {
            "objects": [
              {
                "attributes": {
                  "description": "Visualize QnABot usage, see what your users are asking, and use the "No Hits" and "Feedback" charts to assess where you should add or tune QnABot content to make the bot smarter. ",
                  "hits": "0",
                  "kibanaSavedObjectMeta": {
                    "searchSourceJSON": "{"query":{"language":"kuery","query":""},"filter":[]}",
                  },
                  "optionsJSON": "{"hidePanelTitles":false,"useMargins":true}",
                  "panelsJSON": "[{"embeddableConfig":{"legendOpen":false,"vis":{"legendOpen":true}},"gridData":{"h":15,"i":"fb115451-3b8a-436f-b916-8a04db4e9d70","w":17,"x":0,"y":0},"panelIndex":"fb115451-3b8a-436f-b916-8a04db4e9d70","version":"7.9.1","panelRefName":"panel_0"},{"embeddableConfig":{},"gridData":{"h":15,"i":"5e25d094-b045-4afe-953d-2d619b05b716","w":14,"x":34,"y":0},"panelIndex":"5e25d094-b045-4afe-953d-2d619b05b716","version":"7.9.1","panelRefName":"panel_1"},{"embeddableConfig":{"legendOpen":false,"vis":{"legendOpen":true}},"gridData":{"h":15,"i":"cf017f39-a5a3-4d3a-9561-862f4c2eb3c5","w":17,"x":17,"y":0},"panelIndex":"cf017f39-a5a3-4d3a-9561-862f4c2eb3c5","version":"7.9.1","panelRefName":"panel_2"},{"embeddableConfig":{},"gridData":{"h":15,"i":"b9b730b1-b3de-42f9-a4de-69197d934a93","w":24,"x":0,"y":15},"panelIndex":"b9b730b1-b3de-42f9-a4de-69197d934a93","version":"7.9.1","panelRefName":"panel_3"},{"embeddableConfig":{},"gridData":{"h":15,"i":"472ff8b6-83bf-4e4d-a8a5-44ce8f7e3dac","w":24,"x":24,"y":15},"panelIndex":"472ff8b6-83bf-4e4d-a8a5-44ce8f7e3dac","version":"7.9.1","panelRefName":"panel_4"},{"embeddableConfig":{},"gridData":{"h":15,"i":"92e5cbb2-fa56-4f15-b7b1-72c11e0bebfc","w":24,"x":0,"y":30},"panelIndex":"92e5cbb2-fa56-4f15-b7b1-72c11e0bebfc","version":"7.9.1","panelRefName":"panel_5"},{"embeddableConfig":{},"gridData":{"h":15,"i":"7ca7cdb0-2472-4eb0-bf7e-ae90f238f869","w":24,"x":24,"y":30},"panelIndex":"7ca7cdb0-2472-4eb0-bf7e-ae90f238f869","version":"7.9.1","panelRefName":"panel_6"},{"embeddableConfig":{},"gridData":{"h":8,"i":"cba70b74-3264-4153-87d2-68c24b552efa","w":10,"x":0,"y":45},"panelIndex":"cba70b74-3264-4153-87d2-68c24b552efa","version":"7.9.1","panelRefName":"panel_7"},{"embeddableConfig":{},"gridData":{"h":15,"i":"4fd7e920-26dd-4d02-8235-bcdff5725991","w":24,"x":10,"y":45},"panelIndex":"4fd7e920-26dd-4d02-8235-bcdff5725991","version":"7.9.1","panelRefName":"panel_8"}]",
                  "refreshInterval": {
                    "pause": "true",
                    "value": "0",
                  },
                  "timeFrom": "now/w",
                  "timeRestore": "false",
                  "timeTo": "now/w",
                  "title": "QnABot Dashboard",
                  "version": "1",
                },
                "id": "052b1350-a37d-11ea-8370-0f1df276cae1",
                "migrationVersion": {
                  "dashboard": "7.9.3",
                },
                "namespaces": [
                  "default",
                ],
                "references": [
                  {
                    "id": "a66d5ed0-a378-11ea-8370-0f1df276cae1",
                    "name": "panel_0",
                    "type": "visualization",
                  },
                  {
                    "id": "d905b930-a37a-11ea-a346-0f81312f0c3c",
                    "name": "panel_1",
                    "type": "visualization",
                  },
                  {
                    "id": "12d24870-e16c-11ea-b423-5f0e2ad2220e",
                    "name": "panel_2",
                    "type": "visualization",
                  },
                  {
                    "id": "68d7c450-a37a-11ea-8370-0f1df276cae1",
                    "name": "panel_3",
                    "type": "visualization",
                  },
                  {
                    "id": "d68ac390-a379-11ea-8370-0f1df276cae1",
                    "name": "panel_4",
                    "type": "visualization",
                  },
                  {
                    "id": "6759e170-a37b-11ea-8370-0f1df276cae1",
                    "name": "panel_5",
                    "type": "visualization",
                  },
                  {
                    "id": "985eb570-a37b-11ea-8370-0f1df276cae1",
                    "name": "panel_6",
                    "type": "visualization",
                  },
                  {
                    "id": "2031f610-a4c1-11ea-a012-c353d737e5ec",
                    "name": "panel_7",
                    "type": "visualization",
                  },
                  {
                    "id": "49e34620-9198-11eb-ab91-adc4ba11519d",
                    "name": "panel_8",
                    "type": "visualization",
                  },
                ],
                "type": "dashboard",
                "updated_at": "2022-12-04T21:21:27.535Z",
                "version": "WzAsMV0=",
              },
              {
                "attributes": {
                  "description": "",
                  "kibanaSavedObjectMeta": {
                    "searchSourceJSON": "{"query":{"language":"kuery","query":""},"filter":[],"indexRefName":"kibanaSavedObjectMeta.searchSourceJSON.index"}",
                  },
                  "title": "Requests",
                  "uiStateJSON": "{}",
                  "version": "1",
                  "visState": "{"title":"Requests","type":"histogram","params":{"addLegend":true,"addTimeMarker":false,"addTooltip":true,"categoryAxes":[{"id":"CategoryAxis-1","labels":{"filter":true,"show":true,"truncate":100},"position":"bottom","scale":{"type":"linear"},"show":true,"style":{},"title":{},"type":"category"}],"dimensions":{"x":{"accessor":0,"format":{"id":"date","params":{"pattern":"HH:mm:ss"}},"params":{"date":true,"interval":"PT30S","format":"HH:mm:ss","bounds":{"min":"2020-07-06T21:55:15.220Z","max":"2020-07-06T22:25:15.220Z"}},"aggType":"date_histogram"},"y":[{"accessor":1,"format":{"id":"number"},"params":{},"aggType":"cardinality"}]},"grid":{"categoryLines":false},"labels":{"show":false},"legendPosition":"right","seriesParams":[{"data":{"id":"1","label":"Count"},"drawLinesBetweenPoints":true,"mode":"stacked","show":"true","showCircles":true,"type":"histogram","valueAxis":"ValueAxis-1"}],"thresholdLine":{"color":"#34130C","show":false,"style":"full","value":10,"width":1},"times":[],"type":"histogram","valueAxes":[{"id":"ValueAxis-1","labels":{"filter":false,"rotate":0,"show":true,"truncate":100},"name":"LeftAxis-1","position":"left","scale":{"mode":"normal","type":"linear"},"show":true,"style":{},"title":{"text":"Count"},"type":"value"}]},"aggs":[{"id":"1","enabled":true,"type":"count","schema":"metric","params":{}},{"id":"2","enabled":true,"type":"date_histogram","schema":"segment","params":{"field":"datetime","timeRange":{"from":"now-30m","to":"now"},"useNormalizedEsInterval":true,"interval":"auto","drop_partials":false,"min_doc_count":1,"extended_bounds":{},"customLabel":"Requests"}},{"id":"3","enabled":true,"type":"terms","schema":"group","params":{"field":"entireRequest.sentiment.keyword","orderBy":"1","order":"desc","size":5,"otherBucket":false,"otherBucketLabel":"Other","missingBucket":false,"missingBucketLabel":"Missing","customLabel":"Sentiment"}}]}",
                },
                "id": "a66d5ed0-a378-11ea-8370-0f1df276cae1",
                "migrationVersion": {
                  "visualization": "7.10.0",
                },
                "namespaces": [
                  "default",
                ],
                "references": [
                  {
                    "id": "Metrics",
                    "name": "kibanaSavedObjectMeta.searchSourceJSON.index",
                    "type": "index-pattern",
                  },
                ],
                "type": "visualization",
                "updated_at": "2022-12-04T21:21:27.535Z",
                "version": "WzEsMV0=",
              },
              {
                "attributes": {
                  "description": "",
                  "kibanaSavedObjectMeta": {
                    "searchSourceJSON": "{"query":{"query":"","language":"kuery"},"filter":[],"indexRefName":"kibanaSavedObjectMeta.searchSourceJSON.index"}",
                  },
                  "title": "Client Types",
                  "uiStateJSON": "{}",
                  "version": "1",
                  "visState": "{"title":"Client Types","type":"pie","params":{"type":"pie","addTooltip":true,"addLegend":true,"legendPosition":"right","isDonut":false,"labels":{"show":false,"values":true,"last_level":true,"truncate":100},"dimensions":{"metric":{"accessor":1,"format":{"id":"number"},"params":{},"aggType":"count"},"buckets":[{"accessor":0,"format":{"id":"terms","params":{"id":"string","otherBucketLabel":"Other","missingBucketLabel":"Missing"}},"params":{},"aggType":"terms"}]}},"aggs":[{"id":"1","enabled":true,"type":"count","schema":"metric","params":{}},{"id":"2","enabled":true,"type":"terms","schema":"segment","params":{"field":"clientType.keyword","orderBy":"1","order":"desc","size":5,"otherBucket":false,"otherBucketLabel":"Other","missingBucket":false,"missingBucketLabel":"Missing","customLabel":"Client Types"}}]}",
                },
                "id": "d905b930-a37a-11ea-a346-0f81312f0c3c",
                "migrationVersion": {
                  "visualization": "7.10.0",
                },
                "namespaces": [
                  "default",
                ],
                "references": [
                  {
                    "id": "Metrics",
                    "name": "kibanaSavedObjectMeta.searchSourceJSON.index",
                    "type": "index-pattern",
                  },
                ],
                "type": "visualization",
                "updated_at": "2022-12-04T21:21:27.535Z",
                "version": "WzIsMV0=",
              },
              {
                "attributes": {
                  "description": "",
                  "kibanaSavedObjectMeta": {
                    "searchSourceJSON": "{"query":{"language":"kuery","query":""},"filter":[],"indexRefName":"kibanaSavedObjectMeta.searchSourceJSON.index"}",
                  },
                  "title": "Requests AnswerSource",
                  "uiStateJSON": "{}",
                  "version": "1",
                  "visState": "{"type":"histogram","aggs":[{"id":"1","enabled":true,"type":"count","schema":"metric","params":{}},{"id":"2","enabled":true,"type":"date_histogram","schema":"segment","params":{"field":"datetime","timeRange":{"from":"2020-08-18T15:44:48.334Z","to":"2020-08-18T15:59:17.582Z"},"useNormalizedEsInterval":true,"scaleMetricValues":false,"interval":"auto","drop_partials":false,"min_doc_count":1,"extended_bounds":{},"customLabel":"Requests"}},{"id":"3","enabled":true,"type":"terms","schema":"group","params":{"field":"entireResponse.answerSource.keyword","orderBy":"1","order":"desc","size":5,"otherBucket":false,"otherBucketLabel":"Other","missingBucket":false,"missingBucketLabel":"Missing","customLabel":"Source"}}],"params":{"addLegend":true,"addTimeMarker":false,"addTooltip":true,"categoryAxes":[{"id":"CategoryAxis-1","labels":{"filter":true,"show":true,"truncate":100},"position":"bottom","scale":{"type":"linear"},"show":true,"style":{},"title":{},"type":"category"}],"dimensions":{"x":{"accessor":0,"aggType":"date_histogram","format":{"id":"date","params":{"pattern":"HH:mm:ss"}},"params":{"bounds":{"max":"2020-07-06T22:25:15.220Z","min":"2020-07-06T21:55:15.220Z"},"date":true,"format":"HH:mm:ss","interval":"PT30S"}},"y":[{"accessor":1,"aggType":"cardinality","format":{"id":"number"},"params":{}}]},"grid":{"categoryLines":false},"labels":{"show":false},"legendPosition":"right","seriesParams":[{"data":{"id":"1","label":"Count"},"drawLinesBetweenPoints":true,"mode":"stacked","show":"true","showCircles":true,"type":"histogram","valueAxis":"ValueAxis-1"}],"thresholdLine":{"color":"#34130C","show":false,"style":"full","value":10,"width":1},"times":[],"type":"histogram","valueAxes":[{"id":"ValueAxis-1","labels":{"filter":false,"rotate":0,"show":true,"truncate":100},"name":"LeftAxis-1","position":"left","scale":{"mode":"normal","type":"linear"},"show":true,"style":{},"title":{"text":"Count"},"type":"value"}]},"title":"Requests AnswerSource"}",
                },
                "id": "12d24870-e16c-11ea-b423-5f0e2ad2220e",
                "migrationVersion": {
                  "visualization": "7.10.0",
                },
                "namespaces": [
                  "default",
                ],
                "references": [
                  {
                    "id": "Metrics",
                    "name": "kibanaSavedObjectMeta.searchSourceJSON.index",
                    "type": "index-pattern",
                  },
                ],
                "type": "visualization",
                "updated_at": "2022-12-04T21:21:27.535Z",
                "version": "WzMsMV0=",
              },
              {
                "attributes": {
                  "description": "",
                  "kibanaSavedObjectMeta": {
                    "searchSourceJSON": "{"query":{"query":"","language":"kuery"},"filter":[],"indexRefName":"kibanaSavedObjectMeta.searchSourceJSON.index"}",
                  },
                  "title": "Logged Utterances",
                  "uiStateJSON": "{}",
                  "version": "1",
                  "visState": "{"title":"Logged Utterances","type":"tagcloud","params":{"scale":"linear","orientation":"single","minFontSize":18,"maxFontSize":72,"showLabel":true,"metric":{"type":"vis_dimension","accessor":0,"format":{"id":"string","params":{}}}},"aggs":[{"id":"1","enabled":true,"type":"count","schema":"metric","params":{}},{"id":"2","enabled":true,"type":"terms","schema":"segment","params":{"field":"utterance.keyword","orderBy":"1","order":"desc","size":1000,"otherBucket":false,"otherBucketLabel":"Other","missingBucket":false,"missingBucketLabel":"Missing","customLabel":"Logged Utterances"}}]}",
                },
                "id": "68d7c450-a37a-11ea-8370-0f1df276cae1",
                "migrationVersion": {
                  "visualization": "7.10.0",
                },
                "namespaces": [
                  "default",
                ],
                "references": [
                  {
                    "id": "Metrics",
                    "name": "kibanaSavedObjectMeta.searchSourceJSON.index",
                    "type": "index-pattern",
                  },
                ],
                "type": "visualization",
                "updated_at": "2022-12-04T21:21:27.535Z",
                "version": "WzQsMV0=",
              },
              {
                "attributes": {
                  "description": "",
                  "kibanaSavedObjectMeta": {
                    "searchSourceJSON": "{"query":{"query":"entireResponse.got_hits:0","language":"kuery"},"filter":[],"indexRefName":"kibanaSavedObjectMeta.searchSourceJSON.index"}",
                  },
                  "title": "No Hits",
                  "uiStateJSON": "{}",
                  "version": "1",
                  "visState": "{"title":"No Hits","type":"tagcloud","params":{"scale":"linear","orientation":"single","minFontSize":18,"maxFontSize":72,"showLabel":true,"metric":{"type":"vis_dimension","accessor":0,"format":{"id":"string","params":{}}}},"aggs":[{"id":"1","enabled":true,"type":"count","schema":"metric","params":{}},{"id":"2","enabled":true,"type":"terms","schema":"segment","params":{"field":"utterance.keyword","orderBy":"1","order":"desc","size":1000,"otherBucket":false,"otherBucketLabel":"Other","missingBucket":false,"missingBucketLabel":"Missing","customLabel":"No Hits"}}]}",
                },
                "id": "d68ac390-a379-11ea-8370-0f1df276cae1",
                "migrationVersion": {
                  "visualization": "7.10.0",
                },
                "namespaces": [
                  "default",
                ],
                "references": [
                  {
                    "id": "Metrics",
                    "name": "kibanaSavedObjectMeta.searchSourceJSON.index",
                    "type": "index-pattern",
                  },
                ],
                "type": "visualization",
                "updated_at": "2022-12-04T21:21:27.535Z",
                "version": "WzUsMV0=",
              },
              {
                "attributes": {
                  "description": "",
                  "kibanaSavedObjectMeta": {
                    "searchSourceJSON": "{"query":{"query":"feedback:correct","language":"kuery"},"filter":[],"indexRefName":"kibanaSavedObjectMeta.searchSourceJSON.index"}",
                  },
                  "title": "Positive Feedback",
                  "uiStateJSON": "{}",
                  "version": "1",
                  "visState": "{"title":"Positive Feedback","type":"tagcloud","params":{"scale":"linear","orientation":"single","minFontSize":18,"maxFontSize":72,"showLabel":true,"metric":{"type":"vis_dimension","accessor":0,"format":{"id":"string","params":{}}}},"aggs":[{"id":"1","enabled":true,"type":"count","schema":"metric","params":{}},{"id":"2","enabled":true,"type":"terms","schema":"segment","params":{"field":"utterance.keyword","orderBy":"1","order":"desc","size":100,"otherBucket":false,"otherBucketLabel":"Other","missingBucket":false,"missingBucketLabel":"Missing","customLabel":"Thumbs Up"}}]}",
                },
                "id": "6759e170-a37b-11ea-8370-0f1df276cae1",
                "migrationVersion": {
                  "visualization": "7.10.0",
                },
                "namespaces": [
                  "default",
                ],
                "references": [
                  {
                    "id": "Feedback",
                    "name": "kibanaSavedObjectMeta.searchSourceJSON.index",
                    "type": "index-pattern",
                  },
                ],
                "type": "visualization",
                "updated_at": "2022-12-04T21:21:27.535Z",
                "version": "WzYsMV0=",
              },
              {
                "attributes": {
                  "description": "",
                  "kibanaSavedObjectMeta": {
                    "searchSourceJSON": "{"query":{"query":"feedback:incorrect","language":"kuery"},"filter":[],"indexRefName":"kibanaSavedObjectMeta.searchSourceJSON.index"}",
                  },
                  "title": "Negative Feedback",
                  "uiStateJSON": "{}",
                  "version": "1",
                  "visState": "{"title":"Negative Feedback","type":"tagcloud","params":{"scale":"linear","orientation":"single","minFontSize":18,"maxFontSize":72,"showLabel":true,"metric":{"type":"vis_dimension","accessor":1,"format":{"id":"string","params":{}}},"bucket":{"type":"vis_dimension","accessor":0,"format":{"id":"terms","params":{"id":"string","otherBucketLabel":"Other","missingBucketLabel":"Missing"}}}},"aggs":[{"id":"1","enabled":true,"type":"count","schema":"metric","params":{}},{"id":"2","enabled":true,"type":"terms","schema":"segment","params":{"field":"utterance.keyword","orderBy":"1","order":"desc","size":100,"otherBucket":false,"otherBucketLabel":"Other","missingBucket":false,"missingBucketLabel":"Missing","customLabel":"Thumbs Down"}}]}",
                },
                "id": "985eb570-a37b-11ea-8370-0f1df276cae1",
                "migrationVersion": {
                  "visualization": "7.10.0",
                },
                "namespaces": [
                  "default",
                ],
                "references": [
                  {
                    "id": "Feedback",
                    "name": "kibanaSavedObjectMeta.searchSourceJSON.index",
                    "type": "index-pattern",
                  },
                ],
                "type": "visualization",
                "updated_at": "2022-12-04T21:21:27.535Z",
                "version": "WzcsMV0=",
              },
              {
                "attributes": {
                  "description": "",
                  "kibanaSavedObjectMeta": {
                    "searchSourceJSON": "{"query":{"query":"","language":"kuery"},"filter":[],"indexRefName":"kibanaSavedObjectMeta.searchSourceJSON.index"}",
                  },
                  "title": "QnAItemCount",
                  "uiStateJSON": "{}",
                  "version": "1",
                  "visState": "{"title":"QnAItemCount","type":"metric","params":{"metric":{"percentageMode":false,"useRanges":false,"colorSchema":"Green to Red","metricColorMode":"None","colorsRange":[{"type":"range","from":0,"to":10000}],"labels":{"show":true},"invertColors":false,"style":{"bgFill":"#000","bgColor":false,"labelColor":false,"subText":"","fontSize":60}},"dimensions":{"metrics":[{"type":"vis_dimension","accessor":0,"format":{"id":"number","params":{}}}]},"addTooltip":true,"addLegend":false,"type":"metric"},"aggs":[{"id":"1","enabled":true,"type":"count","schema":"metric","params":{"customLabel":"QnA Item Count"}}]}",
                },
                "id": "2031f610-a4c1-11ea-a012-c353d737e5ec",
                "migrationVersion": {
                  "visualization": "7.10.0",
                },
                "namespaces": [
                  "default",
                ],
                "references": [
                  {
                    "id": "QnaItems",
                    "name": "kibanaSavedObjectMeta.searchSourceJSON.index",
                    "type": "index-pattern",
                  },
                ],
                "type": "visualization",
                "updated_at": "2022-12-04T21:21:27.535Z",
                "version": "WzgsMV0=",
              },
              {
                "attributes": {
                  "description": "",
                  "kibanaSavedObjectMeta": {
                    "searchSourceJSON": "{"query":{"query":"","language":"kuery"},"filter":[],"indexRefName":"kibanaSavedObjectMeta.searchSourceJSON.index"}",
                  },
                  "title": "Answer Sources",
                  "uiStateJSON": "{"vis":{"params":{"sort":{"columnIndex":0,"direction":"asc"}}}}",
                  "version": "1",
                  "visState": "{"title":"Answer Sources","type":"table","aggs":[{"id":"1","enabled":true,"type":"count","params":{},"schema":"metric"},{"id":"2","enabled":true,"type":"terms","params":{"field":"entireResponse.result.answersource.keyword","orderBy":"1","order":"desc","size":5,"otherBucket":false,"otherBucketLabel":"Other","missingBucket":false,"missingBucketLabel":"Missing","customLabel":"Answer Source"},"schema":"bucket"}],"params":{"perPage":10,"showPartialRows":false,"showMetricsAtAllLevels":false,"sort":{"columnIndex":null,"direction":null},"showTotal":false,"totalFunc":"sum","percentageCol":""}}",
                },
                "id": "49e34620-9198-11eb-ab91-adc4ba11519d",
                "migrationVersion": {
                  "visualization": "7.10.0",
                },
                "namespaces": [
                  "default",
                ],
                "references": [
                  {
                    "id": "Metrics",
                    "name": "kibanaSavedObjectMeta.searchSourceJSON.index",
                    "type": "index-pattern",
                  },
                ],
                "type": "visualization",
                "updated_at": "2022-12-04T21:21:27.535Z",
                "version": "WzksMV0=",
              },
              {
                "attributes": {
                  "fields": "[{"name":"_id","type":"string","esTypes":["_id"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":false},{"name":"_index","type":"string","esTypes":["_index"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":false},{"name":"_score","type":"number","count":0,"scripted":false,"searchable":false,"aggregatable":false,"readFromDocValues":false},{"name":"_source","type":"_source","esTypes":["_source"],"count":0,"scripted":false,"searchable":false,"aggregatable":false,"readFromDocValues":false},{"name":"_type","type":"string","esTypes":["_type"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":false},{"name":"answer","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"answer.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"answer"}}},{"name":"clientType","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"clientType.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"clientType"}}},{"name":"datetime","type":"date","esTypes":["date"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireRequest._clientType","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._clientType.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._clientType"}}},{"name":"entireRequest._event.bot.alias","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._event.bot.alias.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._event.bot.alias"}}},{"name":"entireRequest._event.bot.name","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._event.bot.name.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._event.bot.name"}}},{"name":"entireRequest._event.bot.version","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._event.bot.version.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._event.bot.version"}}},{"name":"entireRequest._event.currentIntent.confirmationStatus","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._event.currentIntent.confirmationStatus.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._event.currentIntent.confirmationStatus"}}},{"name":"entireRequest._event.currentIntent.name","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._event.currentIntent.name.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._event.currentIntent.name"}}},{"name":"entireRequest._event.currentIntent.slotDetails.slot.originalValue","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._event.currentIntent.slotDetails.slot.originalValue.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._event.currentIntent.slotDetails.slot.originalValue"}}},{"name":"entireRequest._event.currentIntent.slotDetails.slot.resolutions.value","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._event.currentIntent.slotDetails.slot.resolutions.value.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._event.currentIntent.slotDetails.slot.resolutions.value"}}},{"name":"entireRequest._event.currentIntent.slots.slot","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._event.currentIntent.slots.slot.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._event.currentIntent.slots.slot"}}},{"name":"entireRequest._event.errorFound","type":"boolean","esTypes":["boolean"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireRequest._event.inputTranscript","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._event.inputTranscript.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._event.inputTranscript"}}},{"name":"entireRequest._event.invocationSource","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._event.invocationSource.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._event.invocationSource"}}},{"name":"entireRequest._event.messageVersion","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._event.messageVersion.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._event.messageVersion"}}},{"name":"entireRequest._event.outputDialogMode","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._event.outputDialogMode.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._event.outputDialogMode"}}},{"name":"entireRequest._event.recentIntentSummaryView.confirmationStatus","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._event.recentIntentSummaryView.confirmationStatus.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._event.recentIntentSummaryView.confirmationStatus"}}},{"name":"entireRequest._event.recentIntentSummaryView.dialogActionType","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._event.recentIntentSummaryView.dialogActionType.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._event.recentIntentSummaryView.dialogActionType"}}},{"name":"entireRequest._event.recentIntentSummaryView.fulfillmentState","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._event.recentIntentSummaryView.fulfillmentState.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._event.recentIntentSummaryView.fulfillmentState"}}},{"name":"entireRequest._event.recentIntentSummaryView.intentName","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._event.recentIntentSummaryView.intentName.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._event.recentIntentSummaryView.intentName"}}},{"name":"entireRequest._event.recentIntentSummaryView.slots.slot","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._event.recentIntentSummaryView.slots.slot.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._event.recentIntentSummaryView.slots.slot"}}},{"name":"entireRequest._event.sessionAttributes.qnabot_gotanswer","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._event.sessionAttributes.qnabot_gotanswer.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._event.sessionAttributes.qnabot_gotanswer"}}},{"name":"entireRequest._event.sessionAttributes.qnabot_qid","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._event.sessionAttributes.qnabot_qid.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._event.sessionAttributes.qnabot_qid"}}},{"name":"entireRequest._event.sessionAttributes.qnabotcontext","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._event.sessionAttributes.qnabotcontext.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._event.sessionAttributes.qnabotcontext"}}},{"name":"entireRequest._event.userId","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._event.userId.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._event.userId"}}},{"name":"entireRequest._info.es.address","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._info.es.address.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._info.es.address"}}},{"name":"entireRequest._info.es.index","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._info.es.index.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._info.es.index"}}},{"name":"entireRequest._info.es.service.proxy","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._info.es.service.proxy.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._info.es.service.proxy"}}},{"name":"entireRequest._info.es.service.qid","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._info.es.service.qid.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._info.es.service.qid"}}},{"name":"entireRequest._info.es.type","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._info.es.type.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._info.es.type"}}},{"name":"entireRequest._preferredResponseType","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._preferredResponseType.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._preferredResponseType"}}},{"name":"entireRequest._settings.ALT_SEARCH_KENDRA_INDEXES","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._settings.ALT_SEARCH_KENDRA_INDEXES.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._settings.ALT_SEARCH_KENDRA_INDEXES"}}},{"name":"entireRequest._settings.DEFAULT_ALEXA_LAUNCH_MESSAGE","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._settings.DEFAULT_ALEXA_LAUNCH_MESSAGE.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._settings.DEFAULT_ALEXA_LAUNCH_MESSAGE"}}},{"name":"entireRequest._settings.DEFAULT_ALEXA_STOP_MESSAGE","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._settings.DEFAULT_ALEXA_STOP_MESSAGE.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._settings.DEFAULT_ALEXA_STOP_MESSAGE"}}},{"name":"entireRequest._settings.DEFAULT_USER_POOL_JWKS_URL","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._settings.DEFAULT_USER_POOL_JWKS_URL.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._settings.DEFAULT_USER_POOL_JWKS_URL"}}},{"name":"entireRequest._settings.ELICIT_RESPONSE_BOT_FAILURE_MESSAGE","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._settings.ELICIT_RESPONSE_BOT_FAILURE_MESSAGE.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._settings.ELICIT_RESPONSE_BOT_FAILURE_MESSAGE"}}},{"name":"entireRequest._settings.ELICIT_RESPONSE_DEFAULT_MSG","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._settings.ELICIT_RESPONSE_DEFAULT_MSG.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._settings.ELICIT_RESPONSE_DEFAULT_MSG"}}},{"name":"entireRequest._settings.ELICIT_RESPONSE_MAX_RETRIES","type":"number","esTypes":["long"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireRequest._settings.ELICIT_RESPONSE_RETRY_MESSAGE","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._settings.ELICIT_RESPONSE_RETRY_MESSAGE.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._settings.ELICIT_RESPONSE_RETRY_MESSAGE"}}},{"name":"entireRequest._settings.EMPTYMESSAGE","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._settings.EMPTYMESSAGE.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._settings.EMPTYMESSAGE"}}},{"name":"entireRequest._settings.ENABLE_DEBUG_RESPONSES","type":"boolean","esTypes":["boolean"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireRequest._settings.ENABLE_MULTI_LANGUAGE_SUPPORT","type":"boolean","esTypes":["boolean"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireRequest._settings.ENABLE_REDACTING","type":"boolean","esTypes":["boolean"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireRequest._settings.ENABLE_SENTIMENT_SUPPORT","type":"boolean","esTypes":["boolean"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireRequest._settings.ENFORCE_VERIFIED_IDENTITY","type":"boolean","esTypes":["boolean"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireRequest._settings.ERRORMESSAGE","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._settings.ERRORMESSAGE.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._settings.ERRORMESSAGE"}}},{"name":"entireRequest._settings.ES_KEYWORD_SYNTAX_TYPES","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._settings.ES_KEYWORD_SYNTAX_TYPES.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._settings.ES_KEYWORD_SYNTAX_TYPES"}}},{"name":"entireRequest._settings.ES_MINIMUM_SHOULD_MATCH","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._settings.ES_MINIMUM_SHOULD_MATCH.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._settings.ES_MINIMUM_SHOULD_MATCH"}}},{"name":"entireRequest._settings.ES_NO_HITS_QUESTION","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._settings.ES_NO_HITS_QUESTION.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._settings.ES_NO_HITS_QUESTION"}}},{"name":"entireRequest._settings.ES_PHRASE_BOOST","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._settings.ES_PHRASE_BOOST.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._settings.ES_PHRASE_BOOST"}}},{"name":"entireRequest._settings.ES_SCORE_ANSWER_FIELD","type":"boolean","esTypes":["boolean"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireRequest._settings.ES_SYNTAX_CONFIDENCE_LIMIT","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._settings.ES_SYNTAX_CONFIDENCE_LIMIT.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._settings.ES_SYNTAX_CONFIDENCE_LIMIT"}}},{"name":"entireRequest._settings.ES_USE_FUZZY_MATCH","type":"boolean","esTypes":["boolean"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireRequest._settings.ES_USE_KEYWORD_FILTERS","type":"boolean","esTypes":["boolean"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireRequest._settings.KENDRA_FAQ_CONFIG_MAX_RETRIES","type":"number","esTypes":["long"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireRequest._settings.KENDRA_FAQ_CONFIG_RETRY_DELAY","type":"number","esTypes":["long"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireRequest._settings.KENDRA_FAQ_ES_FALLBACK","type":"boolean","esTypes":["boolean"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireRequest._settings.KENDRA_FAQ_INDEX","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._settings.KENDRA_FAQ_INDEX.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._settings.KENDRA_FAQ_INDEX"}}},{"name":"entireRequest._settings.MINIMUM_CONFIDENCE_SCORE","type":"number","esTypes":["float"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireRequest._settings.NO_VERIFIED_IDENTITY_QUESTION","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._settings.NO_VERIFIED_IDENTITY_QUESTION.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._settings.NO_VERIFIED_IDENTITY_QUESTION"}}},{"name":"entireRequest._settings.REDACTING_REGEX","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._settings.REDACTING_REGEX.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._settings.REDACTING_REGEX"}}},{"name":"entireRequest._settings.SMS_HINT_REMINDER","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._settings.SMS_HINT_REMINDER.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._settings.SMS_HINT_REMINDER"}}},{"name":"entireRequest._settings.SMS_HINT_REMINDER_ENABLE","type":"boolean","esTypes":["boolean"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireRequest._settings.SMS_HINT_REMINDER_INTERVAL_HRS","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._settings.SMS_HINT_REMINDER_INTERVAL_HRS.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._settings.SMS_HINT_REMINDER_INTERVAL_HRS"}}},{"name":"entireRequest._type","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._type.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._type"}}},{"name":"entireRequest._userId","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._userId.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._userId"}}},{"name":"entireRequest._userInfo.FirstSeen","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._userInfo.FirstSeen.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._userInfo.FirstSeen"}}},{"name":"entireRequest._userInfo.InteractionCount","type":"number","esTypes":["long"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireRequest._userInfo.LastSeen","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._userInfo.LastSeen.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._userInfo.LastSeen"}}},{"name":"entireRequest._userInfo.TimeSinceLastInteraction","type":"number","esTypes":["float"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireRequest._userInfo.UserId","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._userInfo.UserId.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._userInfo.UserId"}}},{"name":"entireRequest._userInfo.isVerifiedIdentity","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest._userInfo.isVerifiedIdentity.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest._userInfo.isVerifiedIdentity"}}},{"name":"entireRequest.kendraResultsCached","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest.kendraResultsCached.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest.kendraResultsCached"}}},{"name":"entireRequest.question","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest.question.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest.question"}}},{"name":"entireRequest.sentiment","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest.sentiment.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest.sentiment"}}},{"name":"entireRequest.session.qnabot_gotanswer","type":"boolean","esTypes":["boolean"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireRequest.session.qnabot_qid","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest.session.qnabot_qid.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest.session.qnabot_qid"}}},{"name":"entireRequest.session.qnabotcontext.kendra.kendraIndexId","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest.session.qnabotcontext.kendra.kendraIndexId.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest.session.qnabotcontext.kendra.kendraIndexId"}}},{"name":"entireRequest.session.qnabotcontext.kendra.kendraQueryId","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest.session.qnabotcontext.kendra.kendraQueryId.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest.session.qnabotcontext.kendra.kendraQueryId"}}},{"name":"entireRequest.session.qnabotcontext.kendra.kendraResponsibleQid","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest.session.qnabotcontext.kendra.kendraResponsibleQid.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest.session.qnabotcontext.kendra.kendraResponsibleQid"}}},{"name":"entireRequest.session.qnabotcontext.kendra.kendraResultId","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest.session.qnabotcontext.kendra.kendraResultId.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest.session.qnabotcontext.kendra.kendraResultId"}}},{"name":"entireRequest.session.qnabotcontext.navigation.hasParent","type":"boolean","esTypes":["boolean"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireRequest.session.qnabotcontext.navigation.next","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest.session.qnabotcontext.navigation.next.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest.session.qnabotcontext.navigation.next"}}},{"name":"entireRequest.session.qnabotcontext.previous.a","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest.session.qnabotcontext.previous.a.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest.session.qnabotcontext.previous.a"}}},{"name":"entireRequest.session.qnabotcontext.previous.q","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest.session.qnabotcontext.previous.q.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest.session.qnabotcontext.previous.q"}}},{"name":"entireRequest.session.qnabotcontext.previous.qid","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireRequest.session.qnabotcontext.previous.qid.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireRequest.session.qnabotcontext.previous.qid"}}},{"name":"entireResponse._userInfo.FirstSeen","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse._userInfo.FirstSeen.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse._userInfo.FirstSeen"}}},{"name":"entireResponse._userInfo.InteractionCount","type":"number","esTypes":["long"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireResponse._userInfo.LastSeen","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse._userInfo.LastSeen.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse._userInfo.LastSeen"}}},{"name":"entireResponse._userInfo.TimeSinceLastInteraction","type":"number","esTypes":["float"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireResponse._userInfo.UserId","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse._userInfo.UserId.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse._userInfo.UserId"}}},{"name":"entireResponse._userInfo.isVerifiedIdentity","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse._userInfo.isVerifiedIdentity.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse._userInfo.isVerifiedIdentity"}}},{"name":"entireResponse.answerSource","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.answerSource.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.answerSource"}}},{"name":"entireResponse.card.send","type":"boolean","esTypes":["boolean"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireResponse.card.text","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.card.text.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.card.text"}}},{"name":"entireResponse.card.title","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.card.title.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.card.title"}}},{"name":"entireResponse.card.url","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.card.url.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.card.url"}}},{"name":"entireResponse.got_hits","type":"number","esTypes":["long"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireResponse.kendraResultsCached.QueryId","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.kendraResultsCached.QueryId.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.kendraResultsCached.QueryId"}}},{"name":"entireResponse.kendraResultsCached.ResultItems.AdditionalAttributes.Key","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.kendraResultsCached.ResultItems.AdditionalAttributes.Key.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.kendraResultsCached.ResultItems.AdditionalAttributes.Key"}}},{"name":"entireResponse.kendraResultsCached.ResultItems.AdditionalAttributes.Value.TextWithHighlightsValue.Highlights.BeginOffset","type":"number","esTypes":["long"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireResponse.kendraResultsCached.ResultItems.AdditionalAttributes.Value.TextWithHighlightsValue.Highlights.EndOffset","type":"number","esTypes":["long"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireResponse.kendraResultsCached.ResultItems.AdditionalAttributes.Value.TextWithHighlightsValue.Highlights.TopAnswer","type":"boolean","esTypes":["boolean"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireResponse.kendraResultsCached.ResultItems.AdditionalAttributes.Value.TextWithHighlightsValue.Text","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.kendraResultsCached.ResultItems.AdditionalAttributes.Value.TextWithHighlightsValue.Text.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.kendraResultsCached.ResultItems.AdditionalAttributes.Value.TextWithHighlightsValue.Text"}}},{"name":"entireResponse.kendraResultsCached.ResultItems.AdditionalAttributes.ValueType","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.kendraResultsCached.ResultItems.AdditionalAttributes.ValueType.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.kendraResultsCached.ResultItems.AdditionalAttributes.ValueType"}}},{"name":"entireResponse.kendraResultsCached.ResultItems.DocumentAttributes.Key","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.kendraResultsCached.ResultItems.DocumentAttributes.Key.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.kendraResultsCached.ResultItems.DocumentAttributes.Key"}}},{"name":"entireResponse.kendraResultsCached.ResultItems.DocumentAttributes.Value.StringValue","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.kendraResultsCached.ResultItems.DocumentAttributes.Value.StringValue.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.kendraResultsCached.ResultItems.DocumentAttributes.Value.StringValue"}}},{"name":"entireResponse.kendraResultsCached.ResultItems.DocumentExcerpt.Highlights.BeginOffset","type":"number","esTypes":["long"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireResponse.kendraResultsCached.ResultItems.DocumentExcerpt.Highlights.EndOffset","type":"number","esTypes":["long"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireResponse.kendraResultsCached.ResultItems.DocumentExcerpt.Highlights.TopAnswer","type":"boolean","esTypes":["boolean"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireResponse.kendraResultsCached.ResultItems.DocumentExcerpt.Text","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.kendraResultsCached.ResultItems.DocumentExcerpt.Text.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.kendraResultsCached.ResultItems.DocumentExcerpt.Text"}}},{"name":"entireResponse.kendraResultsCached.ResultItems.DocumentId","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.kendraResultsCached.ResultItems.DocumentId.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.kendraResultsCached.ResultItems.DocumentId"}}},{"name":"entireResponse.kendraResultsCached.ResultItems.DocumentTitle.Highlights.BeginOffset","type":"number","esTypes":["long"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireResponse.kendraResultsCached.ResultItems.DocumentTitle.Highlights.EndOffset","type":"number","esTypes":["long"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireResponse.kendraResultsCached.ResultItems.DocumentTitle.Highlights.TopAnswer","type":"boolean","esTypes":["boolean"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireResponse.kendraResultsCached.ResultItems.DocumentTitle.Text","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.kendraResultsCached.ResultItems.DocumentTitle.Text.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.kendraResultsCached.ResultItems.DocumentTitle.Text"}}},{"name":"entireResponse.kendraResultsCached.ResultItems.DocumentURI","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.kendraResultsCached.ResultItems.DocumentURI.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.kendraResultsCached.ResultItems.DocumentURI"}}},{"name":"entireResponse.kendraResultsCached.ResultItems.Id","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.kendraResultsCached.ResultItems.Id.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.kendraResultsCached.ResultItems.Id"}}},{"name":"entireResponse.kendraResultsCached.ResultItems.Type","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.kendraResultsCached.ResultItems.Type.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.kendraResultsCached.ResultItems.Type"}}},{"name":"entireResponse.kendraResultsCached.TotalNumberOfResults","type":"number","esTypes":["long"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireResponse.kendraResultsCached.originalKendraIndexId","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.kendraResultsCached.originalKendraIndexId.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.kendraResultsCached.originalKendraIndexId"}}},{"name":"entireResponse.message","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.message.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.message"}}},{"name":"entireResponse.plainMessage","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.plainMessage.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.plainMessage"}}},{"name":"entireResponse.result.a","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.result.a.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.result.a"}}},{"name":"entireResponse.result.answersource","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.result.answersource.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.result.answersource"}}},{"name":"entireResponse.result.autotranslate.a","type":"boolean","esTypes":["boolean"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"entireResponse.result.l","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.result.l.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.result.l"}}},{"name":"entireResponse.result.q","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.result.q.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.result.q"}}},{"name":"entireResponse.result.qid","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.result.qid.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.result.qid"}}},{"name":"entireResponse.result.questions.q","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.result.questions.q.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.result.questions.q"}}},{"name":"entireResponse.result.quniqueterms","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.result.quniqueterms.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.result.quniqueterms"}}},{"name":"entireResponse.result.type","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.result.type.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.result.type"}}},{"name":"entireResponse.session.appContext","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.session.appContext.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.session.appContext"}}},{"name":"entireResponse.session.qnabot_gotanswer","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.session.qnabot_gotanswer.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.session.qnabot_gotanswer"}}},{"name":"entireResponse.session.qnabot_qid","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.session.qnabot_qid.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.session.qnabot_qid"}}},{"name":"entireResponse.session.qnabotcontext","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.session.qnabotcontext.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.session.qnabotcontext"}}},{"name":"entireResponse.type","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"entireResponse.type.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"entireResponse.type"}}},{"name":"qid","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"qid.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"qid"}}},{"name":"topic","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"topic.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"topic"}}},{"name":"utterance","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"utterance.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"utterance"}}}]",
                  "timeFieldName": "datetime",
                  "title": "<INDEX_METRICS>",
                },
                "id": "Metrics",
                "migrationVersion": {
                  "index-pattern": "7.6.0",
                },
                "namespaces": [
                  "default",
                ],
                "references": [],
                "type": "index-pattern",
                "updated_at": "2022-12-04T21:21:27.535Z",
                "version": "WzEwLDFd",
              },
              {
                "attributes": {
                  "fields": "[{"name":"_id","type":"string","esTypes":["_id"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":false},{"name":"_index","type":"string","esTypes":["_index"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":false},{"name":"_score","type":"number","count":0,"scripted":false,"searchable":false,"aggregatable":false,"readFromDocValues":false},{"name":"_source","type":"_source","esTypes":["_source"],"count":0,"scripted":false,"searchable":false,"aggregatable":false,"readFromDocValues":false},{"name":"_type","type":"string","esTypes":["_type"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":false},{"name":"alternate","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"alternate.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"alternate"}}},{"name":"answer","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"answer.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"answer"}}},{"name":"datetime","type":"date","esTypes":["date"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"feedback","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"feedback.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"feedback"}}},{"name":"qid","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"qid.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"qid"}}},{"name":"utterance","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"utterance.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"utterance"}}}]",
                  "timeFieldName": "datetime",
                  "title": "<INDEX_FEEDBACK>",
                },
                "id": "Feedback",
                "migrationVersion": {
                  "index-pattern": "7.6.0",
                },
                "namespaces": [
                  "default",
                ],
                "references": [],
                "type": "index-pattern",
                "updated_at": "2022-12-04T21:21:27.535Z",
                "version": "WzExLDFd",
              },
              {
                "attributes": {
                  "fields": "[{"name":"_id","type":"string","esTypes":["_id"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":false},{"name":"_index","type":"string","esTypes":["_index"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":false},{"name":"_score","type":"number","count":0,"scripted":false,"searchable":false,"aggregatable":false,"readFromDocValues":false},{"name":"_source","type":"_source","esTypes":["_source"],"count":0,"scripted":false,"searchable":false,"aggregatable":false,"readFromDocValues":false},{"name":"_type","type":"string","esTypes":["_type"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":false},{"name":"a","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"alt.markdown","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"alt.markdown.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"alt.markdown"}}},{"name":"alt.ssml","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"alt.ssml.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"alt.ssml"}}},{"name":"args","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"args.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"args"}}},{"name":"conditionalChaining","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"conditionalChaining.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"conditionalChaining"}}},{"name":"correctAnswers","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"elicitResponse.response_sessionattr_namespace","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"elicitResponse.response_sessionattr_namespace.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"elicitResponse.response_sessionattr_namespace"}}},{"name":"elicitResponse.responsebot_hook","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"elicitResponse.responsebot_hook.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"elicitResponse.responsebot_hook"}}},{"name":"incorrectAnswers","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"l","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"next","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"next.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"next"}}},{"name":"qid","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"question","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"questions.q","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"quiz","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"quiz.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"quiz"}}},{"name":"quniqueterms","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"r.buttons.text","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"r.buttons.text.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"r.buttons.text"}}},{"name":"r.buttons.value","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"r.buttons.value.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"r.buttons.value"}}},{"name":"r.imageUrl","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"r.subTitle","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"r.subTitle.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"r.subTitle"}}},{"name":"r.text","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"r.text.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"r.text"}}},{"name":"r.title","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"r.url","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"r.url.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"r.url"}}},{"name":"responses.correct","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"responses.correct.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"responses.correct"}}},{"name":"responses.end","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"responses.end.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"responses.end"}}},{"name":"responses.incorrect","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"responses.incorrect.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"responses.incorrect"}}},{"name":"selected","type":"boolean","esTypes":["boolean"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true},{"name":"t","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"type","type":"string","esTypes":["text"],"count":0,"scripted":false,"searchable":true,"aggregatable":false,"readFromDocValues":false},{"name":"type.keyword","type":"string","esTypes":["keyword"],"count":0,"scripted":false,"searchable":true,"aggregatable":true,"readFromDocValues":true,"subType":{"multi":{"parent":"type"}}}]",
                  "title": "<INDEX_QNA>",
                },
                "id": "QnaItems",
                "migrationVersion": {
                  "index-pattern": "7.6.0",
                },
                "namespaces": [
                  "default",
                ],
                "references": [],
                "type": "index-pattern",
                "updated_at": "2022-12-04T21:21:27.535Z",
                "version": "WzEyLDFd",
              },
            ],
            "version": "1.3.0",
          },
          "endpoint": {
            "Fn::GetAtt": [
              "ESVar",
              "ESAddress",
            ],
          },
          "headers": {
            "osd-xsrf": "true",
          },
          "method": "POST",
          "path": "/_dashboards/api/opensearch-dashboards/dashboards/import?force=true",
          "replaceTokenInBody": [
            {
              "f": "<INDEX_QNA>",
              "r": {
                "Fn::Sub": "\${Var.QnaIndex}",
              },
            },
            {
              "f": "<INDEX_METRICS>",
              "r": {
                "Fn::Sub": "\${Var.MetricsIndex}",
              },
            },
            {
              "f": "<INDEX_FEEDBACK>",
              "r": {
                "Fn::Sub": "\${Var.FeedbackIndex}",
              },
            },
          ],
        },
      },
      "Type": "Custom::ESProxy",
    },
    "OpensearchDomain": {
      "Condition": "CreateDomain",
      "DependsOn": [
        "PreUpgradeExport",
        "ESCognitoRole",
      ],
      "Metadata": {
        "checkov": {
          "skip": [
            {
              "comment": "Logging is enabled via custom resource - see source/templates/master/opensearch/updates.js",
              "id": "CKV_AWS_84",
            },
            {
              "comment": "Logging is enabled via custom resource - see source/templates/master/opensearch/updates.js",
              "id": "CKV_AWS_317",
            },
          ],
        },
      },
      "Properties": {
        "AdvancedOptions": {
          "rest.action.multi.allow_explicit_index": "true",
        },
        "ClusterConfig": {
          "DedicatedMasterEnabled": false,
          "InstanceCount": {
            "Ref": "OpenSearchNodeCount",
          },
          "InstanceType": {
            "Ref": "OpenSearchInstanceType",
          },
          "ZoneAwarenessEnabled": {
            "Fn::If": [
              "SingleNode",
              false,
              true,
            ],
          },
        },
        "CognitoOptions": {
          "Enabled": true,
          "IdentityPoolId": {
            "Ref": "OpenSearchDashboardsIdPool",
          },
          "RoleArn": {
            "Fn::GetAtt": [
              "ESCognitoRole",
              "Arn",
            ],
          },
          "UserPoolId": {
            "Ref": "UserPool",
          },
        },
        "DomainEndpointOptions": {
          "EnforceHTTPS": true,
          "TLSSecurityPolicy": "Policy-Min-TLS-1-2-2019-07",
        },
        "EBSOptions": {
          "EBSEnabled": true,
          "VolumeSize": {
            "Ref": "OpenSearchEBSVolumeSize",
          },
          "VolumeType": "gp3",
        },
        "EncryptionAtRestOptions": {
          "Enabled": true,
        },
        "EngineVersion": "OpenSearch_2.11",
        "NodeToNodeEncryptionOptions": {
          "Enabled": true,
        },
        "SnapshotOptions": {
          "AutomatedSnapshotStartHour": "0",
        },
        "VPCOptions": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SecurityGroupIds": {
                "Ref": "VPCSecurityGroupIdList",
              },
              "SubnetIds": {
                "Ref": "VPCSubnetIdList",
              },
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::OpenSearchService::Domain",
      "UpdatePolicy": {
        "EnableVersionUpgrade": true,
      },
    },
    "PermissionForEventsToInvokeLambda": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "ESCleaningLambda",
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "ScheduledESCleaning",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "PreUpgradeExport": {
      "Properties": {
        "PRE_UPGRADE_EXPORT_TRIGGERS": {
          "Fn::Sub": "\${EmbeddingsApi} \${EmbeddingsBedrockModelId} \${EmbeddingsLambdaDimensions} \${EmbeddingsLambdaArn}",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
        "bucket": {
          "Ref": "ExportBucket",
        },
        "contentDesignerOutputBucket": {
          "Ref": "ContentDesignerOutputBucket",
        },
        "id": "ExportAll_QnABot_vx.x.x.json",
        "index": {
          "Fn::Sub": "\${Var.QnaIndex}",
        },
      },
      "Type": "Custom::PreUpgradeExport",
    },
    "PreUpgradeExportFeedback": {
      "Properties": {
        "PRE_UPGRADE_EXPORT_TRIGGERS": {
          "Fn::Sub": "\${EmbeddingsApi} \${EmbeddingsBedrockModelId} \${EmbeddingsLambdaDimensions} \${EmbeddingsLambdaArn}",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
        "bucket": {
          "Ref": "ExportBucket",
        },
        "contentDesignerOutputBucket": {
          "Ref": "ContentDesignerOutputBucket",
        },
        "id": "ExportAll_QnABot_vx.x.x_feedback.json",
        "index": {
          "Fn::Sub": "\${Var.FeedbackIndex}",
        },
      },
      "Type": "Custom::PreUpgradeExport",
    },
    "PreUpgradeExportMetrics": {
      "Properties": {
        "PRE_UPGRADE_EXPORT_TRIGGERS": {
          "Fn::Sub": "\${EmbeddingsApi} \${EmbeddingsBedrockModelId} \${EmbeddingsLambdaDimensions} \${EmbeddingsLambdaArn}",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
        "bucket": {
          "Ref": "ExportBucket",
        },
        "contentDesignerOutputBucket": {
          "Ref": "ContentDesignerOutputBucket",
        },
        "id": "ExportAll_QnABot_vx.x.x_metrics.json",
        "index": {
          "Fn::Sub": "\${Var.MetricsIndex}",
        },
      },
      "Type": "Custom::PreUpgradeExport",
    },
    "PrivateQnABotSettings": {
      "Condition": "DeprecatedSSMSettings",
      "Properties": {
        "Description": "Private QnABot Settings - DO NOT MODIFY",
        "Tier": "Advanced",
        "Type": "String",
        "Value": {
          "Fn::Sub": [
            "{"NATIVE_LANGUAGE":"\${Language}","EMBEDDINGS_MODEL_ID":"\${EMBEDDINGS_MODEL_ID}","LLM_API":"\${LLMApi}","LLM_MODEL_ID":"\${LLM_MODEL_ID}","KNOWLEDGE_BASE_ID":"\${KNOWLEDGE_BASE_ID}","KNOWLEDGE_BASE_MODEL_ID":"\${KNOWLEDGE_BASE_MODEL_ID}","ALT_SEARCH_KENDRA_INDEXES":"\${AltSearchKendraIndexes}","ALT_SEARCH_KENDRA_INDEX_AUTH":"\${AltSearchKendraIndexAuth}","KENDRA_FAQ_INDEX":"\${KendraFaqIndexId}","KENDRA_WEB_PAGE_INDEX":"\${KendraWebPageIndexId}"}",
            {
              "EMBEDDINGS_MODEL_ID": {
                "Fn::If": [
                  "EmbeddingsBedrock",
                  {
                    "Fn::FindInMap": [
                      "BedrockDefaults",
                      {
                        "Ref": "EmbeddingsBedrockModelId",
                      },
                      "ModelID",
                    ],
                  },
                  "",
                ],
              },
              "KNOWLEDGE_BASE_ID": {
                "Fn::If": [
                  "BedrockKnowledgeBaseEnable",
                  {
                    "Ref": "BedrockKnowledgeBaseId",
                  },
                  "",
                ],
              },
              "KNOWLEDGE_BASE_MODEL_ID": {
                "Fn::If": [
                  "BedrockKnowledgeBaseEnable",
                  {
                    "Fn::FindInMap": [
                      "BedrockDefaults",
                      {
                        "Ref": "BedrockKnowledgeBaseModel",
                      },
                      "ModelID",
                    ],
                  },
                  "",
                ],
              },
              "LLM_MODEL_ID": {
                "Fn::If": [
                  "LLMBedrock",
                  {
                    "Fn::FindInMap": [
                      "BedrockDefaults",
                      {
                        "Ref": "LLMBedrockModelId",
                      },
                      "ModelID",
                    ],
                  },
                  "",
                ],
              },
            },
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "Proxy": {
      "Properties": {
        "ParentId": {
          "Ref": "Static",
        },
        "PathPart": "{proxy+}",
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "ProxyAnyGet": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W59",
              "reason": "This ApiGateway Method does not need authorization setup",
            },
          ],
        },
      },
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Credentials": {
            "Fn::GetAtt": [
              "S3AccessRole",
              "Arn",
            ],
          },
          "IntegrationHttpMethod": "GET",
          "IntegrationResponses": [
            {
              "ContentHandling": undefined,
              "ResponseParameters": {
                "method.response.header.api-stage": "context.stage",
                "method.response.header.content-type": "integration.response.header.Content-Type",
              },
              "StatusCode": 200,
            },
            {
              "ResponseTemplates": {
                "application/xml": "{"error":"Not found"}",
              },
              "SelectionPattern": "403",
              "StatusCode": 404,
            },
          ],
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy",
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":s3:path/",
                {
                  "Ref": "Bucket",
                },
                "/{proxy}",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.api-stage": false,
              "method.response.header.content-type": false,
            },
            "StatusCode": 200,
          },
          {
            "StatusCode": 400,
          },
          {
            "StatusCode": 404,
          },
        ],
        "RequestParameters": {
          "method.request.path.proxy": false,
        },
        "ResourceId": {
          "Ref": "Proxy",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "ProxyAnyHead": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W59",
              "reason": "This ApiGateway Method does not need authorization setup",
            },
          ],
        },
      },
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "HEAD",
        "Integration": {
          "Credentials": {
            "Fn::GetAtt": [
              "S3AccessRole",
              "Arn",
            ],
          },
          "IntegrationHttpMethod": "HEAD",
          "IntegrationResponses": [
            {
              "ContentHandling": undefined,
              "ResponseParameters": {
                "method.response.header.api-stage": "context.stage",
                "method.response.header.content-type": "integration.response.header.Content-Type",
              },
              "StatusCode": 200,
            },
            {
              "ResponseTemplates": {
                "application/xml": "{"error":"Not found"}",
              },
              "SelectionPattern": "403",
              "StatusCode": 404,
            },
          ],
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy",
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":s3:path/",
                {
                  "Ref": "Bucket",
                },
                "/{proxy}",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.api-stage": false,
              "method.response.header.content-type": false,
            },
            "StatusCode": 200,
          },
          {
            "StatusCode": 400,
          },
          {
            "StatusCode": 404,
          },
        ],
        "RequestParameters": {
          "method.request.path.proxy": false,
        },
        "ResourceId": {
          "Ref": "Proxy",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "QNAInvokePermission": {
      "DependsOn": "FulfillmentLambdaAliaslive",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::Join": [
            ":",
            [
              {
                "Fn::GetAtt": [
                  "FulfillmentLambda",
                  "Arn",
                ],
              },
              "live",
            ],
          ],
        },
        "Principal": "lex.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "QnABotCommonLambdaLayer": {
      "Properties": {
        "CompatibleRuntimes": [
          "nodejs",
        ],
        "Content": {
          "S3Bucket": {
            "Ref": "BootstrapBucket",
          },
          "S3Key": {
            "Fn::Sub": "\${BootstrapPrefix}/lambda/qnabot-common-layer.zip",
          },
          "S3ObjectVersion": {
            "Ref": "QnABotCommonLayerCodeVersion",
          },
        },
        "LayerName": {
          "Fn::Join": [
            "-",
            [
              "QnABotCommon",
              {
                "Fn::Select": [
                  "0",
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Ref": "AWS::StackName",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::LayerVersion",
    },
    "QnABotCommonLayerCodeVersion": {
      "Properties": {
        "Bucket": {
          "Ref": "BootstrapBucket",
        },
        "BuildDate": Any<String>,
        "Key": {
          "Fn::Sub": "\${BootstrapPrefix}/lambda/qnabot-common-layer.zip",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3Version",
    },
    "QueryLambdaInvokePolicy": {
      "Properties": {
        "PolicyDocument": {
          "Fn::If": [
            "BuildExamples",
            {
              "Statement": [
                {
                  "Action": [
                    "lambda:InvokeFunction",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:lambda:*:*:function:qna*",
                    "arn:aws:lambda:*:*:function:QNA*",
                    {
                      "Fn::GetAtt": [
                        "ExamplesStack",
                        "Outputs.ExampleJSLambdaQuiz",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "ExamplesStack",
                        "Outputs.ExampleJSLambdahook",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "ExamplesStack",
                        "Outputs.ExamplePYTHONLambdaBotBroker",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "ExamplesStack",
                        "Outputs.ExamplePYTHONLambdaConnectCallback",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "ExamplesStack",
                        "Outputs.ExamplePYTHONLambdaFeedback",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "ExamplesStack",
                        "Outputs.ExamplePYTHONLambdaNext",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "ExamplesStack",
                        "Outputs.ExamplePYTHONLambdaPrevious",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "ExamplesStack",
                        "Outputs.ExamplePYTHONLambdahello",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "ExamplesStack",
                        "Outputs.EXTCreateRecentTopicsResponse",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "ExamplesStack",
                        "Outputs.EXTCustomJSHook",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "ExamplesStack",
                        "Outputs.EXTCustomPYHook",
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            {
              "Statement": [
                {
                  "Action": [
                    "lambda:InvokeFunction",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:lambda:*:*:function:qna*",
                    "arn:aws:lambda:*:*:function:QNA*",
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
          ],
        },
        "Roles": [
          {
            "Ref": "ESProxyLambdaRole",
          },
        ],
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "QueryPolicy": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F5",
              "reason": "This role policy is required to have * action in its policy",
            },
            {
              "id": "W13",
              "reason": "This IAM policy requires to have * resource",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "es:*",
              ],
              "Effect": "Allow",
              "Resource": [
                "*",
              ],
            },
            {
              "Action": [
                "kendra:Query",
                "kendra:Retrieve",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:kendra:\${AWS::Region}:\${AWS::AccountId}:index/*",
                },
              ],
            },
            {
              "Action": [
                "s3:Get*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:s3:::\${AssetBucket}*",
                },
              ],
            },
            {
              "Action": [
                "comprehend:DetectSyntax",
              ],
              "Effect": "Allow",
              "Resource": [
                "*",
              ],
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "Question": {
      "Properties": {
        "ParentId": {
          "Ref": "Questions",
        },
        "PathPart": "{ID}",
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "QuestionDelete": {
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "DELETE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set($inputRoot = $input.path('$'))
#set($Idpath =  '$._id')
#set($Successpath =  '$._shards.successful')

{
    "result":"$inputRoot.result",
    "id":$input.json($Idpath),
    "success":$input.json($Successpath)
}

",
                },
              },
              "StatusCode": 204,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*Exception.*",
              "StatusCode": 405,
            },
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "{
    "endpoint":"\${ESVar.ESAddress}",
    "method":"POST",
    "path":"/\${Var.QnaIndex}/_delete_by_query?refresh=true",
    "body":{
        "query":{
            "match":{
                "qid":"$util.urlDecode($input.params('ID'))"
            }
        }
    }

}


",
            },
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ESProxyLambda",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.date": true,
            },
            "StatusCode": 204,
          },
          {
            "StatusCode": 404,
          },
          {
            "StatusCode": 405,
          },
          {
            "StatusCode": 500,
          },
        ],
        "RequestParameters": {
          "method.request.path.Id": true,
        },
        "ResourceId": {
          "Ref": "Question",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "QuestionHead": {
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "HEAD",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "{"status":"exists"}
",
                },
              },
              "StatusCode": 200,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*Exception.*",
              "StatusCode": 405,
            },
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "{
    "endpoint":"\${ESVar.ESAddress}",
    "method":"HEAD",
    "path":"/\${Var.QnaIndex}/_all/$util.urlDecode($input.params('ID'))"
}


",
            },
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ESProxyLambda",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.date": true,
            },
            "StatusCode": 200,
          },
          {
            "StatusCode": 404,
          },
          {
            "StatusCode": 405,
          },
          {
            "StatusCode": 500,
          },
        ],
        "RequestParameters": {
          "method.request.path.Id": true,
        },
        "ResourceId": {
          "Ref": "Question",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "QuestionPut": {
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "PUT",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set($inputRoot = $input.path('$'))
#set($Idpath =  '$._id')
#set($Successpath =  '$._shards.successful')

{
    "result":"$inputRoot.result",
    "id":$input.json($Idpath),
    "success":$input.json($Successpath)
}

",
                },
              },
              "StatusCode": 201,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*Exception.*",
              "StatusCode": 405,
            },
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#set($inputRoot = $input.path('$'))

#if($input.json('$.type').length())
    #set($type=$inputRoot.type)
#else
    #set($type="qna")
#end

{
    "endpoint":"\${ESVar.ESAddress}",
    "method":"PUT",
    "path":"/\${Var.QnaIndex}/_doc/$input.params('ID')?refresh=wait_for",
    "body":{
        #foreach($paramName in $inputRoot.keySet())
            #if( $paramName == 'q' && $type=="qna")
                ## generate quniqueterms field by concatenating questions in q array
                "quniqueterms":" #foreach( $q in $inputRoot.get($paramName))$q #end ",
                ## replace q array with nested questions array
                "questions":[
                    #foreach( $q in $inputRoot.get($paramName))
                        {"q":"$q"}
                        #if($foreach.hasNext),#end
                    #end
                ]
                #if($foreach.hasNext),#end
            #else
                #set( $body =  '$.'+$paramName)
                "$paramName" :$input.json($body) 
                #if($foreach.hasNext),#end
            #end
        #end
    }
}


",
            },
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ESProxyLambda",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.date": true,
            },
            "StatusCode": 201,
          },
          {
            "StatusCode": 404,
          },
          {
            "StatusCode": 405,
          },
          {
            "StatusCode": 500,
          },
        ],
        "RequestParameters": {
          "method.request.path.Id": true,
        },
        "ResourceId": {
          "Ref": "Question",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "Questions": {
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "API",
            "RootResourceId",
          ],
        },
        "PathPart": "questions",
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "QuestionsDelete": {
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "DELETE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "{
    "message":"success",
    "count":"$input.path('$.deleted')"
}
",
                },
              },
              "StatusCode": 204,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*Exception.*",
              "StatusCode": 405,
            },
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "{
    "endpoint":"\${ESVar.ESAddress}",
    "method":"POST",
    "path":"/\${Var.QnaIndex}/_delete_by_query?refresh=true",
    "body":{
        "query":{
            #if($input.path('$.query').length()!=0)
            "bool":{
                "must":{"match_all":{}},
                "filter":{"regexp":{
                    "qid":"$input.path('$.query')"
                }}
            }
            #else
            "terms":{
                "qid":[
                #foreach($qid in $input.path('$.list'))
                    "$qid"#if($foreach.hasNext),#end
                #end]
            }
            #end
        }
    }
}


",
            },
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ESProxyLambda",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.date": true,
            },
            "StatusCode": 204,
          },
          {
            "StatusCode": 404,
          },
          {
            "StatusCode": 405,
          },
          {
            "StatusCode": 500,
          },
        ],
        "ResourceId": {
          "Ref": "Questions",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "QuestionsGet": {
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set($inputRoot = $input.path('$'))

{
    "total":$inputRoot.hits.total.value,
    "version":"1",
    "qa":[
        #foreach( $hit in $inputRoot.hits.hits)
            {
                #set($Scorepath =  '$.hits.hits['+$foreach.index+']._score')
                "_score":$input.json($Scorepath),
                #set($Bodypath =  '$.hits.hits['+$foreach.index+']._source')
                #foreach($paramName in $input.path($Bodypath).keySet())
                    #if( $paramName == 'questions')
                        "q":[
                            #foreach( $question in $input.path($Bodypath).get($paramName))
                                "$question.q"
                                #if($foreach.hasNext),#end
                            #end
                        ]
                    #else
                        #set( $body =  $Bodypath+"."+$paramName)
                        "$paramName" :$input.json($body) 
                    #end
                #if($foreach.hasNext),#end
                #end
            }#if( $foreach.hasNext ),#end
        #end
    ]
}

",
                },
              },
              "StatusCode": 200,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*Exception.*",
              "StatusCode": 405,
            },
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#if ( $input.params('perpage').length()==0 )
    #set ( $perpage = 10 )
#else
    #set ( $perpage = $input.params('perpage') )
#end

#if ( $input.params('from').length()==0)
    #set ( $from = 0 )
#else
    #set ( $from = $input.params('from') )
#end

#if ( $input.params('order').length()==0 )
    #set ( $order = "asc" )
#else
    #set ( $order = $input.params('order') )
#end
    
{
    "endpoint":"\${ESVar.ESAddress}",
    "method":"POST",

    
    #if($input.params('query').length()>0)
    "path":"/\${Var.QnaIndex}/_search?search_type=dfs_query_then_fetch",
    "question": "$util.urlDecode($input.params('query'))",
    #else
    "path":"/\${Var.QnaIndex}/_search?search_type=dfs_query_then_fetch",
    "question": "",
    #end
    
    #if ($input.params('topic'))
    "topic": "$util.urlDecode($input.params('topic'))",
    #else
    "topic": "",
    #end

    #if ($input.params('client_filter'))
    "client_filter": "$util.urlDecode($input.params('client_filter'))",
    #else
    "client_filter": "",
    #end

    #if ($input.params('score_answer'))
    "score_answer": "$util.urlDecode($input.params('score_answer'))",
    #else
    "score_answer": "",
    #end

    #if ($input.params('score_text_passage'))
    "score_text_passage": "$util.urlDecode($input.params('score_text_passage'))",
    #else
    "score_text_passage": "",
    #end

    "size":"$perpage",
    "from":"$from",


    "body":{
        #if($input.params('query').length()>0)
        "comment": "ES Query for test queries are now built dynamically by ESProxy Lambda handler."
        #else
        "size":"$perpage",
        "from":"$from",
        "_source": {
            "exclude": ["questions.q_vector", "a_vector"]
        },
        "query": {
            "bool":{
                #if($input.params('filter').length()==0)
                "must":{"match_all":{}}
                #else
                "filter":{"regexp":{
                    "qid":"$util.urlDecode($input.params('filter'))"
                }}
                #end
            }
        }
        ,"sort":{
            "qid":{
                "order":"$order" 
            }
        }
        #end
    }
}

",
            },
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ESProxyLambda",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.date": true,
            },
            "StatusCode": 200,
          },
          {
            "StatusCode": 404,
          },
          {
            "StatusCode": 405,
          },
          {
            "StatusCode": 500,
          },
        ],
        "RequestParameters": {
          "method.request.querystring.filter": false,
          "method.request.querystring.from": false,
          "method.request.querystring.order": false,
          "method.request.querystring.perpage": false,
          "method.request.querystring.query": false,
          "method.request.querystring.topic": false,
        },
        "ResourceId": {
          "Ref": "Questions",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "QuestionsOptions": {
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "StatusCode": 200,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*Exception.*",
              "StatusCode": 405,
            },
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "{
    "comment": "API mapping no-op since ES 7.x upgrade. Schema now returned directly from SchemaLambda, rather than from OpenSearch metadata"
}

",
            },
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SchemaLambda",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.date": true,
            },
            "StatusCode": 200,
          },
          {
            "StatusCode": 404,
          },
          {
            "StatusCode": 405,
          },
          {
            "StatusCode": 500,
          },
        ],
        "ResourceId": {
          "Ref": "Questions",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "RoleAttachment": {
      "Properties": {
        "IdentityPoolId": {
          "Ref": "IdPool",
        },
        "RoleMappings": [
          {
            "AmbiguousRoleResolution": "AuthenticatedRole",
            "ClientId": {
              "Ref": "ClientClient",
            },
            "RulesConfiguration": {
              "Rules": [
                {
                  "Claim": "cognito:groups",
                  "MatchType": "Contains",
                  "RoleARN": {
                    "Fn::GetAtt": [
                      "UserRole",
                      "Arn",
                    ],
                  },
                  "Value": "Admin",
                },
              ],
            },
            "Type": "Rules",
            "UserPool": {
              "Ref": "UserPool",
            },
          },
          {
            "AmbiguousRoleResolution": "Deny",
            "ClientId": {
              "Ref": "ClientDesigner",
            },
            "RulesConfiguration": {
              "Rules": [
                {
                  "Claim": "cognito:groups",
                  "MatchType": "Contains",
                  "RoleARN": {
                    "Fn::GetAtt": [
                      "AdminRole",
                      "Arn",
                    ],
                  },
                  "Value": "Admin",
                },
              ],
            },
            "Type": "Rules",
            "UserPool": {
              "Ref": "UserPool",
            },
          },
        ],
        "Roles": {
          "authenticated": {
            "Fn::GetAtt": [
              "UserRole",
              "Arn",
            ],
          },
          "unauthenticated": {
            "Fn::GetAtt": [
              "UnauthenticatedRole",
              "Arn",
            ],
          },
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
      },
      "Type": "Custom::CognitoRole",
    },
    "S3AccessRole": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "IAM_NO_INLINE_POLICY_CHECK",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "s3:GetObject",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::\${ImportBucket}/*",
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::\${ExportBucket}/*",
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::\${TestAllBucket}/*",
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::\${Bucket}/*",
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::\${AssetBucket}/*",
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::\${ContentDesignerOutputBucket}/*",
                    },
                  ],
                },
                {
                  "Action": [
                    "s3:PutObject",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::\${ExportBucket}/*",
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::\${TestAllBucket}/*",
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::\${ContentDesignerOutputBucket}/*",
                    },
                  ],
                },
                {
                  "Action": [
                    "s3:DeleteObject",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::\${ImportBucket}/*",
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::\${ExportBucket}/*",
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::\${TestAllBucket}/*",
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::\${ContentDesignerOutputBucket}/*",
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "S3AccessPolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "S3Clean": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "LAMBDA_CONCURRENCY_CHECK",
            "LAMBDA_INSIDE_VPC",
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "BootstrapBucket",
          },
          "S3Key": {
            "Fn::Sub": "\${BootstrapPrefix}/lambda/s3-clean.zip",
          },
        },
        "Description": "This function clears all S3 objects from the bucket of a given S3-based resource",
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0189",
            "SOLUTION_VERSION": "vx.x.x",
          },
        },
        "Handler": "lambda_function.handler",
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "S3CleanLambdaLogGroup",
          },
        },
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "python",
        "Tags": [
          {
            "Key": "Type",
            "Value": "S3 Clean",
          },
        ],
        "Timeout": 300,
        "TracingConfig": {
          "Fn::If": [
            "XRAYEnabled",
            {
              "Mode": "Active",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SecurityGroupIds": {
                "Ref": "VPCSecurityGroupIdList",
              },
              "SubnetIds": {
                "Ref": "VPCSubnetIdList",
              },
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "S3CleanLambdaLogGroup": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
            "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Sub": "/aws/lambda/\${AWS::StackName}-S3CleanLambda",
              },
              {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Fn::If": [
            "LogRetentionPeriodIsNotZero",
            {
              "Ref": "LogRetentionPeriod",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "S3ClearCodeVersion": {
      "Properties": {
        "Bucket": {
          "Ref": "BootstrapBucket",
        },
        "BuildDate": Any<String>,
        "Key": {
          "Fn::Sub": "\${BootstrapPrefix}/lambda/s3-clean.zip",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3Version",
    },
    "S3ListLambda": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "This lambda function does not require to have ReservedConcurrentExecutions",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "LAMBDA_CONCURRENCY_CHECK",
            "LAMBDA_INSIDE_VPC",
          ],
        },
      },
      "Properties": {
        "Code": {
          "ZipFile": "/** ************************************************************************************************
*   Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.                             *
*   SPDX-License-Identifier: Apache-2.0                                                            *
 ************************************************************************************************ */

const { S3Client, ListObjectsCommand } = require('@aws-sdk/client-s3');
const customSdkConfig = require('sdk-config/customSdkConfig');
const region = process.env.AWS_REGION;
const s3 = new S3Client(customSdkConfig('C022', { region }));

exports.handler = (event, context, callback) => {
    console.log('Received event:', JSON.stringify(event, null, 2));

    return s3.send(new ListObjectsCommand({
        Bucket: event.bucket,
        Prefix: event.prefix,
        MaxKeys: event.perpage || 100,
        Marker: event.token || null,
    }))
        .then((x) => {
            console.log('s3 response for routes:', JSON.stringify(x, null, 2));
            if (x.Contents) {
                x.Contents?.sort((a, b) => {
                    if (a.LastModified && b.LastModified) {
                        return new Date(b.LastModified).getTime() - new Date(a.LastModified).getTime();
                    }
                    return 0;
                });
            }
            const mapJobs = x?.Contents?.map((y) => ({
                id: y.Key.split('/').pop(),
                href: \`\${event.root}/jobs/\${event.type}/\${encodeURI(y.Key.split('/').pop())}\`,
            }));
            callback(null, {
                token: x.NextMarker,
                jobs: x.Contents ? mapJobs : [],
            })
        })
        .catch((e) => callback(JSON.stringify({
            type: '[InternalServiceError]',
            data: e,
        })));
};
",
        },
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0189",
            "SOLUTION_VERSION": "vx.x.x",
          },
        },
        "Handler": "index.handler",
        "Layers": [
          {
            "Ref": "AwsSdkLayerLambdaLayer",
          },
        ],
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "S3ListLambdaLogGroup",
          },
        },
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "S3ListLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs",
        "Tags": [
          {
            "Key": "Type",
            "Value": "Api",
          },
        ],
        "Timeout": 300,
        "TracingConfig": {
          "Fn::If": [
            "XRAYEnabled",
            {
              "Mode": "Active",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SecurityGroupIds": {
                "Ref": "VPCSecurityGroupIdList",
              },
              "SubnetIds": {
                "Ref": "VPCSubnetIdList",
              },
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "S3ListLambdaLogGroup": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
            "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Sub": "/aws/lambda/\${AWS::StackName}-S3ListLambda",
              },
              {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Fn::If": [
            "LogRetentionPeriodIsNotZero",
            {
              "Ref": "LogRetentionPeriod",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "S3ListLambdaRole": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W11",
              "reason": "This IAM role requires to have * resource on its permission policy",
            },
            {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "IAM_NO_INLINE_POLICY_CHECK",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
                {
                  "Action": [
                    "ec2:CreateNetworkInterface",
                    "ec2:AssignPrivateIpAddresses",
                    "ec2:UnassignPrivateIpAddresses",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterface",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "lambdaVPCAccessExecutionRole",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "xray:PutTraceSegments",
                    "xray:PutTelemetryRecords",
                    "xray:GetSamplingRules",
                    "xray:GetSamplingTargets",
                    "xray:GetSamplingStatisticSummaries",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*",
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "xrayDaemonWriteAccess",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "S3:List*",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:\${AWS::Partition}:s3:::*",
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "S3ListPolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ScheduledESCleaning": {
      "Properties": {
        "Description": "",
        "ScheduleExpression": "rate(1 day)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "ESCleaningLambda",
                "Arn",
              ],
            },
            "Id": "ES_Cleaning_Function",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "SchemaLambda": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "This lambda function does not require to have ReservedConcurrentExecutions",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "LAMBDA_CONCURRENCY_CHECK",
            "LAMBDA_INSIDE_VPC",
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "BootstrapBucket",
          },
          "S3Key": {
            "Fn::Sub": "\${BootstrapPrefix}/lambda/schema.zip",
          },
          "S3ObjectVersion": {
            "Ref": "SchemaLambdaCodeVersion",
          },
        },
        "Handler": "index.handler",
        "Layers": [
          {
            "Ref": "AwsSdkLayerLambdaLayer",
          },
        ],
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "SchemaLambdaLogGroup",
          },
        },
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "SchemaLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs",
        "Tags": [
          {
            "Key": "Type",
            "Value": "Api",
          },
        ],
        "Timeout": 300,
        "TracingConfig": {
          "Fn::If": [
            "XRAYEnabled",
            {
              "Mode": "Active",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SecurityGroupIds": {
                "Ref": "VPCSecurityGroupIdList",
              },
              "SubnetIds": {
                "Ref": "VPCSubnetIdList",
              },
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "SchemaLambdaCodeVersion": {
      "Properties": {
        "Bucket": {
          "Ref": "BootstrapBucket",
        },
        "BuildDate": Any<String>,
        "Key": {
          "Fn::Sub": "\${BootstrapPrefix}/lambda/schema.zip",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3Version",
    },
    "SchemaLambdaLogGroup": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
            "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Sub": "/aws/lambda/\${AWS::StackName}-SchemaLambda",
              },
              {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Fn::If": [
            "LogRetentionPeriodIsNotZero",
            {
              "Ref": "LogRetentionPeriod",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "SchemaLambdaRole": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W11",
              "reason": "This IAM role requires to have * resource on its permission policy",
            },
            {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "IAM_NO_INLINE_POLICY_CHECK",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Ref": "QueryPolicy",
          },
        ],
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
                {
                  "Action": [
                    "ec2:CreateNetworkInterface",
                    "ec2:AssignPrivateIpAddresses",
                    "ec2:UnassignPrivateIpAddresses",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterface",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "lambdaVPCAccessExecutionRole",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "xray:PutTraceSegments",
                    "xray:PutTelemetryRecords",
                    "xray:GetSamplingRules",
                    "xray:GetSamplingTargets",
                    "xray:GetSamplingStatisticSummaries",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*",
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "xrayDaemonWriteAccess",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "Services": {
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "API",
            "RootResourceId",
          ],
        },
        "PathPart": "services",
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "ServicesGet": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W59",
              "reason": "This ApiGateway Method does not need authorization setup",
            },
          ],
        },
      },
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "{
    "opensearch":{
        "qid":"\${ESQidLambda.Arn}",
        "proxy":"\${ESProxyLambda.Arn}"
    }
}

",
                },
              },
              "StatusCode": "200",
            },
          ],
          "RequestTemplates": {
            "application/json": "{"statusCode": 200}",
          },
          "Type": "MOCK",
        },
        "MethodResponses": [
          {
            "StatusCode": 200,
          },
        ],
        "ResourceId": {
          "Ref": "Services",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "SettingsInitializer": {
      "Properties": {
        "ALT_SEARCH_KENDRA_INDEXES": {
          "Ref": "AltSearchKendraIndexes",
        },
        "ALT_SEARCH_KENDRA_INDEX_AUTH": {
          "Ref": "AltSearchKendraIndexAuth",
        },
        "EMBEDDINGS_ENABLE": {
          "Fn::If": [
            "EmbeddingsEnable",
            "true",
            "false",
          ],
        },
        "EMBEDDINGS_MAX_TOKEN_LIMIT": {
          "Fn::If": [
            "EmbeddingsBedrock",
            {
              "Fn::FindInMap": [
                "BedrockDefaults",
                {
                  "Ref": "EmbeddingsBedrockModelId",
                },
                "MaxTokens",
              ],
            },
            "",
          ],
        },
        "EMBEDDINGS_MODEL_ID": {
          "Fn::If": [
            "EmbeddingsBedrock",
            {
              "Fn::FindInMap": [
                "BedrockDefaults",
                {
                  "Ref": "EmbeddingsBedrockModelId",
                },
                "ModelID",
              ],
            },
            "",
          ],
        },
        "EMBEDDINGS_SCORE_THRESHOLD": {
          "Fn::If": [
            "EmbeddingsBedrock",
            0.7,
            0.85,
          ],
        },
        "EMBEDDINGS_TEXT_PASSAGE_SCORE_THRESHOLD": {
          "Fn::If": [
            "EmbeddingsBedrock",
            0.65,
            0.8,
          ],
        },
        "ES_USE_KEYWORD_FILTERS": {
          "Fn::If": [
            "EmbeddingsEnable",
            "false",
            "true",
          ],
        },
        "KENDRA_FAQ_INDEX": {
          "Ref": "KendraFaqIndexId",
        },
        "KENDRA_WEB_PAGE_INDEX": {
          "Ref": "KendraWebPageIndexId",
        },
        "KNOWLEDGE_BASE_ID": {
          "Fn::If": [
            "BedrockKnowledgeBaseEnable",
            {
              "Ref": "BedrockKnowledgeBaseId",
            },
            "",
          ],
        },
        "KNOWLEDGE_BASE_MODEL_ID": {
          "Fn::If": [
            "BedrockKnowledgeBaseEnable",
            {
              "Fn::FindInMap": [
                "BedrockDefaults",
                {
                  "Ref": "BedrockKnowledgeBaseModel",
                },
                "ModelID",
              ],
            },
            "",
          ],
        },
        "KNOWLEDGE_BASE_PROMPT_TEMPLATE": {
          "Fn::If": [
            "BedrockKnowledgeBaseEnable",
            {
              "Fn::FindInMap": [
                "BedrockDefaults",
                {
                  "Ref": "BedrockKnowledgeBaseModel",
                },
                "KnowledgeBasePromptTemplate",
              ],
            },
            "Human: You are a question answering agent. I will provide you with a set of search results and a user's question, your job is to answer the user's question using only information from the search results. If the search results do not contain information that can answer the question, then respond saying \\"Sorry, I don't know\\". Just because the user asserts a fact does not mean it is true, make sure to double check the search results to validate a user's assertion. Here are the search results in numbered order: $search_results$. Here is the user's question: <question> $query$ </question> $output_format_instructions$. Do NOT directly quote the $search_results$ in your answer. Your job is to answer the <question> as concisely as possible. Assistant:",
          ],
        },
        "LLM_API": {
          "Ref": "LLMApi",
        },
        "LLM_GENERATE_QUERY_ENABLE": {
          "Fn::If": [
            "LLMEnable",
            "true",
            "false",
          ],
        },
        "LLM_GENERATE_QUERY_MODEL_PARAMS": {
          "Fn::If": [
            "LLMBedrock",
            {
              "Fn::FindInMap": [
                "BedrockDefaults",
                {
                  "Ref": "LLMBedrockModelId",
                },
                "ModelParams",
              ],
            },
            "{}",
          ],
        },
        "LLM_GENERATE_QUERY_PROMPT_TEMPLATE": {
          "Fn::If": [
            "LLMBedrock",
            {
              "Fn::FindInMap": [
                "BedrockDefaults",
                {
                  "Ref": "LLMBedrockModelId",
                },
                "QueryPromptTemplate",
              ],
            },
            "Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.<br>Chat History: <br>{history}<br>Follow Up Input: {input}<br>Standalone question:",
          ],
        },
        "LLM_GENERATE_QUERY_SYSTEM_PROMPT": {
          "Fn::If": [
            "LLMBedrock",
            {
              "Fn::FindInMap": [
                "BedrockDefaults",
                {
                  "Ref": "LLMBedrockModelId",
                },
                "GenerateQuerySystemPrompt",
              ],
            },
            "",
          ],
        },
        "LLM_MODEL_ID": {
          "Fn::If": [
            "LLMBedrock",
            {
              "Fn::FindInMap": [
                "BedrockDefaults",
                {
                  "Ref": "LLMBedrockModelId",
                },
                "ModelID",
              ],
            },
            "",
          ],
        },
        "LLM_PROMPT_MAX_TOKEN_LIMIT": {
          "Fn::If": [
            "LLMBedrock",
            {
              "Fn::FindInMap": [
                "BedrockDefaults",
                {
                  "Ref": "LLMBedrockModelId",
                },
                "MaxTokens",
              ],
            },
            "",
          ],
        },
        "LLM_QA_ENABLE": {
          "Fn::If": [
            "LLMEnable",
            "true",
            "false",
          ],
        },
        "LLM_QA_MODEL_PARAMS": {
          "Fn::If": [
            "LLMBedrock",
            {
              "Fn::FindInMap": [
                "BedrockDefaults",
                {
                  "Ref": "LLMBedrockModelId",
                },
                "ModelParams",
              ],
            },
            "{}",
          ],
        },
        "LLM_QA_NO_HITS_REGEX": {
          "Fn::If": [
            "LLMBedrock",
            {
              "Fn::FindInMap": [
                "BedrockDefaults",
                {
                  "Ref": "LLMBedrockModelId",
                },
                "NoHitsRegex",
              ],
            },
            "Sorry,  //remove comment to enable custom no match (no_hits) when LLM does not know the answer.",
          ],
        },
        "LLM_QA_PROMPT_TEMPLATE": {
          "Fn::If": [
            "LLMBedrock",
            {
              "Fn::FindInMap": [
                "BedrockDefaults",
                {
                  "Ref": "LLMBedrockModelId",
                },
                "QAPromptTemplate",
              ],
            },
            "Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer. Write the answer in up to 5 complete sentences.<br><br>{context}<br><br>Question: {query}<br>Helpful Answer:",
          ],
        },
        "LLM_QA_SYSTEM_PROMPT": {
          "Fn::If": [
            "LLMBedrock",
            {
              "Fn::FindInMap": [
                "BedrockDefaults",
                {
                  "Ref": "LLMBedrockModelId",
                },
                "QASystemPrompt",
              ],
            },
            "",
          ],
        },
        "LLM_STREAMING_ENABLED": {
          "Fn::If": [
            "StreamingEnabled",
            "true",
            "false",
          ],
        },
        "NATIVE_LANGUAGE": {
          "Ref": "Language",
        },
        "STREAMING_TABLE": {
          "Fn::If": [
            "StreamingEnabled",
            {
              "Fn::GetAtt": [
                "StreamingStack",
                "Outputs.StreamingDynamoDbTable",
              ],
            },
            "",
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
        "SettingsTable": {
          "Ref": "SettingsTable",
        },
      },
      "Type": "Custom::SettingsInitializer",
    },
    "SettingsTable": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W74",
              "reason": "This DynamoDB table does not require CMK encryption store in KMS",
            },
          ],
        },
      },
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "SettingName",
            "AttributeType": "S",
          },
          {
            "AttributeName": "SettingCategory",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "SettingCategoryIndex",
            "KeySchema": [
              {
                "AttributeName": "SettingCategory",
                "KeyType": "HASH",
              },
            ],
            "Projection": {
              "ProjectionType": "ALL",
            },
          },
        ],
        "KeySchema": [
          {
            "AttributeName": "SettingName",
            "KeyType": "HASH",
          },
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true,
        },
        "SSESpecification": {
          "SSEEnabled": true,
        },
      },
      "Type": "AWS::DynamoDB::Table",
    },
    "SignupLambda": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "This lambda function does not require to have ReservedConcurrentExecutions",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "LAMBDA_CONCURRENCY_CHECK",
            "LAMBDA_INSIDE_VPC",
          ],
        },
      },
      "Properties": {
        "Code": {
          "ZipFile": "/** ************************************************************************************************
*   Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.                             *
*   SPDX-License-Identifier: Apache-2.0                                                            *
 ************************************************************************************************ */

exports.handler = (event, context, callback) => {
    console.log('Received event:', JSON.stringify(event, null, 2));
    const approvedDomain = process.env.APPROVED_DOMAIN;

    if (approvedDomain) {
        const regex = new RegExp(\`^[A-Za-z0-9._%+-]+@\${approvedDomain}$\`);
        if (event.request.userAttributes.email.match(regex)) {
            if (event.request.userAttributes.email_verified == 'True') {
                event.response.autoVerifyUser = true;
            }
            context.done(null, event);
        } else {
            const error = new Error('EMAIL_DOMAIN_DENIED_ERR');
            context.done(error, event);
        }
    } else {
        context.done(null, event);
    }
};
",
        },
        "Environment": {
          "Variables": {
            "APPROVED_DOMAIN": {
              "Fn::If": [
                "Domain",
                {
                  "Ref": "ApprovedDomain",
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          },
        },
        "Handler": "index.handler",
        "Layers": [
          {
            "Ref": "AwsSdkLayerLambdaLayer",
          },
        ],
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "SignupLambdaLogGroup",
          },
        },
        "MemorySize": "128",
        "Role": {
          "Fn::GetAtt": [
            "SignupLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs",
        "Tags": [
          {
            "Key": "Type",
            "Value": "Cognito",
          },
        ],
        "Timeout": 300,
        "TracingConfig": {
          "Fn::If": [
            "XRAYEnabled",
            {
              "Mode": "Active",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SecurityGroupIds": {
                "Ref": "VPCSecurityGroupIdList",
              },
              "SubnetIds": {
                "Ref": "VPCSubnetIdList",
              },
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "SignupLambdaLogGroup": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
            "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Sub": "/aws/lambda/\${AWS::StackName}-SignupLambda",
              },
              {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Fn::If": [
            "LogRetentionPeriodIsNotZero",
            {
              "Ref": "LogRetentionPeriod",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "SignupLambdaRole": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W11",
              "reason": "This IAM role requires to have * resource on its permission policy",
            },
            {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "IAM_NO_INLINE_POLICY_CHECK",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
                {
                  "Action": [
                    "ec2:CreateNetworkInterface",
                    "ec2:AssignPrivateIpAddresses",
                    "ec2:UnassignPrivateIpAddresses",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterface",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "lambdaVPCAccessExecutionRole",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "xray:PutTraceSegments",
                    "xray:PutTelemetryRecords",
                    "xray:GetSamplingRules",
                    "xray:GetSamplingTargets",
                    "xray:GetSamplingStatisticSummaries",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*",
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "xrayDaemonWriteAccess",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SignupPermision": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "SignupLambda",
            "Arn",
          ],
        },
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "UserPool",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "SolutionHelper": {
      "DependsOn": [
        "SolutionHelperRole",
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "This Lambda Function is not required to be inside VPC",
            },
            {
              "id": "W92",
              "reason": "This lambda function does not require to have ReservedConcurrentExecutions",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "LAMBDA_CONCURRENCY_CHECK",
            "LAMBDA_INSIDE_VPC",
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "BootstrapBucket",
          },
          "S3Key": {
            "Fn::Sub": "\${BootstrapPrefix}/lambda/solution-helper.zip",
          },
          "S3ObjectVersion": {
            "Ref": "SolutionHelperCodeVersion",
          },
        },
        "Description": "This function generates UUID for each deployment and sends anonymized data to the AWS Solutions team",
        "Environment": {
          "Variables": {
            "SETTINGS_TABLE": {
              "Ref": "SettingsTable",
            },
            "SOLUTION_ID": "SO0189",
            "SOLUTION_PARAMETER": {
              "Ref": "SolutionHelperParameter",
            },
          },
        },
        "Handler": "lambda_function.handler",
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "SolutionHelperLogGroup",
          },
        },
        "Role": {
          "Fn::GetAtt": [
            "SolutionHelperRole",
            "Arn",
          ],
        },
        "Runtime": "python",
        "Tags": [
          {
            "Key": "Type",
            "Value": "Solution Helper",
          },
        ],
        "Timeout": 300,
        "TracingConfig": {
          "Fn::If": [
            "XRAYEnabled",
            {
              "Mode": "Active",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SecurityGroupIds": {
                "Ref": "VPCSecurityGroupIdList",
              },
              "SubnetIds": {
                "Ref": "VPCSubnetIdList",
              },
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "SolutionHelperCodeVersion": {
      "Properties": {
        "Bucket": {
          "Ref": "BootstrapBucket",
        },
        "BuildDate": Any<String>,
        "Key": {
          "Fn::Sub": "\${BootstrapPrefix}/lambda/solution-helper.zip",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3Version",
    },
    "SolutionHelperCreateUniqueID": {
      "Condition": "SolutionHelperSendAnonymizedDataToAWS",
      "DeletionPolicy": "Delete",
      "Properties": {
        "Resource": "UUID",
        "ServiceToken": {
          "Fn::GetAtt": [
            "SolutionHelper",
            "Arn",
          ],
        },
      },
      "Type": "Custom::CreateUUID",
      "UpdateReplacePolicy": "Delete",
    },
    "SolutionHelperLogGroup": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
            "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Sub": "/aws/lambda/\${AWS::StackName}-SolutionHelper",
              },
              {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Fn::If": [
            "LogRetentionPeriodIsNotZero",
            {
              "Ref": "LogRetentionPeriod",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "SolutionHelperParameter": {
      "Properties": {
        "Description": "Solution Helper Parameter - DO NOT MODIFY",
        "Type": "String",
        "Value": "{}",
      },
      "Type": "AWS::SSM::Parameter",
    },
    "SolutionHelperRole": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W11",
              "reason": "This IAM role requires to have * resource on its permission policy",
            },
            {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "IAM_NO_INLINE_POLICY_CHECK",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole",
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
                {
                  "Action": [
                    "ec2:CreateNetworkInterface",
                    "ec2:AssignPrivateIpAddresses",
                    "ec2:UnassignPrivateIpAddresses",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterface",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "lambdaVPCAccessExecutionRole",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "xray:PutTraceSegments",
                    "xray:PutTelemetryRecords",
                    "xray:GetSamplingRules",
                    "xray:GetSamplingTargets",
                    "xray:GetSamplingStatisticSummaries",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*",
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "xrayDaemonWriteAccess",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "dynamodb:Scan",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:dynamodb:\${AWS::Region}:\${AWS::AccountId}:table/\${SettingsTable}",
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "SettingsTableReadAccess",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "ssm:GetParameter",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Fn::Sub": "\${AWS::Partition}:",
                          },
                          "ssm:",
                          {
                            "Fn::Sub": "\${AWS::Region}:",
                          },
                          {
                            "Fn::Sub": "\${AWS::AccountId}:",
                          },
                          "parameter/",
                          {
                            "Ref": "SolutionHelperParameter",
                          },
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "GetParameterPolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "ssm:PutParameter",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Fn::Sub": "\${AWS::Partition}:",
                          },
                          "ssm:",
                          {
                            "Fn::Sub": "\${AWS::Region}:",
                          },
                          {
                            "Fn::Sub": "\${AWS::AccountId}:",
                          },
                          "parameter/",
                          {
                            "Ref": "SolutionHelperParameter",
                          },
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "PutParameterPolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "SolutionHelperSendAnonymizedData": {
      "Condition": "SolutionHelperSendAnonymizedDataToAWS",
      "DeletionPolicy": "Delete",
      "Properties": {
        "BedrockKnowledgeBaseModel": {
          "Fn::If": [
            "BedrockKnowledgeBaseEnable",
            {
              "Ref": "BedrockKnowledgeBaseModel",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "EmbeddingsApi": {
          "Ref": "EmbeddingsApi",
        },
        "EmbeddingsBedrockModelId": {
          "Fn::If": [
            "EmbeddingsBedrock",
            {
              "Ref": "EmbeddingsBedrockModelId",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "EnableStreaming": {
          "Ref": "EnableStreaming",
        },
        "FulfillmentConcurrency": {
          "Ref": "FulfillmentConcurrency",
        },
        "InstallLexResponseBots": {
          "Ref": "InstallLexResponseBots",
        },
        "KendraPluginsEnabled": {
          "Fn::If": [
            "KendraPluginsEnabled",
            "YES",
            "NO",
          ],
        },
        "LLMApi": {
          "Ref": "LLMApi",
        },
        "LLMBedrockModelId": {
          "Fn::If": [
            "LLMBedrock",
            {
              "Ref": "LLMBedrockModelId",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "Language": {
          "Ref": "Language",
        },
        "OpenSearchEBSVolumeSize": {
          "Fn::If": [
            "CreateDomain",
            {
              "Ref": "OpenSearchEBSVolumeSize",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "OpenSearchFineGrainAccessControl": {
          "Ref": "OpenSearchFineGrainAccessControl",
        },
        "OpenSearchInstanceType": {
          "Fn::If": [
            "CreateDomain",
            {
              "Ref": "OpenSearchInstanceType",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "OpenSearchNodeCount": {
          "Fn::If": [
            "CreateDomain",
            {
              "Ref": "OpenSearchNodeCount",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "PublicOrPrivate": {
          "Ref": "PublicOrPrivate",
        },
        "Region": {
          "Ref": "AWS::Region",
        },
        "Resource": "AnonymizedMetric",
        "ServiceToken": {
          "Fn::GetAtt": [
            "SolutionHelper",
            "Arn",
          ],
        },
        "SolutionId": "SO0189",
        "UUID": {
          "Fn::GetAtt": [
            "SolutionHelperCreateUniqueID",
            "UUID",
          ],
        },
        "Version": "vx.x.x",
      },
      "Type": "Custom::AnonymizedData",
      "UpdateReplacePolicy": "Delete",
    },
    "Stage": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W64",
              "reason": "This apiGateway stage does not require to be associated with a usage plan",
            },
            {
              "id": "W69",
              "reason": "This apiGateway stage does not require to have access logging",
            },
          ],
        },
      },
      "Properties": {
        "DeploymentId": {
          "Ref": "Deployment",
        },
        "MethodSettings": [
          {
            "CacheDataEncrypted": true,
            "CachingEnabled": true,
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "API",
        },
        "StageName": "prod",
        "Variables": {
          "ClientLoginUrl": {
            "Fn::If": [
              "Public",
              {
                "Fn::GetAtt": [
                  "Urls",
                  "Client",
                ],
              },
              {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "ApiUrl",
                        "Name",
                      ],
                    },
                    "/pages/client",
                  ],
                ],
              },
            ],
          },
          "CognitoEndpoint": {
            "Fn::GetAtt": [
              "DesignerLogin",
              "Domain",
            ],
          },
          "DesignerLoginUrl": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::GetAtt": [
                    "ApiUrl",
                    "Name",
                  ],
                },
                "/pages/designer",
              ],
            ],
          },
          "Id": "QnABot",
          "Region": {
            "Ref": "AWS::Region",
          },
          "StreamingWebSocketEndpoint": {
            "Fn::If": [
              "StreamingEnabled",
              {
                "Fn::GetAtt": [
                  "StreamingStack",
                  "Outputs.StreamingWebSocketEndpoint",
                ],
              },
              "",
            ],
          },
        },
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "Static": {
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "API",
            "RootResourceId",
          ],
        },
        "PathPart": "static",
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "StreamingStack": {
      "Condition": "StreamingEnabled",
      "Properties": {
        "Parameters": {
          "BootstrapBucket": {
            "Ref": "BootstrapBucket",
          },
          "BootstrapPrefix": {
            "Ref": "BootstrapPrefix",
          },
          "CFNInvokePolicy": {
            "Ref": "CFNInvokePolicy",
          },
          "CFNLambda": {
            "Fn::GetAtt": [
              "CFNLambda",
              "Arn",
            ],
          },
          "LogRetentionPeriod": {
            "Ref": "LogRetentionPeriod",
          },
          "S3Clean": {
            "Fn::GetAtt": [
              "S3Clean",
              "Arn",
            ],
          },
          "VPCSecurityGroupIdList": {
            "Fn::Join": [
              ",",
              {
                "Ref": "VPCSecurityGroupIdList",
              },
            ],
          },
          "VPCSubnetIdList": {
            "Fn::Join": [
              ",",
              {
                "Ref": "VPCSubnetIdList",
              },
            ],
          },
          "XraySetting": {
            "Ref": "XraySetting",
          },
        },
        "TemplateURL": {
          "Fn::Sub": "https://\${BootstrapBucket}.s3.\${AWS::Region}.amazonaws.com/\${BootstrapPrefix}/templates/streaming.json",
        },
      },
      "Type": "AWS::CloudFormation::Stack",
    },
    "TestAllBucket": {
      "DependsOn": [
        "MainAccessLogBucket",
        "MainAccessLogsBucketPolicy",
      ],
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "S3_BUCKET_NO_PUBLIC_RW_ACL",
          ],
        },
      },
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256",
              },
            },
          ],
        },
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedHeaders": [
                "*",
              ],
              "AllowedMethods": [
                "GET",
              ],
              "AllowedOrigins": [
                "*",
              ],
            },
          ],
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "ExpirationInDays": 1,
              "Status": "Enabled",
            },
          ],
        },
        "LoggingConfiguration": {
          "DestinationBucketName": {
            "Ref": "MainAccessLogBucket",
          },
          "LogFilePrefix": {
            "Fn::Join": [
              "",
              [
                {
                  "Ref": "MainAccessLogBucket",
                },
                "/TestAll/",
              ],
            ],
          },
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "VersioningConfiguration": {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
    },
    "TestAllStack": {
      "Properties": {
        "Parameters": {
          "AwsSdkLayerLambdaLayer": {
            "Ref": "AwsSdkLayerLambdaLayer",
          },
          "BootstrapBucket": {
            "Ref": "BootstrapBucket",
          },
          "BootstrapPrefix": {
            "Ref": "BootstrapPrefix",
          },
          "CFNInvokePolicy": {
            "Ref": "CFNInvokePolicy",
          },
          "CFNLambda": {
            "Fn::GetAtt": [
              "CFNLambda",
              "Arn",
            ],
          },
          "CommonModulesLambdaLayer": {
            "Ref": "CommonModulesLambdaLayer",
          },
          "ContentDesignerOutputBucket": {
            "Ref": "ContentDesignerOutputBucket",
          },
          "EsEndpoint": {
            "Fn::GetAtt": [
              "ESVar",
              "ESAddress",
            ],
          },
          "EsProxyLambda": {
            "Fn::GetAtt": [
              "ESProxyLambda",
              "Arn",
            ],
          },
          "LexV2BotAliasId": {
            "Fn::GetAtt": [
              "LexV2Bot",
              "botAliasId",
            ],
          },
          "LexV2BotId": {
            "Fn::GetAtt": [
              "LexV2Bot",
              "botId",
            ],
          },
          "LogRetentionPeriod": {
            "Ref": "LogRetentionPeriod",
          },
          "S3Clean": {
            "Fn::GetAtt": [
              "S3Clean",
              "Arn",
            ],
          },
          "TestAllBucket": {
            "Ref": "TestAllBucket",
          },
          "VPCSecurityGroupIdList": {
            "Fn::Join": [
              ",",
              {
                "Ref": "VPCSecurityGroupIdList",
              },
            ],
          },
          "VPCSubnetIdList": {
            "Fn::Join": [
              ",",
              {
                "Ref": "VPCSubnetIdList",
              },
            ],
          },
          "VarIndex": {
            "Fn::GetAtt": [
              "Var",
              "QnaIndex",
            ],
          },
          "XraySetting": {
            "Ref": "XraySetting",
          },
        },
        "TemplateURL": {
          "Fn::Sub": "https://\${BootstrapBucket}.s3.\${AWS::Region}.amazonaws.com/\${BootstrapPrefix}/templates/testall.json",
        },
      },
      "Type": "AWS::CloudFormation::Stack",
    },
    "UnauthenticatedRole": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "IAM_NO_INLINE_POLICY_CHECK",
            "CFN_NO_EXPLICIT_RESOURCE_NAMES",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "ForAnyValue:StringLike": {
                  "cognito-identity.amazonaws.com:amr": "unauthenticated",
                },
                "StringEquals": {
                  "cognito-identity.amazonaws.com:aud": {
                    "Ref": "IdPool",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Federated": "cognito-identity.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::Select": [
                  "0",
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          2,
                          {
                            "Fn::Split": [
                              "/",
                              {
                                "Ref": "AWS::StackId",
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                ],
              },
              "-UnauthenticatedRole",
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "Unzip": {
      "DependsOn": "Clean",
      "Properties": {
        "DstBucket": {
          "Ref": "Bucket",
        },
        "Key": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "BootstrapPrefix",
              },
              "/website.zip",
            ],
          ],
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
        "SrcBucket": {
          "Ref": "BootstrapBucket",
        },
        "buildDate": Any<Date>,
      },
      "Type": "Custom::S3Unzip",
    },
    "Urls": {
      "Properties": {
        "Client": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::GetAtt": [
                  "ApiUrl",
                  "Name",
                ],
              },
              "/static/client.html",
            ],
          ],
        },
        "Designer": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::GetAtt": [
                  "ApiUrl",
                  "Name",
                ],
              },
              "/static/index.html",
            ],
          ],
        },
        "OpenSearchDashboards": {
          "Fn::Sub": "\${ESVar.ESAddress}/_dashboards/app/dashboards#/list",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
      },
      "Type": "Custom::Variable",
    },
    "User": {
      "DependsOn": [
        "SignupPermision",
        "MessagePermision",
        "OpenSearchDashboardsRoleAttachment",
        "RoleAttachment",
      ],
      "Properties": {
        "DesiredDeliveryMediums": [
          "EMAIL",
        ],
        "UserAttributes": [
          {
            "Name": "email",
            "Value": {
              "Ref": "Email",
            },
          },
        ],
        "UserPoolId": {
          "Ref": "UserPool",
        },
        "Username": {
          "Ref": "Username",
        },
      },
      "Type": "AWS::Cognito::UserPoolUser",
    },
    "UserPool": {
      "Properties": {
        "AdminCreateUserConfig": {
          "AllowAdminCreateUserOnly": {
            "Fn::If": [
              "AdminSignUp",
              true,
              false,
            ],
          },
          "InviteMessageTemplate": {
            "EmailMessage": {
              "Fn::Sub": "<p>Hello {username},
<p>Welcome to QnABot! Your temporary password is:
<p>     {####}
<p>
<p>When the CloudFormation stack is COMPLETE, use the link below to log in to QnABot Content Designer, set your permanent password, and start building your bot!
<p>     \${ApiUrl.Name}/pages/designer
<p>
<p>Good luck!
<p>QnABot (www.amazon.com/qnabot)
",
            },
            "EmailSubject": "Welcome to QnABot!",
          },
        },
        "AliasAttributes": [
          "email",
        ],
        "AutoVerifiedAttributes": [
          "email",
        ],
        "LambdaConfig": {
          "CustomMessage": {
            "Fn::GetAtt": [
              "MessageLambda",
              "Arn",
            ],
          },
          "PreSignUp": {
            "Fn::GetAtt": [
              "SignupLambda",
              "Arn",
            ],
          },
        },
        "Schema": [
          {
            "AttributeDataType": "String",
            "Mutable": true,
            "Name": "email",
            "Required": true,
          },
        ],
        "UserPoolName": {
          "Fn::Join": [
            "-",
            [
              "UserPool",
              {
                "Ref": "AWS::StackName",
              },
            ],
          ],
        },
      },
      "Type": "AWS::Cognito::UserPool",
    },
    "UserRole": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "IAM_NO_INLINE_POLICY_CHECK",
            "CFN_NO_EXPLICIT_RESOURCE_NAMES",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "ForAnyValue:StringLike": {
                  "cognito-identity.amazonaws.com:amr": "authenticated",
                },
                "StringEquals": {
                  "cognito-identity.amazonaws.com:aud": {
                    "Ref": "IdPool",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Federated": "cognito-identity.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Policies": [
          {
            "Fn::If": [
              "StreamingEnabled",
              {
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": [
                        "execute-api:Invoke",
                      ],
                      "Effect": "Allow",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Fn::Sub": "\${AWS::Partition}",
                              },
                              ":execute-api:",
                              {
                                "Fn::Sub": "\${AWS::Region}",
                              },
                              ":",
                              {
                                "Fn::Sub": "\${AWS::AccountId}",
                              },
                              ":",
                              {
                                "Fn::GetAtt": [
                                  "StreamingStack",
                                  "Outputs.StreamingWebSocketApiId",
                                ],
                              },
                              "/Prod/*",
                            ],
                          ],
                        },
                      ],
                    },
                  ],
                  "Version": "2012-10-17",
                },
                "PolicyName": "StreamingApiAccess",
              },
              {
                "Ref": "AWS::NoValue",
              },
            ],
          },
        ],
        "RoleName": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::Select": [
                  "0",
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          2,
                          {
                            "Fn::Split": [
                              "/",
                              {
                                "Ref": "AWS::StackId",
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                ],
              },
              "-UserRole",
            ],
          ],
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "UserToGroup": {
      "Properties": {
        "GroupName": {
          "Ref": "Admins",
        },
        "UserPoolId": {
          "Ref": "UserPool",
        },
        "Username": {
          "Ref": "User",
        },
      },
      "Type": "AWS::Cognito::UserPoolUserToGroupAttachment",
    },
    "Users": {
      "Properties": {
        "GroupName": "Users",
        "UserPoolId": {
          "Ref": "UserPool",
        },
      },
      "Type": "AWS::Cognito::UserPoolGroup",
    },
    "UsersTable": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W74",
              "reason": "This DynamoDB table does not require CMK encryption store in KMS",
            },
          ],
        },
      },
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "UserId",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "UserId",
            "KeyType": "HASH",
          },
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true,
        },
        "TimeToLiveSpecification": {
          "AttributeName": "ttl",
          "Enabled": true,
        },
      },
      "Type": "AWS::DynamoDB::Table",
    },
    "UtteranceLambda": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "This lambda function does not require to have ReservedConcurrentExecutions",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "LAMBDA_CONCURRENCY_CHECK",
            "LAMBDA_INSIDE_VPC",
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "BootstrapBucket",
          },
          "S3Key": {
            "Fn::Sub": "\${BootstrapPrefix}/lambda/proxy-es.zip",
          },
          "S3ObjectVersion": {
            "Ref": "ESProxyCodeVersion",
          },
        },
        "Environment": {
          "Variables": {
            "ES_ADDRESS": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Fn::GetAtt": [
                      "ESVar",
                      "ESAddress",
                    ],
                  },
                ],
              ],
            },
            "ES_INDEX": {
              "Fn::GetAtt": [
                "Var",
                "QnaIndex",
              ],
            },
            "SOLUTION_ID": "SO0189",
            "SOLUTION_VERSION": "vx.x.x",
            "UTTERANCE_BUCKET": {
              "Ref": "AssetBucket",
            },
            "UTTERANCE_KEY": "default-utterances.json",
          },
        },
        "Handler": "index.utterances",
        "Layers": [
          {
            "Ref": "AwsSdkLayerLambdaLayer",
          },
          {
            "Ref": "CommonModulesLambdaLayer",
          },
          {
            "Ref": "EsProxyLambdaLayer",
          },
          {
            "Ref": "QnABotCommonLambdaLayer",
          },
        ],
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "UtteranceLambdaLogGroup",
          },
        },
        "MemorySize": "1408",
        "Role": {
          "Fn::GetAtt": [
            "ESProxyLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs",
        "Tags": [
          {
            "Key": "Type",
            "Value": "Service",
          },
        ],
        "Timeout": 300,
        "TracingConfig": {
          "Fn::If": [
            "XRAYEnabled",
            {
              "Mode": "Active",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SecurityGroupIds": {
                "Ref": "VPCSecurityGroupIdList",
              },
              "SubnetIds": {
                "Ref": "VPCSubnetIdList",
              },
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "UtteranceLambdaLogGroup": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
            "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Sub": "/aws/lambda/\${AWS::StackName}-UtteranceLambda",
              },
              {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Fn::If": [
            "LogRetentionPeriodIsNotZero",
            {
              "Ref": "LogRetentionPeriod",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "Var": {
      "Properties": {
        "FeedbackIndex": {
          "op": "toLowerCase",
          "value": {
            "Fn::Sub": "\${AWS::StackName}-feedback",
          },
        },
        "MetricsIndex": {
          "op": "toLowerCase",
          "value": {
            "Fn::Sub": "\${AWS::StackName}-metrics",
          },
        },
        "QnAType": "qna",
        "QnaIndex": {
          "op": "toLowerCase",
          "value": {
            "Fn::Sub": "\${AWS::StackName}",
          },
        },
        "QuizType": "quiz",
        "ServiceToken": {
          "Fn::GetAtt": [
            "CFNLambda",
            "Arn",
          ],
        },
        "index": {
          "op": "toLowerCase",
          "value": {
            "Ref": "AWS::StackName",
          },
        },
      },
      "Type": "Custom::Variable",
    },
    "VersionLambda": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "This lambda function does not require to have ReservedConcurrentExecutions",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "LAMBDA_CONCURRENCY_CHECK",
            "LAMBDA_INSIDE_VPC",
          ],
        },
      },
      "Properties": {
        "Code": {
          "ZipFile": "/** ************************************************************************************************
*   Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.                             *
*   SPDX-License-Identifier: Apache-2.0                                                            *
 ************************************************************************************************ */

const { S3Client, HeadObjectCommand } = require('@aws-sdk/client-s3');

const region = process.env.AWS_REGION;
const client = new S3Client({
    customUserAgent: [
        [\`AWSSOLUTION/\${process.env.SOLUTION_ID}/\${process.env.SOLUTION_VERSION}\`],
        [\`AWSSOLUTION-CAPABILITY/\${process.env.SOLUTION_ID}-C023/\${process.env.SOLUTION_VERSION}\`],
    ],
    region,
});

const SUCCESS = 'SUCCESS';
const FAILED = 'FAILED';
const https = require('https');
const { URL } = require('url');

async function send(event, context, responseStatus, responseData, physicalResourceId, noEcho) {
    return new Promise((resolve, reject) => {
        const responseBody = JSON.stringify({
            Status: responseStatus,
            Reason: \`See the details in CloudWatch Log Stream: \${context.logStreamName}\`,
            PhysicalResourceId: physicalResourceId || context.logStreamName,
            StackId: event.StackId,
            RequestId: event.RequestId,
            LogicalResourceId: event.LogicalResourceId,
            NoEcho: noEcho || false,
            Data: responseData,
        });

        console.log('Response body:\\n', responseBody);

        const parsedUrl = new URL(event.ResponseURL);

        const options = {
            hostname: parsedUrl.hostname,
            port: 443,
            path: parsedUrl.pathname + parsedUrl.search,
            method: 'PUT',
            headers: {
                'content-type': '',
                'content-length': responseBody.length,
            },
        };

        const request = https.request(options, (response) => {
            console.log(\`Status code: \${response.statusCode}\`);
            console.log(\`Status message: \${response.statusMessage}\`);
            response.on('end', () => {
                resolve();
            });
        });

        request.on('error', (error) => {
            console.log(\`send(..) failed executing https.request(..): \${error}\`);
            reject(error);
        });

        request.write(responseBody);
        request.end();
    });
}

exports.handler = async function (event, context) {
    console.log(JSON.stringify(event, null, 2));
    if (event.RequestType !== 'Delete') {
        const params = {
            Bucket: event.ResourceProperties.Bucket,
            Key: event.ResourceProperties.Key,
        };
        const headObjCmd = new HeadObjectCommand(params);
        try {
            const result = await client.send(headObjCmd);
            await send(event, context, SUCCESS, {
                version: result.VersionId ? result.VersionId : 1,
            });
        } catch (e) {
            console.log(e);
            await send(event, context, FAILED);
        }
    } else {
        await send(event, context, SUCCESS);
    }
    context.done();
};
",
        },
        "Environment": {
          "Variables": {
            "SOLUTION_ID": "SO0189",
            "SOLUTION_VERSION": "vx.x.x",
          },
        },
        "Handler": "index.handler",
        "LoggingConfig": {
          "LogGroup": {
            "Ref": "VersionLambdaLogGroup",
          },
        },
        "MemorySize": "3008",
        "Role": {
          "Fn::GetAtt": [
            "CFNLambdaRole",
            "Arn",
          ],
        },
        "Runtime": "nodejs",
        "Tags": [
          {
            "Key": "Type",
            "Value": "CustomResource",
          },
        ],
        "Timeout": 60,
        "TracingConfig": {
          "Fn::If": [
            "XRAYEnabled",
            {
              "Mode": "Active",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
        "VpcConfig": {
          "Fn::If": [
            "VPCEnabled",
            {
              "SecurityGroupIds": {
                "Ref": "VPCSecurityGroupIdList",
              },
              "SubnetIds": {
                "Ref": "VPCSubnetIdList",
              },
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "VersionLambdaLogGroup": {
      "Metadata": {
        "guard": {
          "SuppressedRules": [
            "CLOUDWATCH_LOG_GROUP_ENCRYPTED",
            "CW_LOGGROUP_RETENTION_PERIOD_CHECK",
          ],
        },
      },
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              {
                "Fn::Sub": "/aws/lambda/\${AWS::StackName}-VersionLambda",
              },
              {
                "Fn::Select": [
                  "2",
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Ref": "AWS::StackId",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
        "RetentionInDays": {
          "Fn::If": [
            "LogRetentionPeriodIsNotZero",
            {
              "Ref": "LogRetentionPeriod",
            },
            {
              "Ref": "AWS::NoValue",
            },
          ],
        },
      },
      "Type": "AWS::Logs::LogGroup",
    },
    "WarmerLambdaRole": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W11",
              "reason": "This IAM role requires to have * resource on its permission policy",
            },
            {
              "id": "W12",
              "reason": "Lambda needs the following minimum required permissions to send trace data to X-Ray",
            },
          ],
        },
        "guard": {
          "SuppressedRules": [
            "IAM_NO_INLINE_POLICY_CHECK",
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaFunctionServiceRolePolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/lambda/*",
                      ],
                    ],
                  },
                },
                {
                  "Action": [
                    "ec2:CreateNetworkInterface",
                    "ec2:AssignPrivateIpAddresses",
                    "ec2:UnassignPrivateIpAddresses",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterface",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "lambdaVPCAccessExecutionRole",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "xray:PutTraceSegments",
                    "xray:PutTelemetryRecords",
                    "xray:GetSamplingRules",
                    "xray:GetSamplingTargets",
                    "xray:GetSamplingStatisticSummaries",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*",
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "xrayDaemonWriteAccess",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "es:ESHttpGet",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*",
                  ],
                  "Sid": "AllowES",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "ParamStorePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "dashboard": {
      "Properties": {
        "DashboardBody": {
          "Fn::Sub": "{"widgets":[{"type":"text","width":24,"height":2,"x":0,"y":0,"properties":{"markdown":"# QnABot:\${AWS::StackName} Dashboard"}},{"type":"text","width":24,"height":2,"x":0,"y":3,"properties":{"markdown":"## OpenSearch"}},{"type":"metric","width":6,"height":6,"properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/ES","ReadLatency","DomainName","\${ESVar.ESDomain}","ClientId","\${AWS::AccountId}"]],"region":"\${AWS::Region}"},"x":0,"y":5},{"type":"metric","width":6,"height":6,"properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/ES","ReadIOPS","DomainName","\${ESVar.ESDomain}","ClientId","\${AWS::AccountId}"],[".","ReadThroughput",".",".",".",".",{"yAxis":"right"}]],"region":"\${AWS::Region}"},"x":6,"y":5},{"type":"metric","width":6,"height":6,"properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/ES","CPUUtilization","DomainName","\${ESVar.ESDomain}","ClientId","\${AWS::AccountId}"]],"region":"\${AWS::Region}"},"x":12,"y":5},{"type":"metric","x":18,"y":5,"properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/ES","ClusterUsedSpace","DomainName","\${ESVar.ESDomain}","ClientId","\${AWS::AccountId}"],[".","SearchableDocuments",".",".",".",".",{"yAxis":"right"}]],"region":"\${AWS::Region}"},"height":6,"width":6},{"type":"metric","width":6,"height":6,"properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/ES","ClusterStatus.green","DomainName","\${ESVar.ESDomain}","ClientId","\${AWS::AccountId}",{"color":"#2ca02c"}],[".","ClusterStatus.red",".",".",".",".",{"color":"#d62728"}],[".","ClusterStatus.yellow",".",".",".",".",{"color":"#bcbd22"}]],"region":"\${AWS::Region}"},"x":0,"y":11},{"type":"text","width":24,"height":2,"x":0,"y":24,"properties":{"markdown":"## Lambda Function"}},{"type":"text","width":24,"height":2,"x":0,"y":26,"properties":{"markdown":"### CustomResource"}},{"type":"metric","properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/Lambda","Errors","FunctionName","\${VersionLambda}",{"stat":"Sum"}],[".","Invocations",".",".",{"stat":"Sum"}],[".","Duration",".",".",{"yAxis":"right"}],[".","Throttles",".",".",{"stat":"Sum"}]],"region":"\${AWS::Region}","title":"VersionLambda","period":300},"height":6,"width":6,"x":0,"y":28},{"type":"metric","properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/Lambda","Errors","FunctionName","\${CFNLambda}",{"stat":"Sum"}],[".","Invocations",".",".",{"stat":"Sum"}],[".","Duration",".",".",{"yAxis":"right"}],[".","Throttles",".",".",{"stat":"Sum"}]],"region":"\${AWS::Region}","title":"CFNLambda","period":300},"height":6,"width":6,"x":6,"y":28},{"type":"metric","properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/Lambda","Errors","FunctionName","\${ESCFNProxyLambda}",{"stat":"Sum"}],[".","Invocations",".",".",{"stat":"Sum"}],[".","Duration",".",".",{"yAxis":"right"}],[".","Throttles",".",".",{"stat":"Sum"}]],"region":"\${AWS::Region}","title":"ESCFNProxyLambda","period":300},"height":6,"width":6,"x":12,"y":28},{"type":"text","width":24,"height":2,"x":0,"y":34,"properties":{"markdown":"### Fulfillment"}},{"type":"metric","properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/Lambda","Errors","FunctionName","\${FulfillmentLambda}",{"stat":"Sum"}],[".","Invocations",".",".",{"stat":"Sum"}],[".","Duration",".",".",{"yAxis":"right"}],[".","Throttles",".",".",{"stat":"Sum"}]],"region":"\${AWS::Region}","title":"FulfillmentLambda","period":300},"height":6,"width":6,"x":0,"y":36},{"type":"text","width":24,"height":2,"x":0,"y":42,"properties":{"markdown":"### Warmer"}},{"type":"metric","properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/Lambda","Errors","FunctionName","\${ESWarmerLambda}",{"stat":"Sum"}],[".","Invocations",".",".",{"stat":"Sum"}],[".","Duration",".",".",{"yAxis":"right"}],[".","Throttles",".",".",{"stat":"Sum"}]],"region":"\${AWS::Region}","title":"ESWarmerLambda","period":300},"height":6,"width":6,"x":0,"y":44},{"type":"text","width":24,"height":2,"x":0,"y":50,"properties":{"markdown":"### Api"}},{"type":"metric","properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/Lambda","Errors","FunctionName","\${LexBuildLambda}",{"stat":"Sum"}],[".","Invocations",".",".",{"stat":"Sum"}],[".","Duration",".",".",{"yAxis":"right"}],[".","Throttles",".",".",{"stat":"Sum"}]],"region":"\${AWS::Region}","title":"LexBuildLambda","period":300},"height":6,"width":6,"x":0,"y":52},{"type":"metric","properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/Lambda","Errors","FunctionName","\${LexBuildLambdaStart}",{"stat":"Sum"}],[".","Invocations",".",".",{"stat":"Sum"}],[".","Duration",".",".",{"yAxis":"right"}],[".","Throttles",".",".",{"stat":"Sum"}]],"region":"\${AWS::Region}","title":"LexBuildLambdaStart","period":300},"height":6,"width":6,"x":6,"y":52},{"type":"metric","properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/Lambda","Errors","FunctionName","\${LexBuildLambdaPoll}",{"stat":"Sum"}],[".","Invocations",".",".",{"stat":"Sum"}],[".","Duration",".",".",{"yAxis":"right"}],[".","Throttles",".",".",{"stat":"Sum"}]],"region":"\${AWS::Region}","title":"LexBuildLambdaPoll","period":300},"height":6,"width":6,"x":12,"y":52},{"type":"metric","properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/Lambda","Errors","FunctionName","\${Lexv2BotLambda}",{"stat":"Sum"}],[".","Invocations",".",".",{"stat":"Sum"}],[".","Duration",".",".",{"yAxis":"right"}],[".","Throttles",".",".",{"stat":"Sum"}]],"region":"\${AWS::Region}","title":"Lexv2BotLambda","period":300},"height":6,"width":6,"x":18,"y":52},{"type":"metric","properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/Lambda","Errors","FunctionName","\${LexProxyLambda}",{"stat":"Sum"}],[".","Invocations",".",".",{"stat":"Sum"}],[".","Duration",".",".",{"yAxis":"right"}],[".","Throttles",".",".",{"stat":"Sum"}]],"region":"\${AWS::Region}","title":"LexProxyLambda","period":300},"height":6,"width":6,"x":0,"y":58},{"type":"metric","properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/Lambda","Errors","FunctionName","\${LexStatusLambda}",{"stat":"Sum"}],[".","Invocations",".",".",{"stat":"Sum"}],[".","Duration",".",".",{"yAxis":"right"}],[".","Throttles",".",".",{"stat":"Sum"}]],"region":"\${AWS::Region}","title":"LexStatusLambda","period":300},"height":6,"width":6,"x":6,"y":58},{"type":"metric","properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/Lambda","Errors","FunctionName","\${S3ListLambda}",{"stat":"Sum"}],[".","Invocations",".",".",{"stat":"Sum"}],[".","Duration",".",".",{"yAxis":"right"}],[".","Throttles",".",".",{"stat":"Sum"}]],"region":"\${AWS::Region}","title":"S3ListLambda","period":300},"height":6,"width":6,"x":12,"y":58},{"type":"metric","properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/Lambda","Errors","FunctionName","\${ExampleS3ListLambda}",{"stat":"Sum"}],[".","Invocations",".",".",{"stat":"Sum"}],[".","Duration",".",".",{"yAxis":"right"}],[".","Throttles",".",".",{"stat":"Sum"}]],"region":"\${AWS::Region}","title":"ExampleS3ListLambda","period":300},"height":6,"width":6,"x":18,"y":58},{"type":"metric","properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/Lambda","Errors","FunctionName","\${ExampleS3ListPhotoLambda}",{"stat":"Sum"}],[".","Invocations",".",".",{"stat":"Sum"}],[".","Duration",".",".",{"yAxis":"right"}],[".","Throttles",".",".",{"stat":"Sum"}]],"region":"\${AWS::Region}","title":"ExampleS3ListPhotoLambda","period":300},"height":6,"width":6,"x":0,"y":64},{"type":"metric","properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/Lambda","Errors","FunctionName","\${SchemaLambda}",{"stat":"Sum"}],[".","Invocations",".",".",{"stat":"Sum"}],[".","Duration",".",".",{"yAxis":"right"}],[".","Throttles",".",".",{"stat":"Sum"}]],"region":"\${AWS::Region}","title":"SchemaLambda","period":300},"height":6,"width":6,"x":6,"y":64},{"type":"text","width":24,"height":2,"x":0,"y":70,"properties":{"markdown":"### Service"}},{"type":"metric","properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/Lambda","Errors","FunctionName","\${UtteranceLambda}",{"stat":"Sum"}],[".","Invocations",".",".",{"stat":"Sum"}],[".","Duration",".",".",{"yAxis":"right"}],[".","Throttles",".",".",{"stat":"Sum"}]],"region":"\${AWS::Region}","title":"UtteranceLambda","period":300},"height":6,"width":6,"x":0,"y":72},{"type":"metric","properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/Lambda","Errors","FunctionName","\${ESQidLambda}",{"stat":"Sum"}],[".","Invocations",".",".",{"stat":"Sum"}],[".","Duration",".",".",{"yAxis":"right"}],[".","Throttles",".",".",{"stat":"Sum"}]],"region":"\${AWS::Region}","title":"ESQidLambda","period":300},"height":6,"width":6,"x":6,"y":72},{"type":"metric","properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/Lambda","Errors","FunctionName","\${ESCleaningLambda}",{"stat":"Sum"}],[".","Invocations",".",".",{"stat":"Sum"}],[".","Duration",".",".",{"yAxis":"right"}],[".","Throttles",".",".",{"stat":"Sum"}]],"region":"\${AWS::Region}","title":"ESCleaningLambda","period":300},"height":6,"width":6,"x":12,"y":72},{"type":"metric","properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/Lambda","Errors","FunctionName","\${ESProxyLambda}",{"stat":"Sum"}],[".","Invocations",".",".",{"stat":"Sum"}],[".","Duration",".",".",{"yAxis":"right"}],[".","Throttles",".",".",{"stat":"Sum"}]],"region":"\${AWS::Region}","title":"ESProxyLambda","period":300},"height":6,"width":6,"x":18,"y":72},{"type":"text","width":24,"height":2,"x":0,"y":78,"properties":{"markdown":"### Logging"}},{"type":"metric","properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/Lambda","Errors","FunctionName","\${ESLoggingLambda}",{"stat":"Sum"}],[".","Invocations",".",".",{"stat":"Sum"}],[".","Duration",".",".",{"yAxis":"right"}],[".","Throttles",".",".",{"stat":"Sum"}]],"region":"\${AWS::Region}","title":"ESLoggingLambda","period":300},"height":6,"width":6,"x":0,"y":80},{"type":"text","width":24,"height":2,"x":0,"y":86,"properties":{"markdown":"### Query"}},{"type":"metric","properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/Lambda","Errors","FunctionName","\${ESQueryLambda}",{"stat":"Sum"}],[".","Invocations",".",".",{"stat":"Sum"}],[".","Duration",".",".",{"yAxis":"right"}],[".","Throttles",".",".",{"stat":"Sum"}]],"region":"\${AWS::Region}","title":"ESQueryLambda","period":300},"height":6,"width":6,"x":0,"y":88},{"type":"text","width":24,"height":2,"x":0,"y":94,"properties":{"markdown":"### S3 Clean"}},{"type":"metric","properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/Lambda","Errors","FunctionName","\${S3Clean}",{"stat":"Sum"}],[".","Invocations",".",".",{"stat":"Sum"}],[".","Duration",".",".",{"yAxis":"right"}],[".","Throttles",".",".",{"stat":"Sum"}]],"region":"\${AWS::Region}","title":"S3Clean","period":300},"height":6,"width":6,"x":0,"y":96},{"type":"text","width":24,"height":2,"x":0,"y":102,"properties":{"markdown":"### Cognito"}},{"type":"metric","properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/Lambda","Errors","FunctionName","\${MessageLambda}",{"stat":"Sum"}],[".","Invocations",".",".",{"stat":"Sum"}],[".","Duration",".",".",{"yAxis":"right"}],[".","Throttles",".",".",{"stat":"Sum"}]],"region":"\${AWS::Region}","title":"MessageLambda","period":300},"height":6,"width":6,"x":0,"y":104},{"type":"metric","properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/Lambda","Errors","FunctionName","\${SignupLambda}",{"stat":"Sum"}],[".","Invocations",".",".",{"stat":"Sum"}],[".","Duration",".",".",{"yAxis":"right"}],[".","Throttles",".",".",{"stat":"Sum"}]],"region":"\${AWS::Region}","title":"SignupLambda","period":300},"height":6,"width":6,"x":6,"y":104},{"type":"text","width":24,"height":2,"x":0,"y":110,"properties":{"markdown":"### Solution Helper"}},{"type":"metric","properties":{"view":"timeSeries","stacked":false,"metrics":[["AWS/Lambda","Errors","FunctionName","\${SolutionHelper}",{"stat":"Sum"}],[".","Invocations",".",".",{"stat":"Sum"}],[".","Duration",".",".",{"yAxis":"right"}],[".","Throttles",".",".",{"stat":"Sum"}]],"region":"\${AWS::Region}","title":"SolutionHelper","period":300},"height":6,"width":6,"x":0,"y":112}]}",
        },
        "DashboardName": {
          "Fn::Sub": "\${AWS::Region}-\${AWS::StackName}",
        },
      },
      "Type": "AWS::CloudWatch::Dashboard",
    },
    "export": {
      "Properties": {
        "ParentId": {
          "Ref": "exports",
        },
        "PathPart": "{proxy+}",
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "exportDelete": {
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "DELETE",
        "Integration": {
          "Credentials": {
            "Fn::GetAtt": [
              "S3AccessRole",
              "Arn",
            ],
          },
          "IntegrationHttpMethod": "DELETE",
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type",
              },
              "StatusCode": 200,
            },
            {
              "ResponseTemplates": {
                "application/xml": "{"error":"Job not found"}",
              },
              "SelectionPattern": "403",
              "StatusCode": 404,
            },
          ],
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy",
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":s3:path/",
                {
                  "Ref": "ContentDesignerOutputBucket",
                },
                "/status/{proxy}",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.content-type": false,
            },
            "StatusCode": 200,
          },
          {
            "StatusCode": 400,
          },
          {
            "StatusCode": 404,
          },
        ],
        "RequestParameters": {
          "method.request.path.proxy": false,
        },
        "ResourceId": {
          "Ref": "export",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "exportGet": {
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Credentials": {
            "Fn::GetAtt": [
              "S3AccessRole",
              "Arn",
            ],
          },
          "IntegrationHttpMethod": "GET",
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type",
              },
              "StatusCode": 200,
            },
            {
              "ResponseTemplates": {
                "application/xml": "{"error":"Job not found"}",
              },
              "SelectionPattern": "403",
              "StatusCode": 404,
            },
          ],
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy",
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":s3:path/",
                {
                  "Ref": "ContentDesignerOutputBucket",
                },
                "/status-export/{proxy}",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.content-type": false,
            },
            "StatusCode": 200,
          },
          {
            "StatusCode": 400,
          },
          {
            "StatusCode": 404,
          },
        ],
        "RequestParameters": {
          "method.request.path.proxy": false,
        },
        "ResourceId": {
          "Ref": "export",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "exportPut": {
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "PUT",
        "Integration": {
          "Credentials": {
            "Fn::GetAtt": [
              "S3AccessRole",
              "Arn",
            ],
          },
          "IntegrationHttpMethod": "PUT",
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type",
              },
              "StatusCode": 200,
            },
            {
              "ResponseTemplates": {
                "application/xml": "{"error":"Job not found"}",
              },
              "SelectionPattern": "403",
              "StatusCode": 404,
            },
          ],
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy",
          },
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#set($inputRoot = $input.path('$'))

{
    "bucket":"\${ExportBucket}",
    "index":"\${Var.QnaIndex}",
    "id":"$input.params('proxy')",
    "config":"status/$input.params('proxy')",
    "tmp":"tmp/$input.params('proxy')",
    "key":"$inputRoot.get('prefix')data-export/$input.params('proxy')",
    "filter":"$inputRoot.get('filter')",
    "status":"Started"
}",
            },
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":s3:path/",
                {
                  "Ref": "ExportBucket",
                },
                "/status-export/{proxy}",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.content-type": false,
            },
            "StatusCode": 200,
          },
          {
            "StatusCode": 400,
          },
          {
            "StatusCode": 404,
          },
        ],
        "RequestParameters": {
          "method.request.path.proxy": false,
        },
        "ResourceId": {
          "Ref": "export",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "exports": {
      "Properties": {
        "ParentId": {
          "Ref": "Jobs",
        },
        "PathPart": "exports",
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "exportsList": {
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "StatusCode": 200,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*Exception.*",
              "StatusCode": 405,
            },
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#set ($root="https://\${!context.domainName}/\${!context.stage}")

{
    "bucket":"\${ContentDesignerOutputBucket}",
    "prefix":"status-export/",
    "perpage":"$input.params('perpage')",
    "token":"$input.params('token')",
    "type":"exports",
    "root":"$root"
}

",
            },
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "S3ListLambda",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.date": true,
            },
            "StatusCode": 200,
          },
          {
            "StatusCode": 404,
          },
          {
            "StatusCode": 405,
          },
          {
            "StatusCode": 500,
          },
        ],
        "RequestParameters": {
          "method.request.querystring.perpage": false,
          "method.request.querystring.token": false,
        },
        "ResourceId": {
          "Ref": "exports",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "import": {
      "Properties": {
        "ParentId": {
          "Ref": "imports",
        },
        "PathPart": "{proxy+}",
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "importDelete": {
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "DELETE",
        "Integration": {
          "Credentials": {
            "Fn::GetAtt": [
              "S3AccessRole",
              "Arn",
            ],
          },
          "IntegrationHttpMethod": "DELETE",
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type",
              },
              "StatusCode": 200,
            },
            {
              "ResponseTemplates": {
                "application/xml": "{"error":"Job not found"}",
              },
              "SelectionPattern": "403",
              "StatusCode": 404,
            },
          ],
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy",
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":s3:path/",
                {
                  "Ref": "ContentDesignerOutputBucket",
                },
                "/status-import/{proxy}",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.content-type": false,
            },
            "StatusCode": 200,
          },
          {
            "StatusCode": 400,
          },
          {
            "StatusCode": 404,
          },
        ],
        "RequestParameters": {
          "method.request.path.proxy": false,
        },
        "ResourceId": {
          "Ref": "import",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "importGet": {
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Credentials": {
            "Fn::GetAtt": [
              "S3AccessRole",
              "Arn",
            ],
          },
          "IntegrationHttpMethod": "GET",
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type",
              },
              "StatusCode": 200,
            },
            {
              "ResponseTemplates": {
                "application/xml": "{"error":"Job not found"}",
              },
              "SelectionPattern": "403",
              "StatusCode": 404,
            },
          ],
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy",
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":s3:path/",
                {
                  "Ref": "ContentDesignerOutputBucket",
                },
                "/status-import/{proxy}",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.content-type": false,
            },
            "StatusCode": 200,
          },
          {
            "StatusCode": 400,
          },
          {
            "StatusCode": 404,
          },
        ],
        "RequestParameters": {
          "method.request.path.proxy": false,
        },
        "ResourceId": {
          "Ref": "import",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "imports": {
      "Properties": {
        "ParentId": {
          "Ref": "Jobs",
        },
        "PathPart": "imports",
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "importsList": {
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "StatusCode": 200,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*Exception.*",
              "StatusCode": 405,
            },
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#set ($root="https://\${!context.domainName}/\${!context.stage}")

{
    "bucket":"\${ContentDesignerOutputBucket}",
    "prefix":"status-import/",
    "perpage":"$input.params('perpage')",
    "token":"$input.params('token')",
    "type":"imports",
    "root":"$root"
}

",
            },
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "S3ListLambda",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.date": true,
            },
            "StatusCode": 200,
          },
          {
            "StatusCode": 404,
          },
          {
            "StatusCode": 405,
          },
          {
            "StatusCode": 500,
          },
        ],
        "RequestParameters": {
          "method.request.querystring.perpage": false,
          "method.request.querystring.token": false,
        },
        "ResourceId": {
          "Ref": "imports",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "photo": {
      "Properties": {
        "ParentId": {
          "Ref": "photos",
        },
        "PathPart": "{proxy+}",
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "photoGet": {
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Credentials": {
            "Fn::GetAtt": [
              "S3AccessRole",
              "Arn",
            ],
          },
          "IntegrationHttpMethod": "GET",
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type",
              },
              "StatusCode": 200,
            },
            {
              "ResponseTemplates": {
                "application/xml": "{"error":"Not Found"}",
              },
              "SelectionPattern": "403",
              "StatusCode": 404,
            },
          ],
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy",
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":s3:path/",
                {
                  "Ref": "AssetBucket",
                },
                "/examples/photos/{proxy}",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.content-type": false,
            },
            "StatusCode": 200,
          },
          {
            "StatusCode": 400,
          },
          {
            "StatusCode": 404,
          },
        ],
        "RequestParameters": {
          "method.request.path.proxy": false,
        },
        "ResourceId": {
          "Ref": "photo",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "photos": {
      "Properties": {
        "ParentId": {
          "Ref": "Examples",
        },
        "PathPart": "photos",
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "photosList": {
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "StatusCode": 200,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*Exception.*",
              "StatusCode": 405,
            },
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#set ($root="https://\${!context.domainName}/\${!context.stage}")

{
    "bucket":"\${AssetBucket}",
    "prefix":"examples/photos/",
    "perpage":"$input.params('perpage')",
    "token":"$input.params('token')",
    "root":"$root"
}

",
            },
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ExampleS3ListPhotoLambda",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.date": true,
            },
            "StatusCode": 200,
          },
          {
            "StatusCode": 404,
          },
          {
            "StatusCode": 405,
          },
          {
            "StatusCode": 500,
          },
        ],
        "RequestParameters": {
          "method.request.querystring.perpage": false,
          "method.request.querystring.token": false,
        },
        "ResourceId": {
          "Ref": "photos",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "rootGet": {
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W59",
              "reason": "This ApiGateway Method does not need authorization setup",
            },
          ],
        },
      },
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": {
                  "Fn::Sub": "#set ($root="https://\${!context.domainName}/\${!context.stage}")

{
    "region":"\${!stageVariables.Region}",
    "Version":"\${InfoVar.Version}",
    "BuildDate":"\${InfoVar.BuildDateString}",
    "BotName":"Use LexV2 bot",
    "BotVersion":"$LATEST",
    "v2BotId": "\${LexV2Bot.botId}",
    "v2BotAliasId": "\${LexV2Bot.botAliasId}",
    "v2BotLocaleId": "\${LexV2BotLocaleIds}",
    "PoolId":"\${IdPool}",
    "StackName":"\${AWS::StackName}",
    "ClientIdClient":"\${ClientClient}",
    "ClientIdDesigner":"\${ClientDesigner}",
    "UserPool":"\${UserPool}",
    "StreamingWebSocketEndpoint": "$stageVariables.StreamingWebSocketEndpoint",
    "SolutionHelper": "\${SolutionHelper}",
    "SettingsTable": "\${SettingsTable}",
    "Id":"$stageVariables.Id",
    "_links":{
        "root":{
            "href":"$root"
        },
        "questions":{
            "href":"$root/questions"
        },        
        "crawler":{
            "href":"$root/crawler"
        },
        "crawlerV2":{
            "href":"$root/kendranativecrawler"
        },
        "bot":{
            "href":"$root/bot"
        },
        "jobs":{
            "href":"$root/jobs"
        },
        "connect":{
            "href":"$root/connect"
        },
        "genesys":{
            "href":"$root/genesys"
        },
        "translate":{
            "href":"$root/translate"
        },
        "examples":{
            "href":"$root/examples/documents"
        },
        "DesignerLogin":{
            "href":"$stageVariables.DesignerLoginUrl"
        },
        "ClientLogin":{
            "href":"$stageVariables.ClientLoginUrl"
        },
        "CognitoEndpoint":{
            "href":"$stageVariables.CognitoEndpoint"
        },
        "Services":{
            "href":"$root/services"
        },
        "OpenSearchDashboards":{
            "href":"https://\${Urls.OpenSearchDashboards}"
        }
    }
}

",
                },
              },
              "StatusCode": "200",
            },
          ],
          "RequestTemplates": {
            "application/json": "{"statusCode": 200}",
          },
          "Type": "MOCK",
        },
        "MethodResponses": [
          {
            "StatusCode": 200,
          },
        ],
        "ResourceId": {
          "Fn::GetAtt": [
            "API",
            "RootResourceId",
          ],
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "testall": {
      "Properties": {
        "ParentId": {
          "Ref": "testalls",
        },
        "PathPart": "{proxy+}",
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "testallDelete": {
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "DELETE",
        "Integration": {
          "Credentials": {
            "Fn::GetAtt": [
              "S3AccessRole",
              "Arn",
            ],
          },
          "IntegrationHttpMethod": "DELETE",
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type",
              },
              "StatusCode": 200,
            },
            {
              "ResponseTemplates": {
                "application/xml": "{"error":"Job not found"}",
              },
              "SelectionPattern": "403",
              "StatusCode": 404,
            },
          ],
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy",
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":s3:path/",
                {
                  "Ref": "ContentDesignerOutputBucket",
                },
                "/status-testall/{proxy}",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.content-type": false,
            },
            "StatusCode": 200,
          },
          {
            "StatusCode": 400,
          },
          {
            "StatusCode": 404,
          },
        ],
        "RequestParameters": {
          "method.request.path.proxy": false,
        },
        "ResourceId": {
          "Ref": "testall",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "testallGet": {
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "Credentials": {
            "Fn::GetAtt": [
              "S3AccessRole",
              "Arn",
            ],
          },
          "IntegrationHttpMethod": "GET",
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type",
              },
              "StatusCode": 200,
            },
            {
              "ResponseTemplates": {
                "application/xml": "{"error":"Job not found"}",
              },
              "SelectionPattern": "403",
              "StatusCode": 404,
            },
          ],
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy",
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":s3:path/",
                {
                  "Ref": "ContentDesignerOutputBucket",
                },
                "/status-testall/{proxy}",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.content-type": false,
            },
            "StatusCode": 200,
          },
          {
            "StatusCode": 400,
          },
          {
            "StatusCode": 404,
          },
        ],
        "RequestParameters": {
          "method.request.path.proxy": false,
        },
        "ResourceId": {
          "Ref": "testall",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "testallPut": {
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "PUT",
        "Integration": {
          "Credentials": {
            "Fn::GetAtt": [
              "S3AccessRole",
              "Arn",
            ],
          },
          "IntegrationHttpMethod": "PUT",
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.content-type": "integration.response.header.Content-Type",
              },
              "StatusCode": 200,
            },
            {
              "ResponseTemplates": {
                "application/xml": "{"error":"Job not found"}",
              },
              "SelectionPattern": "403",
              "StatusCode": 404,
            },
          ],
          "RequestParameters": {
            "integration.request.path.proxy": "method.request.path.proxy",
          },
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#set($inputRoot = $input.path('$'))

{
    "bucket":"\${TestAllBucket}",
    "index":"\${Var.QnaIndex}",
    "id":"$input.params('proxy')",
    "config":"status-testall/$input.params('proxy')",
    "tmp":"tmp-testall/$input.params('proxy')",
    "key":"data-testall/$input.params('proxy')",
    "filter":"$inputRoot.get('filter')",
    "token":"$inputRoot.get('token')",
    "locale":"$inputRoot.get('locale')",
    "status":"Started"
}

",
            },
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":s3:path/",
                {
                  "Ref": "TestAllBucket",
                },
                "/status-testall/{proxy}",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.content-type": false,
            },
            "StatusCode": 200,
          },
          {
            "StatusCode": 400,
          },
          {
            "StatusCode": 404,
          },
        ],
        "RequestParameters": {
          "method.request.path.proxy": false,
        },
        "ResourceId": {
          "Ref": "testall",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
    "testalls": {
      "Properties": {
        "ParentId": {
          "Ref": "Jobs",
        },
        "PathPart": "testall",
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Resource",
    },
    "testallsList": {
      "Properties": {
        "AuthorizationType": "AWS_IAM",
        "HttpMethod": "GET",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "StatusCode": 200,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[InternalServiceError].*",
              "StatusCode": 500,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[BadRequest].*",
              "StatusCode": 400,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[Conflict].*",
              "StatusCode": 409,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*[NotFound].*",
              "StatusCode": 404,
            },
            {
              "ResponseTemplates": {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))


{
    "type":"$errorMessageObj.type",
    "message":"$errorMessageObj.message",
    "data":"$errorMessageObj.data"
}

",
              },
              "SelectionPattern": ".*Exception.*",
              "StatusCode": 405,
            },
          ],
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": "#set ($root="https://\${!context.domainName}/\${!context.stage}")

{
    "bucket":"\${ContentDesignerOutputBucket}",
    "prefix":"status-testall/",
    "perpage":"$input.params('perpage')",
    "token":"$input.params('token')",
    "type":"testall",
    "root":"$root"
}

",
            },
          },
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region",
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "S3ListLambda",
                    "Arn",
                  ],
                },
                "/invocations",
              ],
            ],
          },
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.date": true,
            },
            "StatusCode": 200,
          },
          {
            "StatusCode": 404,
          },
          {
            "StatusCode": 405,
          },
          {
            "StatusCode": 500,
          },
        ],
        "RequestParameters": {
          "method.request.querystring.perpage": false,
          "method.request.querystring.token": false,
        },
        "ResourceId": {
          "Ref": "testalls",
        },
        "RestApiId": {
          "Ref": "API",
        },
      },
      "Type": "AWS::ApiGateway::Method",
    },
  },
  "Rules": {
    "RequireLambdaArnForLambdaEmbeddingsApi": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Equals": [
                  {
                    "Ref": "EmbeddingsLambdaArn",
                  },
                  "",
                ],
              },
            ],
          },
          "AssertDescription": "EmbeddingsLambdaArn is required when EmbeddingsApi is set to LAMBDA.",
        },
      ],
      "RuleCondition": {
        "Fn::Equals": [
          {
            "Ref": "EmbeddingsApi",
          },
          "LAMBDA",
        ],
      },
    },
  },
}
`;
